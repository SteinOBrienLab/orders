/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/admin/audit-log/": {
    /** @description Lists all audit log entries. */
    get: operations["admin_audit_log"];
  };
  "/api/admin/audit-log/action-types/": {
    /** @description List all distinct action types related to an audit log entry. */
    get: operations["admin_audit_log_types"];
  };
  "/api/admin/audit-log/export/": {
    /** @description Creates a job to export the filtered audit log to a CSV file. */
    post: operations["export_audit_log"];
  };
  "/api/admin/audit-log/groups/": {
    /** @description List all distinct group names related to an audit log entry. */
    get: operations["admin_audit_log_groups"];
  };
  "/api/admin/audit-log/users/": {
    /** @description List all users that have performed an action in the audit log. */
    get: operations["admin_audit_log_users"];
  };
  "/api/admin/auth-provider/": {
    /** @description List all the available authentication providers. */
    get: operations["list_auth_providers"];
    /** @description Creates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook. */
    post: operations["create_auth_provider"];
  };
  "/api/admin/auth-provider/{auth_provider_id}/": {
    /** @description Get an authentication provider. */
    get: operations["get_auth_provider"];
    /** @description Delete an authentication provider. */
    delete: operations["delete_auth_provider"];
    /** @description Updates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook. */
    patch: operations["update_auth_provider"];
  };
  "/api/admin/dashboard/": {
    /**
     * @description Returns the new and active users for the last 24 hours, 7 days and 30 days. The `previous_` values are the values of the period before, so for example `previous_new_users_last_24_hours` are the new users that signed up from 48 to 24 hours ago. It can be used to calculate an increase or decrease in the amount of signups. A list of the new and active users for every day for the last 30 days is also included.
     * 
     * This is a **premium** feature.
     */
    get: operations["admin_dashboard"];
  };
  "/api/admin/groups/": {
    /**
     * @description Returns all groups with detailed information on each group, if the requesting user is staff.
     * 
     * This is a **premium** feature.
     */
    get: operations["admin_list_groups"];
  };
  "/api/admin/groups/{group_id}/": {
    /**
     * @description Deletes the specified group and the applications inside that group, if the requesting user is staff. 
     * 
     * This is a **premium** feature.
     */
    delete: operations["admin_delete_group"];
  };
  "/api/admin/users/": {
    /**
     * @description Returns all users with detailed information on each user, if the requesting user is staff. 
     * 
     * This is a **premium** feature.
     */
    get: operations["admin_list_users"];
  };
  "/api/admin/users/{user_id}/": {
    /**
     * @description Deletes the specified user, if the requesting user has admin permissions. You cannot delete yourself. 
     * 
     * This is a **premium** feature.
     */
    delete: operations["admin_delete_user"];
    /**
     * @description Updates specified user attributes and returns the updated user if the requesting user is staff. You cannot update yourself to no longer be an admin or active. 
     * 
     * This is a **premium** feature.
     */
    patch: operations["admin_edit_user"];
  };
  "/api/admin/users/impersonate/": {
    /**
     * @description This endpoint allows staff to impersonate another user by requesting a JWT token and user object. The requesting user must have staff access in order to do this. It's not possible to impersonate a superuser or staff.
     * 
     * This is a **premium** feature.
     */
    post: operations["admin_impersonate_user"];
  };
  "/api/applications/": {
    /** @description Lists all the applications that the authorized user has access to. The properties that belong to the application can differ per type. An application always belongs to a single group. All the applications of the groups that the user has access to are going to be listed here. */
    get: operations["list_all_applications"];
  };
  "/api/applications/{application_id}/": {
    /** @description Returns the requested application if the authorized user is in the application's group. The properties that belong to the application can differ per type. */
    get: operations["get_application"];
    /** @description Deletes an application if the authorized user is in the application's group. All the related children are also going to be deleted. For example in case of a database application all the underlying tables, fields, views and rows are going to be deleted. */
    delete: operations["delete_application"];
    /** @description Updates the existing application related to the provided `application_id` param if the authorized user is in the application's group. It is not possible to change the type, but properties like the name can be changed. */
    patch: operations["update_application"];
  };
  "/api/applications/{application_id}/duplicate/async/": {
    /** @description Duplicate an application if the authorized user is in the application's group. All the related children are also going to be duplicated. For example in case of a database application all the underlying tables, fields, views and rows are going to be duplicated. */
    post: operations["duplicate_application_async"];
  };
  "/api/applications/group/{group_id}/": {
    /** @description Lists all the applications of the group related to the provided `group_id` parameter if the authorized user is in that group. If thegroup is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single group. */
    get: operations["list_applications"];
    /** @description Creates a new application based on the provided type. The newly created application is going to be added to the group related to the provided `group_id` parameter. If the authorized user does not belong to the group an error will be returned. */
    post: operations["create_application"];
  };
  "/api/applications/group/{group_id}/order/": {
    /** @description Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`. */
    post: operations["order_applications"];
  };
  "/api/auth-provider/login-options/": {
    /** @description Lists the available login options for the configured authentication providers. */
    get: operations["list_auth_providers_login_options"];
  };
  "/api/database/export/{job_id}/": {
    /** @description Returns information such as export progress and state or the url of the exported file for the specified export job, only if the requesting user has access. */
    get: operations["get_export_job"];
  };
  "/api/database/export/table/{table_id}/": {
    /** @description Creates and starts a new export job for a table given some exporter options. Returns an error if the requesting user does not have permissionsto view the table. */
    post: operations["export_table"];
  };
  "/api/database/fields/{field_id}/": {
    /** @description Returns the existing field if the authorized user has access to the related database's group. Depending on the type different properties could be returned. */
    get: operations["get_database_table_field"];
    /** @description Deletes the existing field if the authorized user has access to the related database's group. Note that all the related data to that field is also deleted. Primary fields cannot be deleted because their value represents the row. If deleting the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key. */
    delete: operations["delete_database_table_field"];
    /** @description Updates the existing field if the authorized user has access to the related database's group. The type can also be changed and depending on that type, different additional properties can optionally be set. If you change the field type it could happen that the data conversion fails, in that case the `ERROR_CANNOT_CHANGE_FIELD_TYPE` is returned, but this rarely happens. If a data value cannot be converted it is set to `null` so data might go lost.If updated the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key. */
    patch: operations["update_database_table_field"];
  };
  "/api/database/fields/{field_id}/duplicate/async/": {
    /** @description Duplicates the table with the provided `table_id` parameter if the authorized user has access to the database's group. */
    post: operations["duplicate_table_field"];
  };
  "/api/database/fields/{field_id}/unique_row_values/": {
    /** @description Returns a list of all the unique row values for an existing field, sorted in order of frequency. */
    get: operations["get_database_field_unique_row_values"];
  };
  "/api/database/fields/table/{table_id}/": {
    /** @description Lists all the fields of the table related to the provided parameter if the user has access to the related database's group. If the group is related to a template, then this endpoint will be publicly accessible. A table consists of fields and each field can have a different type. Each type can have different properties. A field is comparable with a regular table's column. */
    get: operations["list_database_table_fields"];
    /** @description Creates a new field for the table related to the provided `table_id` parameter if the authorized user has access to the related database's group. Depending on the type, different properties can optionally be set.If creating the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key. */
    post: operations["create_database_table_field"];
  };
  "/api/database/formula/{table_id}/type/": {
    /** @description Calculates and returns the type of the specified formula value. Does not change the state of the field in any way. */
    post: operations["type_formula_field"];
  };
  "/api/database/rows/names/": {
    /** @description Returns the names of the given row of the given tables. The nameof a row is the primary field value for this row. The result can be usedfor example, when you want to display the name of a linked row from another table. */
    get: operations["list_database_table_row_names"];
  };
  "/api/database/rows/table/{table_id}/": {
    /** @description Lists all the rows of the table related to the provided parameter if the user has access to the related database's group. The response is paginated by a page/size style. It is also possible to provide an optional search query, only rows where the data matches the search query are going to be returned then. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type. */
    get: operations["list_database_table_rows"];
    /** @description Creates a new row in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided. */
    post: operations["create_database_table_row"];
  };
  "/api/database/rows/table/{table_id}/{row_id}/": {
    /** @description Fetches an existing row from the table if the user has access to the related table's group. The properties of the returned row depend on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type. */
    get: operations["get_database_table_row"];
    /** @description Deletes an existing row in the table if the user has access to the table's group. */
    delete: operations["delete_database_table_row"];
    /** @description Updates an existing row in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided. */
    patch: operations["update_database_table_row"];
  };
  "/api/database/rows/table/{table_id}/{row_id}/adjacent/": {
    /** @description Fetches the adjacent row to a given row_id in the table with the given table_id. If the previous flag is set it will return the previous row, otherwise it will return the next row. You can specifya view_id and it will apply the filters and sorts of the provided view. */
    get: operations["get_adjacent_database_table_row"];
  };
  "/api/database/rows/table/{table_id}/{row_id}/move/": {
    /** @description Moves the row related to given `row_id` parameter to another position. It is only possible to move the row before another existing row or to the end. If the `before_id` is provided then the row related to the `row_id` parameter is moved before that row. If the `before_id` parameter is not provided, then the row will be moved to the end. */
    patch: operations["move_database_table_row"];
  };
  "/api/database/rows/table/{table_id}/batch/": {
    /**
     * @description Creates new rows in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * 
     *  **WARNING:** This endpoint doesn't yet work with row created webhooks.
     */
    post: operations["batch_create_database_table_rows"];
    /**
     * @description Updates existing rows in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided for each row. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * 
     *  **WARNING:** This endpoint doesn't yet work with row updated webhooks.
     */
    patch: operations["batch_update_database_table_rows"];
  };
  "/api/database/rows/table/{table_id}/batch-delete/": {
    /**
     * @description Deletes existing rows in the table if the user has access to the table's group.
     * 
     *  **WARNING:**  This endpoint doesn't yet work with row deleted webhooks.
     */
    post: operations["batch_delete_database_table_rows"];
  };
  "/api/database/tables/{table_id}/": {
    /** @description Returns the requested table if the authorized user has access to the related database's group. */
    get: operations["get_database_table"];
    /** @description Deletes the existing table if the authorized user has access to the related database's group. */
    delete: operations["delete_database_table"];
    /** @description Updates the existing table if the authorized user has access to the related database's group. */
    patch: operations["update_database_table"];
  };
  "/api/database/tables/{table_id}/duplicate/async/": {
    /** @description Start a job to duplicate the table with the provided `table_id` parameter if the authorized user has access to the database's group. */
    post: operations["duplicate_database_table_async"];
  };
  "/api/database/tables/{table_id}/import/async/": {
    /** @description Import data in the specified table if the authorized user has access to the related database's group. This endpoint is asynchronous and return the created job to track the progress of the task. */
    post: operations["import_data_database_table_async"];
  };
  "/api/database/tables/database/{database_id}/": {
    /** @description Lists all the tables that are in the database related to the `database_id` parameter if the user has access to the database's group. A table is exactly as the name suggests. It can hold multiple fields, each having their own type and multiple rows. They can be added via the **create_database_table_field** and **create_database_table_row** endpoints. */
    get: operations["list_database_tables"];
    /**
     * @description Creates synchronously a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database's group.
     * 
     * As an alternative you can use the `create_async_database_table` for better performances and importing bigger files.
     */
    post: operations["create_database_table"];
  };
  "/api/database/tables/database/{database_id}/async/": {
    /** @description Creates a job that creates a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database's group. This endpoint is asynchronous and return the created job to track the progress of the task. */
    post: operations["create_database_table_async"];
  };
  "/api/database/tables/database/{database_id}/order/": {
    /** @description Changes the order of the provided table ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`. */
    post: operations["order_database_tables"];
  };
  "/api/database/tokens/": {
    /** @description Lists all the database tokens that belong to the authorized user. A token can be used to create, read, update and delete rows in the tables of the token's group. It only works on the tables if the token has the correct permissions. The **Database table rows** endpoints can be used for these operations. */
    get: operations["list_database_tokens"];
    /** @description Creates a new database token for a given group and for the authorized user. */
    post: operations["create_database_token"];
  };
  "/api/database/tokens/{token_id}/": {
    /** @description Returns the requested database token if it is owned by the authorized user andif the user has access to the related group. */
    get: operations["get_database_token"];
    /** @description Deletes the existing database token if it is owned by the authorized user and ifthe user has access to the related group. */
    delete: operations["delete_database_token"];
    /** @description Updates the existing database token if it is owned by the authorized user and ifthe user has access to the related group. */
    patch: operations["update_database_token"];
  };
  "/api/database/tokens/check/": {
    /** @description This endpoint check be used to check if the provided personal API token is valid. If returns a `200` response if so and a `403` is not. This can be used by integrations like Zapier or n8n to test if a token is valid. */
    get: operations["check_database_token"];
  };
  "/api/database/view/{view_id}/premium": {
    /** @description Sets view attributes only available for premium users. */
    patch: operations["premium_view_attributes_update"];
  };
  "/api/database/views/{slug}/link-row-field-lookup/{field_id}/": {
    /** @description If the view is publicly shared or if an authenticated user has access to the related group, then this endpoint can be used to do a value lookup of the link row fields that are included in the view. Normally it is not possible for a not authenticated visitor to fetch the rows of a table. This endpoint makes it possible to fetch the id and primary field value of the related table of a link row included in the view. */
    get: operations["database_table_public_view_link_row_field_lookup"];
  };
  "/api/database/views/{slug}/public/auth/": {
    /** @description Returns a valid never-expiring JWT token for this public shared view if the password provided matches with the one saved by the view's owner. */
    post: operations["public_view_token_auth"];
  };
  "/api/database/views/{slug}/public/info/": {
    /** @description Returns the required public information to display a single shared view. */
    get: operations["get_public_view_info"];
  };
  "/api/database/views/{view_id}/": {
    /** @description Returns the existing view if the authorized user has access to the related database's group. Depending on the type different propertiescould be returned. */
    get: operations["get_database_table_view"];
    /** @description Deletes the existing view if the authorized user has access to the related database's group. Note that all the related settings of the view are going to be deleted also. The data stays intact after deleting the view because this is related to the table and not the view. */
    delete: operations["delete_database_table_view"];
    /** @description Updates the existing view if the authorized user has access to the related database's group. The type cannot be changed. It depends on the existing type which properties can be changed. */
    patch: operations["update_database_table_view"];
  };
  "/api/database/views/{view_id}/decorations/": {
    /** @description Lists all decorations of the view related to the provided `view_id` if the user has access to the related database's group. A view can have multiple decorations. View decorators can be used to decorate rows. This can, for example, be used to change the border or background color of a row if it matches certain conditions. */
    get: operations["list_database_table_view_decorations"];
    /** @description Creates a new decoration for the view related to the provided `view_id` parameter if the authorized user has access to the related database's group. */
    post: operations["create_database_table_view_decoration"];
  };
  "/api/database/views/{view_id}/duplicate/": {
    /**
     * @description Duplicates an existing view if the user has access to it. When a view is duplicated everything is copied except:
     * - The name is appended with the copy number. Ex: `View Name` -> `View Name (2)` and `View (2)` -> `View (3)`
     * - If the original view is publicly shared, the new view will not be shared anymore
     */
    post: operations["duplicate_database_table_view"];
  };
  "/api/database/views/{view_id}/field-options/": {
    /** @description Responds with the fields options of the provided view if the authenticated user has access to the related group. */
    get: operations["get_database_table_view_field_options"];
    /** @description Updates the field options of a view. The field options differ per field type  This could for example be used to update the field width of a `grid` view if the user changes it. */
    patch: operations["update_database_table_view_field_options"];
  };
  "/api/database/views/{view_id}/filters/": {
    /** @description Lists all filters of the view related to the provided `view_id` if the user has access to the related database's group. A view can have multiple filters. When all the rows are requested for the view only those that apply to the filters are returned. */
    get: operations["list_database_table_view_filters"];
    /** @description Creates a new filter for the view related to the provided `view_id` parameter if the authorized user has access to the related database's group. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, then only the rows that apply to all the filters are going to be returned. A filter compares the value of a field to the value of a filter. It depends on the type how values are going to be compared. */
    post: operations["create_database_table_view_filter"];
  };
  "/api/database/views/{view_id}/rotate-slug/": {
    /** @description Rotates the unique slug of the view by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won't be able to access the viewanymore. Only view types which are sharable can have their slugs rotated. */
    post: operations["rotate_database_view_slug"];
  };
  "/api/database/views/{view_id}/sortings/": {
    /** @description Lists all sortings of the view related to the provided `view_id` if the user has access to the related database's group. A view can have multiple sortings. When all the rows are requested they will be in the desired order. */
    get: operations["list_database_table_view_sortings"];
    /** @description Creates a new sort for the view related to the provided `view_id` parameter if the authorized user has access to the related database's group. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, they will be returned in the respected order defined by all the sortings. */
    post: operations["create_database_table_view_sort"];
  };
  "/api/database/views/decoration/{view_decoration_id}/": {
    /** @description Returns the existing view decoration if the current user has access to the related database's group. */
    get: operations["get_database_table_view_decoration"];
    /** @description Deletes the existing decoration if the authorized user has access to the related database's group. */
    delete: operations["delete_database_table_view_decoration"];
    /** @description Updates the existing decoration if the authorized user has access to the related database's group. */
    patch: operations["update_database_table_view_decoration"];
  };
  "/api/database/views/filter/{view_filter_id}/": {
    /** @description Returns the existing view filter if the authorized user has access to the related database's group. */
    get: operations["get_database_table_view_filter"];
    /** @description Deletes the existing filter if the authorized user has access to the related database's group. */
    delete: operations["delete_database_table_view_filter"];
    /** @description Updates the existing filter if the authorized user has access to the related database's group. */
    patch: operations["update_database_table_view_filter"];
  };
  "/api/database/views/form/{slug}/submit/": {
    /** @description Returns the meta data related to the form view if the form is publicly shared or if the user has access to the related group. This data can be used to construct a form with the right fields. */
    get: operations["get_meta_database_table_form_view"];
    /** @description Submits the form if the form is publicly shared or if the user has access to the related group. The provided data will be validated based on the fields that are in the form and the rules per field. If valid, a new row will be created in the table. */
    post: operations["submit_database_table_form_view"];
  };
  "/api/database/views/form/{slug}/upload-file/": {
    /** @description Uploads a file anonymously to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents. */
    post: operations["upload_file_form_view"];
  };
  "/api/database/views/gallery/{slug}/public/rows/": {
    /** @description Lists the requested rows of the view's table related to the provided `slug` if the gallery view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type. */
    get: operations["public_list_database_table_gallery_view_rows"];
  };
  "/api/database/views/gallery/{view_id}/": {
    /** @description Lists the requested rows of the view's table related to the provided `view_id` if the authorized user has access to the database's group. The response is paginated by a limit/offset style. */
    get: operations["list_database_table_gallery_view_rows"];
  };
  "/api/database/views/grid/{slug}/public/rows/": {
    /** @description Lists the requested rows of the view's table related to the provided `slug` if the grid view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type. */
    get: operations["public_list_database_table_grid_view_rows"];
  };
  "/api/database/views/grid/{view_id}/": {
    /**
     * @description Lists the requested rows of the view's table related to the provided `view_id` if the authorized user has access to the database's group. The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * 
     * The filters and sortings are automatically applied. To get a full overview of the applied filters and sortings you can use the `list_database_table_view_filters` and `list_database_table_view_sortings` endpoints.
     */
    get: operations["list_database_table_grid_view_rows"];
    /** @description Lists only the rows and fields that match the request. Only the rows with the ids that are in the `row_ids` list are going to be returned. Same goes for the fields, only the fields with the ids in the `field_ids` are going to be returned. This endpoint could be used to refresh data after changes something. For example in the web frontend after changing a field type, the data of the related cells will be refreshed using this endpoint. In the example all field types are listed, but normally  the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type. */
    post: operations["filter_database_table_grid_view_rows"];
  };
  "/api/database/views/grid/{view_id}/aggregation/{field_id}/": {
    /** @description Computes the aggregation of all the values for a specified field from the selected grid view. You must select the aggregation type by setting the `type` GET parameter. If filters are configured for the selected view, the aggregation is calculated only on filtered rows. You need to have read permissions on the view to request an aggregation. */
    get: operations["get_database_table_grid_view_field_aggregation"];
  };
  "/api/database/views/grid/{view_id}/aggregations/": {
    /** @description Returns all field aggregations values previously defined for this grid view. If filters exist for this view, the aggregations are computed only on filtered rows.You need to have read permissions on the view to request aggregations. */
    get: operations["get_database_table_grid_view_field_aggregations"];
  };
  "/api/database/views/kanban/{slug}/public/rows/": {
    /**
     * @description Responds with serialized rows grouped by the view's single select field options related to the `slug` if the kanban view is publicly shared. Additional query parameters can be provided to control the `limit` and `offset` per select option. 
     * 
     * This is a **premium** feature.
     */
    get: operations["public_list_database_table_kanban_view_rows"];
  };
  "/api/database/views/kanban/{view_id}/": {
    /**
     * @description Responds with serialized rows grouped by the view's single select field options if the user is authenticated and has access to the related group. Additional query parameters can be provided to control the `limit` and `offset` per select option.
     * 
     * This is a **premium** feature.
     */
    get: operations["list_database_table_kanban_view_rows"];
  };
  "/api/database/views/sort/{view_sort_id}/": {
    /** @description Returns the existing view sort if the authorized user has access to the related database's group. */
    get: operations["get_database_table_view_sort"];
    /** @description Deletes the existing sort if the authorized user has access to the related database's group. */
    delete: operations["delete_database_table_view_sort"];
    /** @description Updates the existing sort if the authorized user has access to the related database's group. */
    patch: operations["update_database_table_view_sort"];
  };
  "/api/database/views/table/{table_id}/": {
    /** @description Lists all views of the table related to the provided `table_id` if the user has access to the related database's group. If the group is related to a template, then this endpoint will be publicly accessible. A table can have multiple views. Each view can display the data in a different way. For example the `grid` view shows the in a spreadsheet like way. That type has custom endpoints for data retrieval and manipulation. In the future other views types like a calendar or Kanban are going to be added. Each type can have different properties. */
    get: operations["list_database_table_views"];
    /** @description Creates a new view for the table related to the provided `table_id` parameter if the authorized user has access to the related database's group. Depending on the type, different properties can optionally be set. */
    post: operations["create_database_table_view"];
  };
  "/api/database/views/table/{table_id}/order/": {
    /** @description Changes the order of the provided view ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided views will be set to `0`. */
    post: operations["order_database_table_views"];
  };
  "/api/database/webhooks/{webhook_id}/": {
    /** @description Returns the existing webhook if the authorized user has access to the related database group. */
    get: operations["get_database_table_webhook"];
    /** @description Deletes the existing webhook if the authorized user has access to the related database's group. */
    delete: operations["delete_database_table_webhook"];
    /** @description Updates the existing view if the authorized user has access to the related database group. */
    patch: operations["update_database_table_webhook"];
  };
  "/api/database/webhooks/table/{table_id}/": {
    /** @description Lists all webhooks of the table related to the provided `table_id` if the user has access to the related database group. */
    get: operations["list_database_table_webhooks"];
    /** @description Creates a new webhook for the table related to the provided `table_id` parameter if the authorized user has access to the related database group. */
    post: operations["create_database_table_webhook"];
  };
  "/api/database/webhooks/table/{table_id}/test-call/": {
    /** @description This endpoint triggers a test call based on the provided data if the user has access to the group related to the table. The test call will be made immediately and a copy of the request, response and status will be included in the response. */
    post: operations["test_call_database_table_webhook"];
  };
  "/api/groups/": {
    /** @description Lists all the groups of the authorized user. A group can contain multiple applications like a database. Multiple users can have access to a group. For example each company could have their own group containing databases related to that company. The order of the groups are custom for each user. The order is configurable via the **order_groups** endpoint. */
    get: operations["list_groups"];
    /** @description Creates a new group where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints. */
    post: operations["create_group"];
  };
  "/api/groups/{group_id}/": {
    /** @description Deletes an existing group if the authorized user belongs to the group. All the applications, databases, tables etc that were in the group are going to be deleted also. */
    delete: operations["delete_group"];
    /** @description Updates the existing group related to the provided `group_id` parameter if the authorized user belongs to the group. It is not yet possible to add additional users to a group. */
    patch: operations["update_group"];
  };
  "/api/groups/{group_id}/leave/": {
    /** @description Makes the authenticated user leave the group related to the provided `group_id` if the user is in that group. If the user is the last admin in the group, he will not be able to leave it. There must always be one admin in the group, otherwise it will be left without control. If that is the case, he must either delete the group or give another member admin permissions first. */
    post: operations["leave_group"];
  };
  "/api/groups/{group_id}/permissions/": {
    /**
     * @description Returns a the permission data necessary to determine the permissions of a specific user over a specific group. 
     * See `core.handler.CoreHandler.get_permissions()` for more details.
     */
    get: operations["group_permissions"];
  };
  "/api/groups/invitations/{group_invitation_id}/": {
    /** @description Returns the requested group invitation if the authorized user has admin right to the related group */
    get: operations["get_group_invitation"];
    /** @description Deletes a group invitation if the authorized user has admin rights to the related group. */
    delete: operations["delete_group_invitation"];
    /** @description Updates the existing group invitation related to the provided `group_invitation_id` param if the authorized user has admin rights to the related group. */
    patch: operations["update_group_invitation"];
  };
  "/api/groups/invitations/{group_invitation_id}/accept/": {
    /** @description Accepts a group invitation with the given id if the email address of the user matches that of the invitation. */
    post: operations["accept_group_invitation"];
  };
  "/api/groups/invitations/{group_invitation_id}/reject/": {
    /** @description Rejects a group invitation with the given id if the email address of the user matches that of the invitation. */
    post: operations["reject_group_invitation"];
  };
  "/api/groups/invitations/group/{group_id}/": {
    /** @description Lists all the group invitations of the group related to the provided `group_id` parameter if the authorized user has admin rights to that group. */
    get: operations["list_group_invitations"];
    /** @description Creates a new group invitations for an email address if the authorized user has admin rights to the related group. An email containing a sign up link will be send to the user. */
    post: operations["create_group_invitation"];
  };
  "/api/groups/invitations/token/{token}/": {
    /** @description Responds with the serialized group invitation if an invitation with the provided token is found. */
    get: operations["get_group_invitation_by_token"];
  };
  "/api/groups/order/": {
    /** @description Changes the order of the provided group ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order will be custom for each user. */
    post: operations["order_groups"];
  };
  "/api/groups/users/{group_user_id}/": {
    /** @description Deletes a group user if the authorized user has admin rights to the related group. */
    delete: operations["delete_group_user"];
    /** @description Updates the existing group user related to the provided `group_user_id` param if the authorized user has admin rights to the related group. */
    patch: operations["update_group_user"];
  };
  "/api/groups/users/group/{group_id}/": {
    /** @description Lists all the users that are in a group if the authorized user has admin permissions to the related group. To add a user to a group an invitation must be sent first. */
    get: operations["list_group_users"];
  };
  "/api/jobs/": {
    /** @description List all existing jobs. Jobs are task executed asynchronously in the background. You can use the `get_job` endpoint to read the currentprogress of a the job. */
    get: operations["list_job"];
    /** @description Creates a new job. This job runs asynchronously in the background and execute the task specific to the provided typeparameters. The `get_job` can be used to get the current state of the job. */
    post: operations["create_job"];
  };
  "/api/jobs/{job_id}/": {
    /** @description Returns the information related to the provided job id. This endpoint can for example be polled to get the state and progress of the job in real time. */
    get: operations["get_job"];
  };
  "/api/licenses/": {
    /** @description Lists all the valid licenses that are registered to this instance. A premium license can be used to unlock the premium features for a fixed amount of users. An enterprise license can similarly be used to unlock enterpise features. More information about self hosted licenses can be found on our pricing page https://baserow.io/pricing. */
    get: operations["admin_licenses"];
    /** @description Registers a new license. After registering you can assign users to the license that will be able to use the license's features while the license is active. If an existing license with the same `license_id` already exists and the provided license has been issued later than that one, the existing one will be upgraded. */
    post: operations["admin_register_license"];
  };
  "/api/licenses/{id}/": {
    /** @description Responds with detailed information about the license related to the provided parameter. */
    get: operations["admin_get_license"];
    /** @description Removes the existing license related to the provided parameter. If the license is active, then all the users that are using the license will lose access to the features granted by that license. */
    delete: operations["admin_remove_license"];
  };
  "/api/licenses/{id}/{user_id}/": {
    /** @description Adds the user related to the provided parameter and to the license related to the parameter. This only happens if there are enough seats left on the license and if the user is not already on the license. */
    post: operations["admin_add_user_to_license"];
    /** @description Removes the user related to the provided parameter and to the license related to the parameter. This only happens if the user is on the license, otherwise nothing will happen. */
    delete: operations["admin_remove_user_from_license"];
  };
  "/api/licenses/{id}/check/": {
    /** @description This endpoint checks with the authority if the license needs to be updated. It also checks if the license is operating within its limits and might take action on that. It could also happen that the license has been deleted because there is an instance id mismatch or because it's invalid. In that case a `204` status code is returned. */
    get: operations["admin_license_check"];
  };
  "/api/licenses/{id}/fill-seats/": {
    /** @description Fills the remaining empty seats of the license with the first users that are found. */
    post: operations["admin_fill_remaining_seats_of_license"];
  };
  "/api/licenses/{id}/lookup-users/": {
    /** @description This endpoint can be used to lookup users that can be added to a  license. Users that are already in the license are not returned here. Optionally a `search` query parameter can be provided to filter the results. */
    get: operations["admin_license_lookup_users"];
  };
  "/api/licenses/{id}/remove-all-users/": {
    /** @description Removes all the users the users that are on the license. This will empty all the seats. */
    post: operations["admin_remove_all_users_from_license"];
  };
  "/api/role/{group_id}/": {
    /** @description You can list the role assignments within a group, optionally filtered downto a specific scope inside of that group. If the scope isn't specified,the group will be considered the scope. */
    get: operations["list_role_assignments"];
    /** @description You can assign a role to a subject into the given group for the given scope with this endpoint. If you want to remove the role you can omit the role property. */
    post: operations["assign_role"];
  };
  "/api/role/{group_id}/batch/": {
    /** @description You can assign a role to a multiple subjects into the given group for the given scope with this endpoint. If you want to remove the role you canomit the role property. */
    post: operations["batch_assign_role"];
  };
  "/api/row_comments/{table_id}/{row_id}/": {
    /** @description Returns all row comments for the specified table and row. */
    get: operations["get_row_comments"];
    /** @description Creates a comment on the specified row. */
    post: operations["create_row_comment"];
  };
  "/api/settings/": {
    /** @description Responds with all the admin configured settings. */
    get: operations["get_settings"];
  };
  "/api/settings/instance-id/": {
    /** @description Responds with the self hosted instance id. Only a user with staff permissions can request it. */
    get: operations["get_instance_id"];
  };
  "/api/settings/update/": {
    /** @description Updates the admin configured settings if the user has admin permissions. */
    patch: operations["update_settings"];
  };
  "/api/snapshots/{snapshot_id}/": {
    /** @description Deletes a snapshot. Deleting a snapshot doesn't affect the application that the snapshot is made from and doesn't affect any applications that were created by restoring it. Snapshot deletion is permanent and can't be undone. */
    delete: operations["delete_snapshot"];
  };
  "/api/snapshots/{snapshot_id}/restore/": {
    /** @description Restores a snapshot. When an application snapshot is restored, a new application will be created in the same group that the original application was placed in with the name of the snapshot and data that were in the original application at the time the snapshot was taken. The original application that the snapshot was taken from is unaffected. Snapshots can be restored multiple times and a number suffix is added to the new application name in the case of a collision. */
    post: operations["restore_snapshot"];
  };
  "/api/snapshots/application/{application_id}/": {
    /** @description Lists snapshots that were created for a given application. */
    get: operations["list_snapshots"];
    /** @description Creates a new application snapshot. Snapshots represent a state of an application at a specific point in time and can be restored later, making it easy to create backups of entire applications. */
    post: operations["create_snapshot"];
  };
  "/api/sso/oauth2/callback/{provider_id}/": {
    /** @description Processes callback from OAuth2 provider and logs the user in if successful. */
    get: operations["oauth_provider_login_callback"];
  };
  "/api/sso/oauth2/login/{provider_id}/": {
    /** @description Redirects to the OAuth2 provider's authentication URL based on the provided auth provider's id. */
    get: operations["oauth_provider_login_redirect"];
  };
  "/api/sso/saml/acs/": {
    /** @description Complete the SAML authentication flow by validating the SAML response. Sign in the user if already exists in Baserow or create a new one otherwise. Once authenticated, the user will be redirected to the original URL they were trying to access. If the response is invalid, the user will be redirected to an error page with a specific error message.It accepts the language code and the group invitation token as query parameters if provided. */
    post: operations["auth_provider_saml_acs_url"];
  };
  "/api/sso/saml/login/": {
    /** @description This is the endpoint that is called when the user wants to initiate a SSO SAML login from Baserow (the service provider). The user will be redirected to the SAML identity provider (IdP) where the user can authenticate. Once logged in in the IdP, the user will be redirected back to the assertion consumer service endpoint (ACS) where the SAML response will be validated and a new JWT session token will be provided to work with Baserow APIs. */
    get: operations["auth_provider_saml_sp_login"];
  };
  "/api/sso/saml/login-url/": {
    /** @description Return the correct redirect_url to initiate the SSO SAML login. It needs an email address if multiple SAML providers are configured otherwise the only configured SAML provider signup URL will be returned. */
    get: operations["auth_provider_login_url"];
  };
  "/api/teams/{team_id}/": {
    /** @description Returns the information related to the provided team id. */
    get: operations["get_team"];
    /** @description Updates an existing team with a new name. */
    put: operations["update_team"];
    /** @description Deletes a team if the authorized user is in the team's group. All the related children (e.g. subjects) are also going to be deleted. */
    delete: operations["delete_team"];
  };
  "/api/teams/{team_id}/subjects/": {
    /** @description Lists all team subjects in a given team. */
    get: operations["list_team_subjects"];
    /** @description Creates a new team subject. */
    post: operations["create_subject"];
  };
  "/api/teams/{team_id}/subjects/{subject_id}/": {
    /** @description Returns the information related to the provided subject id */
    get: operations["get_subject"];
    /** @description Deletes a subject if the authorized user is in the team's group. */
    delete: operations["delete_subject"];
  };
  "/api/teams/group/{group_id}/": {
    /** @description Lists all teams in a given group. */
    get: operations["list_teams"];
    /** @description Creates a new team. */
    post: operations["create_team"];
  };
  "/api/templates/": {
    /** @description Lists all the template categories and the related templates that are in that category. The template's `group_id` can be used for previewing purposes because that group contains the applications that are in the template. All the `get` and `list` endpoints related to that group are publicly accessible. */
    get: operations["list_templates"];
  };
  "/api/templates/install/{group_id}/{template_id}/": {
    /** @description (Deprecated) Installs the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications. */
    post: operations["install_template"];
  };
  "/api/templates/install/{group_id}/{template_id}/async/": {
    /** @description Start an async job to install the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications. */
    post: operations["install_template_async"];
  };
  "/api/trash/": {
    /** @description Responds with the groups and applications available for the requesting user to inspect the trash contents of. */
    get: operations["get_trash_structure"];
  };
  "/api/trash/group/{group_id}/": {
    /** @description Responds with trash contents for a group optionally filtered to a specific application. */
    get: operations["get_contents"];
    /** @description Empties the specified group and/or application of trash, including the group and application themselves if they are trashed also. */
    delete: operations["empty_contents"];
  };
  "/api/trash/restore/": {
    /** @description Restores the specified trashed item back into baserow. */
    patch: operations["restore"];
  };
  "/api/user/": {
    /** @description Creates a new user based on the provided values. If desired an authentication JWT can be generated right away. After creating an account the initial group containing a database is created. */
    post: operations["create_user"];
  };
  "/api/user-files/upload-file/": {
    /** @description Uploads a file to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents. */
    post: operations["upload_file"];
  };
  "/api/user-files/upload-via-url/": {
    /** @description Uploads a file to Baserow by downloading it from the provided URL. */
    post: operations["upload_via_url"];
  };
  "/api/user/account/": {
    /** @description Updates the account information of the authenticated user. */
    patch: operations["update_account"];
  };
  "/api/user/change-password/": {
    /** @description Changes the password of an authenticated user, but only if the old password matches. */
    post: operations["change_password"];
  };
  "/api/user/dashboard/": {
    /** @description Lists all the relevant user information that for example could be shown on a dashboard. It will contain all the pending group invitations for that user. */
    get: operations["dashboard"];
  };
  "/api/user/redo/": {
    /** @description Redoes the latest redoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be redone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters. */
    patch: operations["redo"];
  };
  "/api/user/reset-password/": {
    /** @description Changes the password of a user if the reset token is valid. The **send_password_reset_email** endpoint sends an email to the user containing the token. That token can be used to change the password here without providing the old password. */
    post: operations["reset_password"];
  };
  "/api/user/schedule-account-deletion/": {
    /** @description Schedules the account deletion of the authenticated user. The user will be permanently deleted after the grace delay defined by the instance administrator. */
    post: operations["schedule_account_deletion"];
  };
  "/api/user/send-reset-password-email/": {
    /** @description Sends an email containing the password reset link to the email address of the user. This will only be done if a user is found with the given email address. The endpoint will not fail if the email address is not found. The link is going to the valid for 48 hours. */
    post: operations["send_password_reset_email"];
  };
  "/api/user/token-auth/": {
    /** @description Authenticates an existing user based on their email and their password. If successful, an access token and a refresh token will be returned. */
    post: operations["token_auth"];
  };
  "/api/user/token-refresh/": {
    /** @description Generate a new access_token that can be used to continue operating on Baserow starting from a valid refresh token. */
    post: operations["token_refresh"];
  };
  "/api/user/token-verify/": {
    /** @description Verifies if the refresh token is valid and can be used to generate a new access_token. */
    post: operations["token_verify"];
  };
  "/api/user/undo/": {
    /** @description undoes the latest undoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be undone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters. */
    patch: operations["undo"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description This serializer must be kept in sync with `UserSerializer`. */
    Account: {
      first_name: string;
      /** @description An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB. */
      language?: string;
    };
    /**
     * @description Mixin to a DRF serializer class to raise an exception if data with unknown fields
     * is provided to the serializer.
     */
    ActionScopes: {
      /** @description If set to true then actions registered in the root scope will be included when undoing or redoing. */
      root?: boolean | null;
      /** @description If set to a groups id then any actions directly related to that group will be be included when undoing or redoing. */
      group?: number | null;
      /** @description If set to an applications id then any actions directly related to that application will be be included when undoing or redoing. */
      application?: number | null;
      /** @description If set to a table id then any actions directly related to that table will be be included when undoing or redoing. */
      table?: number | null;
      /** @description If set to an view id then any actions directly related to that view will be be included when undoing or redoing. */
      view?: number | null;
      /** @description If set to a group id then any actions directly related to that group will be be included when undoing or redoing. */
      teams_in_group?: number | null;
    };
    AdminDashboard: {
      total_users: number;
      total_groups: number;
      total_applications: number;
      new_users_last_24_hours: number;
      new_users_last_7_days: number;
      new_users_last_30_days: number;
      previous_new_users_last_24_hours: number;
      previous_new_users_last_7_days: number;
      previous_new_users_last_30_days: number;
      active_users_last_24_hours: number;
      active_users_last_7_days: number;
      active_users_last_30_days: number;
      previous_active_users_last_24_hours: number;
      previous_active_users_last_7_days: number;
      previous_active_users_last_30_days: number;
      new_users_per_day: (components["schemas"]["AdminDashboardPerDay"])[];
      active_users_per_day: (components["schemas"]["AdminDashboardPerDay"])[];
    };
    AdminDashboardPerDay: {
      /** Format: date */
      date: string;
      count: number;
    };
    /** @enum {string} */
    AggregationRawTypeEnum: "empty_count" | "not_empty_count" | "unique_count" | "min" | "max" | "sum" | "average" | "median" | "decile" | "variance" | "std_dev";
    AirtableImportJobCreateJob: {
      /** @description The type of the job. */
      type: components["schemas"]["Type4afEnum"];
      /** @description The group ID where the Airtable base must be imported into. */
      group_id: number;
      /**
       * Format: uri 
       * @description The publicly shared URL of the Airtable base (e.g. https://airtable.com/shrxxxxxxxxxxxxxx)
       */
      airtable_share_url: string;
      /** @description Optionally a timezone can be provided that must be respected during import. This is for example setting the correct value of the date fields. */
      timezone?: components["schemas"]["TimezoneEnum"];
    };
    AirtableImportJobJob: {
      id: number;
      /** @description The type of the job. */
      type: string;
      /** @description A percentage indicating how far along the job is. 100 means that it's finished. */
      progress_percentage: number;
      /** @description Indicates the state of the import job. */
      state: string;
      /** @description A human readable error message indicating what went wrong. */
      human_readable_error?: string;
      /** @description The group ID where the Airtable base must be imported into. */
      group_id: number;
      database: components["schemas"]["Application"];
      /**
       * Format: uri 
       * @description Public ID of the shared Airtable base that must be imported.
       */
      airtable_share_id: string;
      /** @description Optionally a timezone can be provided that must be respected during import. This is for example setting the correct value of the date fields. */
      timezone: string;
    };
    Application: {
      id: number;
      name: string;
      order: number;
      type: string;
      /** @description The group that the application belongs to. */
      group: components["schemas"]["Group"];
    };
    ApplicationCreate: {
      name: string;
      type: components["schemas"]["ApplicationCreateTypeEnum"];
      /** @default false */
      init_with_data?: boolean;
    };
    /** @enum {string} */
    ApplicationCreateTypeEnum: "database";
    Applications: components["schemas"]["DatabaseApplication"];
    /** @enum {string} */
    ArrayFormulaTypeEnum: "invalid" | "text" | "char" | "link" | "date_interval" | "date" | "boolean" | "number" | "single_select";
    AuditLog: {
      id: number;
      action_type: string;
      user: string;
      group: string;
      type: string;
      description: string;
      /** Format: date-time */
      timestamp: string;
      ip_address: string | null;
    };
    AuditLogExportJob: {
      /**
       * @description The character set to use when creating the export file. 
       * @default utf-8
       */
      export_charset?: components["schemas"]["ExportCharsetEnum"];
      /**
       * @description The value used to separate columns in the resulting csv file. 
       * @default ,
       */
      csv_column_separator?: components["schemas"]["CsvColumnSeparatorEnum"];
      /**
       * @description Whether or not to generate a header row at the top of the csv file. 
       * @default true
       */
      csv_first_row_header?: boolean;
      /** @description Optional: The user to filter the audit log by. */
      filter_user_id?: number;
      /** @description Optional: The group to filter the audit log by. */
      filter_group_id?: number;
      /** @description Optional: The action type to filter the audit log by. */
      filter_action_type?: string;
      /**
       * Format: date-time 
       * @description Optional: The start date to filter the audit log by.
       */
      filter_from_timestamp?: string;
      /**
       * Format: date-time 
       * @description Optional: The end date to filter the audit log by.
       */
      filter_to_timestamp?: string;
      /**
       * Format: date-time 
       * @description The date and time when the export job was created.
       */
      created_on: string;
    };
    AuditLogExportJobCreateJob: {
      /** @description The type of the job. */
      type: components["schemas"]["Type4afEnum"];
      /**
       * @description The character set to use when creating the export file. 
       * @default utf-8
       */
      export_charset?: components["schemas"]["ExportCharsetEnum"];
      /**
       * @description The value used to separate columns in the resulting csv file. 
       * @default ,
       */
      csv_column_separator?: components["schemas"]["CsvColumnSeparatorEnum"];
      /**
       * @description Whether or not to generate a header row at the top of the csv file. 
       * @default true
       */
      csv_first_row_header?: boolean;
      /** @description Optional: The user to filter the audit log by. */
      filter_user_id?: number;
      /** @description Optional: The group to filter the audit log by. */
      filter_group_id?: number;
      /** @description Optional: The action type to filter the audit log by. */
      filter_action_type?: string;
      /**
       * Format: date-time 
       * @description Optional: The start date to filter the audit log by.
       */
      filter_from_timestamp?: string;
      /**
       * Format: date-time 
       * @description Optional: The end date to filter the audit log by.
       */
      filter_to_timestamp?: string;
      /**
       * Format: date-time 
       * @description The date and time when the export job was created.
       */
      created_on: string;
    };
    /**
     * @description When mixed in to a model serializer for an ExportJob this will add an url field
     * with the actual usable url of the export job's file (if it has one).
     */
    AuditLogExportJobJob: {
      id: number;
      /** @description The type of the job. */
      type: string;
      /** @description A percentage indicating how far along the job is. 100 means that it's finished. */
      progress_percentage: number;
      /** @description Indicates the state of the import job. */
      state: string;
      /** @description A human readable error message indicating what went wrong. */
      human_readable_error?: string;
      /**
       * @description The value used to separate columns in the resulting csv file. 
       * @default ,
       */
      csv_column_separator?: components["schemas"]["CsvColumnSeparatorEnum"];
      /**
       * @description Whether or not to generate a header row at the top of the csv file. 
       * @default true
       */
      csv_first_row_header?: boolean;
      /**
       * @description The character set to use when creating the export file. 
       * @default utf-8
       */
      export_charset?: components["schemas"]["ExportCharsetEnum"];
      /** @description Optional: The user to filter the audit log by. */
      filter_user_id?: number;
      /** @description Optional: The group to filter the audit log by. */
      filter_group_id?: number;
      /** @description Optional: The action type to filter the audit log by. */
      filter_action_type?: string;
      /**
       * Format: date-time 
       * @description Optional: The start date to filter the audit log by.
       */
      filter_from_timestamp?: string;
      /**
       * Format: date-time 
       * @description Optional: The end date to filter the audit log by.
       */
      filter_to_timestamp?: string;
      /**
       * Format: date-time 
       * @description The date and time when the export job was created.
       */
      created_on: string;
      /** @description The CSV file containing the filtered audit log entries. */
      exported_file_name?: string | null;
      /** Format: uri */
      url: string;
    };
    AuditLogGroup: {
      name: string;
    };
    AuditLogUser: {
      /**
       * Email address 
       * Format: email
       */
      email?: string;
    };
    Authentication_ProviderAuthProvider: components["schemas"]["PasswordAuthProviderModelAuthProvider"] | components["schemas"]["SamlAuthProviderModelAuthProvider"] | components["schemas"]["GoogleAuthProviderModelAuthProvider"] | components["schemas"]["FacebookAuthProviderModelAuthProvider"] | components["schemas"]["GitHubAuthProviderModelAuthProvider"] | components["schemas"]["GitLabAuthProviderModelAuthProvider"] | components["schemas"]["OpenIdConnectAuthProviderModelAuthProvider"];
    BaseExporterOptions: {
      /** @description Optional: The view for this table to export using its filters, sorts and other view specific settings. */
      view_id?: number | null;
      /** @description The file type to export to. */
      exporter_type: components["schemas"]["ExporterTypeEnum"];
      /**
       * @description The character set to use when creating the export file. 
       * @default utf-8
       */
      export_charset?: components["schemas"]["ExportCharsetEnum"];
    };
    /** @description Serializer used for impersonation. */
    BaserowImpersonateAuthToken: {
      user: number;
    };
    BatchCreateRoleAssignment: {
      items: (components["schemas"]["CreateRoleAssignment"])[];
    };
    BatchDeleteRows: {
      items: (number)[];
    };
    /** @enum {unknown} */
    BlankEnum: "";
    BooleanFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
    };
    BooleanFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
    };
    BooleanFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
    };
    BooleanFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
    };
    ChangePasswordBodyValidation: {
      old_password: string;
      new_password: string;
    };
    Collaborator: {
      id: number;
      name: string;
    };
    /** @enum {string} */
    ConditionTypeEnum: "AND" | "OR";
    ConditionalColorValueProviderConfColor: {
      /** @description A unique identifier for this condition. */
      id: string;
      /** @description The color the decorator should take if the defined conditions apply. */
      color: string;
      /** @description A list of conditions that the row must meet to get the selected color. This list of conditions can be empty, in that case, this color will always match the row values. */
      filters: (components["schemas"]["ConditionalColorValueProviderConfColorFilter"])[];
      /**
       * @description The boolean operator used to group all conditions. 
       * @default AND
       */
      operator?: components["schemas"]["ConditionTypeEnum"];
    };
    ConditionalColorValueProviderConfColorFilter: {
      /** @description A unique identifier for this condition. */
      id: string;
      /** @description The field of which the value must be compared to the filter value. */
      field: number | null;
      /** @description Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`). */
      type: components["schemas"]["TypeC84Enum"] | components["schemas"]["NullEnum"];
      /**
       * @description The field of which the value must be compared to the filter value. 
       * @default
       */
      value?: string;
    };
    ConditionalColorValueProviderConfColors: {
      /** @description A list of color items. For each row, the value provider try to match the defined colors one by one in the given order. The first matching color is returned to the decorator. */
      colors: (components["schemas"]["ConditionalColorValueProviderConfColor"])[];
    };
    CreateGroupInvitation: {
      /**
       * Format: email 
       * @description The email address of the user that the invitation is meant for. Only a user with that email address can accept it.
       */
      email: string;
      /** @description The permissions that the user is going to get within the group after accepting the invitation. */
      permissions?: string;
      /** @description An optional message that the invitor can provide. This will be visible to the receiver of the invitation. */
      message?: string;
      /**
       * Format: uri 
       * @description The base URL where the user can publicly accept his invitation.The accept token is going to be appended to the base_url (base_url '/token').
       */
      base_url: string;
    };
    /** @description The create role assignment serializer. */
    CreateRoleAssignment: {
      /** @description The subject ID. A subject is an actor that can do operations. */
      subject_id: number;
      /** @description The subject type. */
      subject_type: components["schemas"]["SubjectType850Enum"];
      /** @description The uid of the role you want to assign to the user or team in the given group. You can omit this property if you want to remove the role. */
      role: string | null;
      /** @description The ID of the scope object. The scope object limit the role assignment to this scope and all its descendants. */
      scope_id: number;
      /** @description The scope object type. */
      scope_type: components["schemas"]["ScopeTypeEnum"];
    };
    CreateSnapshotJobCreateJob: {
      /** @description The type of the job. */
      type: components["schemas"]["Type4afEnum"];
    };
    CreateSnapshotJobJob: {
      id: number;
      /** @description The type of the job. */
      type: string;
      /** @description A percentage indicating how far along the job is. 100 means that it's finished. */
      progress_percentage: number;
      /** @description Indicates the state of the import job. */
      state: string;
      /** @description A human readable error message indicating what went wrong. */
      human_readable_error?: string;
    };
    CreateViewFilter: {
      /** @description The field of which the value must be compared to the filter value. */
      field: number;
      /** @description Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`). */
      type: components["schemas"]["TypeC84Enum"];
      /**
       * @description The filter value that must be compared to the field's value. 
       * @default
       */
      value?: string;
    };
    CreateViewSort: {
      /** @description The field that must be sorted on. */
      field: number;
      /**
       * @description Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A. 
       * @default ASC
       */
      order?: components["schemas"]["OrderEnum"];
    };
    CreatedOnFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
      timezone: components["schemas"]["TimezoneEnum"];
    };
    CreatedOnFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
      timezone: components["schemas"]["TimezoneEnum"];
    };
    CreatedOnFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
      timezone: components["schemas"]["TimezoneEnum"];
    };
    CreatedOnFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
      timezone: components["schemas"]["TimezoneEnum"];
    };
    /** @enum {string} */
    CsvColumnSeparatorEnum: "," | ";" | ("|") | "tab" | "record_separator" | "unit_separator";
    CsvExporterOptions: {
      /** @description Optional: The view for this table to export using its filters, sorts and other view specific settings. */
      view_id?: number | null;
      /** @description The file type to export to. */
      exporter_type: components["schemas"]["ExporterTypeEnum"];
      /**
       * @description The character set to use when creating the export file. 
       * @default utf-8
       */
      export_charset?: components["schemas"]["ExportCharsetEnum"];
      /**
       * @description The value used to separate columns in the resulting csv file. 
       * @default ,
       */
      csv_column_separator?: components["schemas"]["CsvColumnSeparatorEnum"];
      /**
       * @description Whether or not to generate a header row at the top of the csv file. 
       * @default true
       */
      csv_include_header?: boolean;
    };
    Dashboard: {
      group_invitations: (components["schemas"]["UserGroupInvitation"])[];
    };
    DatabaseApplication: {
      id: number;
      name: string;
      order: number;
      type: string;
      /** @description The group that the application belongs to. */
      group: components["schemas"]["Group"];
      /** @description This field is specific to the `database` application and contains an array of tables that are in the database. */
      tables: readonly (components["schemas"]["Table"])[];
    };
    DateFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
    };
    DateFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
    };
    DateFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
    };
    DateFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
    };
    /** @enum {string} */
    DateFormatEnum: "EU" | "US" | "ISO";
    /** @enum {string} */
    DateTimeFormatEnum: "24" | "12";
    Decorator_Value_Provider_TypeCreateViewDecoration: components["schemas"]["GeneratedSingle_select_colorCreateViewDecoration"] | components["schemas"]["GeneratedConditional_colorCreateViewDecoration"];
    Decorator_Value_Provider_TypeViewDecoration: components["schemas"]["GeneratedSingle_select_colorViewDecoration"] | components["schemas"]["GeneratedConditional_colorViewDecoration"];
    DuplicateApplicationJobCreateJob: {
      /** @description The type of the job. */
      type: components["schemas"]["Type4afEnum"];
      /** @description The application ID to duplicate. */
      application_id: number;
    };
    DuplicateApplicationJobJob: {
      id: number;
      /** @description The type of the job. */
      type: string;
      /** @description A percentage indicating how far along the job is. 100 means that it's finished. */
      progress_percentage: number;
      /** @description Indicates the state of the import job. */
      state: string;
      /** @description A human readable error message indicating what went wrong. */
      human_readable_error?: string;
      original_application: components["schemas"]["SpecificApplication"];
      duplicated_application: components["schemas"]["SpecificApplication"];
    };
    DuplicateFieldJobCreateJob: {
      /** @description The type of the job. */
      type: components["schemas"]["Type4afEnum"];
      /** @description The ID of the field to duplicate. */
      field_id: number;
      /**
       * @description Whether to duplicate the data of the field. 
       * @default false
       */
      duplicate_data?: boolean;
    };
    DuplicateFieldJobJob: {
      id: number;
      /** @description The type of the job. */
      type: string;
      /** @description A percentage indicating how far along the job is. 100 means that it's finished. */
      progress_percentage: number;
      /** @description Indicates the state of the import job. */
      state: string;
      /** @description A human readable error message indicating what went wrong. */
      human_readable_error?: string;
      original_field: components["schemas"]["Field"];
      duplicated_field: components["schemas"]["FieldSerializerWithRelatedFields"];
    };
    DuplicateTableJobCreateJob: {
      /** @description The type of the job. */
      type: components["schemas"]["Type4afEnum"];
      /** @description The ID of the table to duplicate. */
      table_id: number;
    };
    DuplicateTableJobJob: {
      id: number;
      /** @description The type of the job. */
      type: string;
      /** @description A percentage indicating how far along the job is. 100 means that it's finished. */
      progress_percentage: number;
      /** @description Indicates the state of the import job. */
      state: string;
      /** @description A human readable error message indicating what went wrong. */
      human_readable_error?: string;
      original_table: components["schemas"]["Table"];
      duplicated_table: components["schemas"]["Table"];
    };
    EmailFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
    };
    EmailFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
    };
    EmailFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
    };
    EmailFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
    };
    /** @enum {string} */
    EventTypeEnum: "rows.created" | "row.created" | "rows.updated" | "row.updated" | "rows.deleted" | "row.deleted";
    /** @enum {string} */
    EventTypesEnum: "rows.created" | "rows.updated" | "rows.deleted";
    /** @enum {string} */
    Events3eaEnum: "rows.created" | "row.created" | "rows.updated" | "row.updated" | "rows.deleted" | "row.deleted";
    ExampleBatchRowsRequest: {
      items: (components["schemas"]["ExampleRowRequestSerializerWithUserFieldNames"])[];
    };
    ExampleBatchRowsResponse: {
      items: (components["schemas"]["ExampleRowResponseSerializerWithUserFieldNames"])[];
    };
    ExampleBatchUpdateRowRequestSerializerWithUserFieldNames: {
      /** @description The unique identifier of the row in the table. */
      id: number;
      /** @description This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_1?: string | null;
      /** @description This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_2?: string | null;
      /** @description This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_3?: string | null;
      /** @description This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_4?: string | null;
      /**
       * Format: decimal 
       * @description This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
       */
      field_5?: string | null;
      /**
       * @description This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. 
       * @default 0
       */
      field_6?: number;
      /**
       * @description This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. 
       * @default false
       */
      field_7?: boolean;
      /**
       * Format: date 
       * @description This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
       */
      field_8?: string | null;
      /** @description This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes. */
      field_11?: (number)[];
      /** @description This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files. */
      field_12?: (components["schemas"]["FileFieldRequest"])[] | null;
      /** @description This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed. */
      field_13?: number | null;
      field_14?: (number | null)[];
      /** @description This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_15?: string | null;
      field_18?: (components["schemas"]["Collaborator"])[];
    };
    ExampleRowRequest: {
      /** @description This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. */
      field_1?: string | null;
      /** @description This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. */
      field_2?: string | null;
      /** @description This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. */
      field_3?: string | null;
      /** @description This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. */
      field_4?: string | null;
      /**
       * Format: decimal 
       * @description This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field.
       */
      field_5?: string | null;
      /**
       * @description This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. 
       * @default 0
       */
      field_6?: number;
      /**
       * @description This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. 
       * @default false
       */
      field_7?: boolean;
      /**
       * Format: date 
       * @description This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field.
       */
      field_8?: string | null;
      /** @description This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes. */
      field_11?: (number)[];
      /** @description This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files. */
      field_12?: (components["schemas"]["FileFieldRequest"])[] | null;
      /** @description This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed. */
      field_13?: number | null;
      field_14?: (number | null)[];
      /** @description This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. */
      field_15?: string | null;
      field_18?: (components["schemas"]["Collaborator"])[];
    };
    ExampleRowRequestSerializerWithUserFieldNames: {
      /** @description This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_1?: string | null;
      /** @description This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_2?: string | null;
      /** @description This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_3?: string | null;
      /** @description This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_4?: string | null;
      /**
       * Format: decimal 
       * @description This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
       */
      field_5?: string | null;
      /**
       * @description This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. 
       * @default 0
       */
      field_6?: number;
      /**
       * @description This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. 
       * @default false
       */
      field_7?: boolean;
      /**
       * Format: date 
       * @description This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
       */
      field_8?: string | null;
      /** @description This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes. */
      field_11?: (number)[];
      /** @description This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files. */
      field_12?: (components["schemas"]["FileFieldRequest"])[] | null;
      /** @description This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed. */
      field_13?: number | null;
      field_14?: (number | null)[];
      /** @description This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_15?: string | null;
      field_18?: (components["schemas"]["Collaborator"])[];
    };
    ExampleRowResponse: {
      /** @description The unique identifier of the row in the table. */
      id: number;
      /**
       * Format: decimal 
       * @description Indicates the position of the row, lowest first and highest last.
       */
      order?: string;
      /** @description This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. */
      field_1?: string | null;
      /** @description This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. */
      field_2?: string | null;
      /** @description This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. */
      field_3?: string | null;
      /** @description This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. */
      field_4?: string | null;
      /**
       * Format: decimal 
       * @description This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field.
       */
      field_5?: string | null;
      /**
       * @description This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. 
       * @default 0
       */
      field_6?: number;
      /**
       * @description This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. 
       * @default false
       */
      field_7?: boolean;
      /**
       * Format: date 
       * @description This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field.
       */
      field_8?: string | null;
      /**
       * Format: date-time 
       * @description This field represents the `last_modified` field. The number in field_9 is in a normal request or response the id of the field.
       */
      field_9?: string;
      /**
       * Format: date-time 
       * @description This field represents the `created_on` field. The number in field_10 is in a normal request or response the id of the field.
       */
      field_10?: string;
      /** @description This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes. */
      field_11?: (components["schemas"]["LinkRowValue"])[];
      /** @description This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files. */
      field_12?: (components["schemas"]["FileFieldResponse"])[];
      /** @description This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed. */
      field_13?: components["schemas"]["SelectOption"] | null;
      /** @description This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field.This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field, but also the value and color is exposed. */
      field_14?: (components["schemas"]["SelectOption"])[] | null;
      /** @description This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. */
      field_15?: string | null;
      /** @description This field represents the `formula` field. The number in field_16 is in a normal request or response the id of the field. */
      field_16?: string | null;
      /** @description This field represents the `lookup` field. The number in field_17 is in a normal request or response the id of the field. */
      field_17?: string | null;
      /** @description This field represents the `multiple_collaborators` field. The number in field_18 is in a normal request or response the id of the field.This field accepts a list of objects representing the chosen collaborators through the object's `id` property. The id is Baserow user id. The response objects also contains the collaborator name directly along with its id. */
      field_18?: (components["schemas"]["Collaborator"])[];
    };
    ExampleRowResponseSerializerWithUserFieldNames: {
      /** @description The unique identifier of the row in the table. */
      id: number;
      /**
       * Format: decimal 
       * @description Indicates the position of the row, lowest first and highest last.
       */
      order?: string;
      /** @description This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_1?: string | null;
      /** @description This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_2?: string | null;
      /** @description This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_3?: string | null;
      /** @description This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_4?: string | null;
      /**
       * Format: decimal 
       * @description This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
       */
      field_5?: string | null;
      /**
       * @description This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. 
       * @default 0
       */
      field_6?: number;
      /**
       * @description This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. 
       * @default false
       */
      field_7?: boolean;
      /**
       * Format: date 
       * @description This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
       */
      field_8?: string | null;
      /**
       * Format: date-time 
       * @description This field represents the `last_modified` field. The number in field_9 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
       */
      field_9?: string;
      /**
       * Format: date-time 
       * @description This field represents the `created_on` field. The number in field_10 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
       */
      field_10?: string;
      /** @description This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes. */
      field_11?: (components["schemas"]["LinkRowValue"])[];
      /** @description This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files. */
      field_12?: (components["schemas"]["FileFieldResponse"])[];
      /** @description This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed. */
      field_13?: components["schemas"]["SelectOption"] | null;
      /** @description This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field, but also the value and color is exposed. */
      field_14?: (components["schemas"]["SelectOption"])[] | null;
      /** @description This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_15?: string | null;
      /** @description This field represents the `formula` field. The number in field_16 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_16?: string | null;
      /** @description This field represents the `lookup` field. The number in field_17 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_17?: string | null;
      /** @description This field represents the `multiple_collaborators` field. The number in field_18 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts a list of objects representing the chosen collaborators through the object's `id` property. The id is Baserow user id. The response objects also contains the collaborator name directly along with its id. */
      field_18?: (components["schemas"]["Collaborator"])[];
    };
    Export: components["schemas"]["CsvExporterOptions"] | components["schemas"]["BaseExporterOptions"] | components["schemas"]["BaseExporterOptions"];
    /** @enum {string} */
    ExportCharsetEnum: "utf-8" | "iso-8859-6" | "windows-1256" | "iso-8859-4" | "windows-1257" | "iso-8859-14" | "iso-8859-2" | "windows-1250" | "gbk" | "gb18030" | "big5" | "koi8-r" | "koi8-u" | "iso-8859-5" | "windows-1251" | "x-mac-cyrillic" | "iso-8859-7" | "windows-1253" | "iso-8859-8" | "windows-1255" | "euc-jp" | "iso-2022-jp" | "shift-jis" | "euc-kr" | "macintosh" | "iso-8859-10" | "iso-8859-16" | "windows-874" | "windows-1254" | "windows-1258" | "iso-8859-1" | "windows-1252" | "iso-8859-3";
    /**
     * @description When mixed in to a model serializer for an ExportJob this will add an url field
     * with the actual usable url of the export job's file (if it has one).
     */
    ExportJob: {
      id: number;
      table?: number | null;
      view?: number | null;
      exporter_type: string;
      state: components["schemas"]["StateEnum"];
      /** @description DEPRECATED: Use state instead */
      status: string;
      exported_file_name?: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: float */
      progress_percentage?: number;
      /** Format: uri */
      url: string;
    };
    /** @enum {string} */
    ExporterTypeEnum: "csv" | "json" | "xml";
    FacebookAuthProviderModelAuthProvider: {
      id: number;
      /** @description The type of the related field. */
      type: string;
      domain?: string | null;
      enabled?: boolean;
      name: string;
      /** @description App ID, or consumer key */
      client_id: string;
      /** @description API secret, client secret, or consumer secret */
      secret: string;
    };
    Field: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
    };
    FieldCreateField: components["schemas"]["TextFieldCreateField"] | components["schemas"]["LongTextFieldCreateField"] | components["schemas"]["URLFieldCreateField"] | components["schemas"]["EmailFieldCreateField"] | components["schemas"]["NumberFieldCreateField"] | components["schemas"]["RatingFieldCreateField"] | components["schemas"]["BooleanFieldCreateField"] | components["schemas"]["DateFieldCreateField"] | components["schemas"]["LastModifiedFieldCreateField"] | components["schemas"]["CreatedOnFieldCreateField"] | components["schemas"]["LinkRowFieldCreateField"] | components["schemas"]["FileFieldCreateField"] | components["schemas"]["SingleSelectFieldCreateField"] | components["schemas"]["MultipleSelectFieldCreateField"] | components["schemas"]["PhoneNumberFieldCreateField"] | components["schemas"]["FormulaFieldCreateField"] | components["schemas"]["LookupFieldCreateField"] | components["schemas"]["MultipleCollaboratorsFieldCreateField"];
    FieldField: components["schemas"]["TextFieldField"] | components["schemas"]["LongTextFieldField"] | components["schemas"]["URLFieldField"] | components["schemas"]["EmailFieldField"] | components["schemas"]["NumberFieldField"] | components["schemas"]["RatingFieldField"] | components["schemas"]["BooleanFieldField"] | components["schemas"]["DateFieldField"] | components["schemas"]["LastModifiedFieldField"] | components["schemas"]["CreatedOnFieldField"] | components["schemas"]["LinkRowFieldField"] | components["schemas"]["FileFieldField"] | components["schemas"]["SingleSelectFieldField"] | components["schemas"]["MultipleSelectFieldField"] | components["schemas"]["PhoneNumberFieldField"] | components["schemas"]["FormulaFieldField"] | components["schemas"]["LookupFieldField"] | components["schemas"]["MultipleCollaboratorsFieldField"];
    FieldFieldSerializerWithRelatedFields: components["schemas"]["TextFieldFieldSerializerWithRelatedFields"] | components["schemas"]["LongTextFieldFieldSerializerWithRelatedFields"] | components["schemas"]["URLFieldFieldSerializerWithRelatedFields"] | components["schemas"]["EmailFieldFieldSerializerWithRelatedFields"] | components["schemas"]["NumberFieldFieldSerializerWithRelatedFields"] | components["schemas"]["RatingFieldFieldSerializerWithRelatedFields"] | components["schemas"]["BooleanFieldFieldSerializerWithRelatedFields"] | components["schemas"]["DateFieldFieldSerializerWithRelatedFields"] | components["schemas"]["LastModifiedFieldFieldSerializerWithRelatedFields"] | components["schemas"]["CreatedOnFieldFieldSerializerWithRelatedFields"] | components["schemas"]["LinkRowFieldFieldSerializerWithRelatedFields"] | components["schemas"]["FileFieldFieldSerializerWithRelatedFields"] | components["schemas"]["SingleSelectFieldFieldSerializerWithRelatedFields"] | components["schemas"]["MultipleSelectFieldFieldSerializerWithRelatedFields"] | components["schemas"]["PhoneNumberFieldFieldSerializerWithRelatedFields"] | components["schemas"]["FormulaFieldFieldSerializerWithRelatedFields"] | components["schemas"]["LookupFieldFieldSerializerWithRelatedFields"] | components["schemas"]["MultipleCollaboratorsFieldFieldSerializerWithRelatedFields"];
    FieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
    };
    FileFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
    };
    FileFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
    };
    FileFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
    };
    FileFieldRequest: {
      /** @description A visually editable name for the field. */
      visible_name?: string;
      /** @description Accepts the name of the already uploaded user file. */
      name: string;
    };
    FileFieldResponse: {
      /** Format: uri */
      url: string;
      thumbnails: {
        [key: string]: unknown | undefined;
      };
      visible_name: string;
      name: string;
      size: number;
      mime_type: string;
      is_image: boolean;
      image_width: number;
      image_height: number;
      /** Format: date-time */
      uploaded_at: string;
    };
    FileFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
    };
    FileImportJobCreateJob: {
      /** @description The type of the job. */
      type: components["schemas"]["Type4afEnum"];
    };
    FileImportJobJob: {
      id: number;
      /** @description The type of the job. */
      type: string;
      /** @description A percentage indicating how far along the job is. 100 means that it's finished. */
      progress_percentage: number;
      /** @description Indicates the state of the import job. */
      state: string;
      /** @description A human readable error message indicating what went wrong. */
      human_readable_error?: string;
      /** @description Database id where the table will be created. */
      database_id: number;
      /** @description The name of the new table. */
      name?: string;
      /** @description Table id where the data will be imported. */
      table_id?: number;
      /** @default false */
      first_row_header?: boolean;
      /** @description Import error report. */
      report: components["schemas"]["Report"];
    };
    FormViewCreateView: {
      name: string;
      type: components["schemas"]["ViewTypesEnum"];
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      /** @description The title that is displayed at the beginning of the form. */
      title?: string;
      /** @description The description that is displayed at the beginning of the form. */
      description?: string;
      /** @description Configurable mode of the form. */
      mode?: components["schemas"]["ModeEnum"];
      /** @description The cover image that must be displayed at the top of the form. */
      cover_image?: components["schemas"]["UserFile"] | null;
      /** @description The logo image that must be displayed at the top of the form. */
      logo_image?: components["schemas"]["UserFile"] | null;
      /** @description The text displayed on the submit button. */
      submit_text?: string;
      /** @description The action that must be performed after the visitor has filled out the form. */
      submit_action?: components["schemas"]["SubmitActionEnum"];
      /** @description If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form. */
      submit_action_message?: string;
      /**
       * Format: uri 
       * @description If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.
       */
      submit_action_redirect_url?: string;
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
    FormViewFieldOptions: {
      /** @description By default, the name of the related field will be shown to the visitor. Optionally another name can be used by setting this name. */
      name?: string;
      /** @description If provided, then this value be will be shown under the field name. */
      description?: string;
      /** @description Indicates whether the field is included in the form. */
      enabled?: boolean;
      /** @description Indicates whether the field is required for the visitor to fill out. */
      required?: boolean;
      /** @description Indicates whether this field is visible when the conditions are met. */
      show_when_matching_conditions?: boolean;
      /** @description Indicates whether all (AND) or any (OR) of the conditions should match before shown. */
      condition_type?: components["schemas"]["ConditionTypeEnum"];
      /** @description The order that the field has in the form. Lower value is first. */
      order?: number;
      conditions?: (components["schemas"]["FormViewFieldOptionsCondition"])[];
    };
    FormViewFieldOptionsCondition: {
      id: number;
      field: number;
      /** @description Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`). */
      type: string;
      /** @description The filter value that must be compared to the field's value. */
      value?: string;
    };
    FormViewSubmitted: {
      /** @description The action that must be performed after the visitor has filled out the form. */
      submit_action?: components["schemas"]["SubmitActionEnum"];
      /** @description If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form. */
      submit_action_message?: string;
      /**
       * Format: uri 
       * @description If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.
       */
      submit_action_redirect_url?: string;
      row_id: number;
    };
    FormViewView: {
      id: number;
      table_id: number;
      name: string;
      order: number;
      type: string;
      table: components["schemas"]["Table"];
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      filters?: (components["schemas"]["ViewFilter"])[];
      sortings?: (components["schemas"]["ViewSort"])[];
      decorations?: (components["schemas"]["ViewDecoration"])[];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      public_view_has_password: boolean;
      show_logo?: boolean;
      /** @description The title that is displayed at the beginning of the form. */
      title?: string;
      /** @description The description that is displayed at the beginning of the form. */
      description?: string;
      /** @description Configurable mode of the form. */
      mode?: components["schemas"]["ModeEnum"];
      /** @description The cover image that must be displayed at the top of the form. */
      cover_image?: components["schemas"]["UserFile"] | null;
      /** @description The logo image that must be displayed at the top of the form. */
      logo_image?: components["schemas"]["UserFile"] | null;
      /** @description The text displayed on the submit button. */
      submit_text?: string;
      /** @description The action that must be performed after the visitor has filled out the form. */
      submit_action?: components["schemas"]["SubmitActionEnum"];
      /** @description If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form. */
      submit_action_message?: string;
      /**
       * Format: uri 
       * @description If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.
       */
      submit_action_redirect_url?: string;
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
    FormulaFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
      error?: string | null;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean | null;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"] | components["schemas"]["NullEnum"];
      array_formula_type?: components["schemas"]["ArrayFormulaTypeEnum"] | components["schemas"]["NullEnum"];
      formula: string;
      formula_type?: components["schemas"]["FormulaTypeEnum"];
    };
    FormulaFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      error?: string | null;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean | null;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"] | components["schemas"]["NullEnum"];
      array_formula_type?: components["schemas"]["ArrayFormulaTypeEnum"] | components["schemas"]["NullEnum"];
      formula: string;
      formula_type?: components["schemas"]["FormulaTypeEnum"];
    };
    FormulaFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
      error?: string | null;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean | null;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"] | components["schemas"]["NullEnum"];
      array_formula_type?: components["schemas"]["ArrayFormulaTypeEnum"] | components["schemas"]["NullEnum"];
      formula: string;
      formula_type?: components["schemas"]["FormulaTypeEnum"];
    };
    FormulaFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
      error?: string | null;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean | null;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"] | components["schemas"]["NullEnum"];
      array_formula_type?: components["schemas"]["ArrayFormulaTypeEnum"] | components["schemas"]["NullEnum"];
      formula: string;
      formula_type?: components["schemas"]["FormulaTypeEnum"];
    };
    /** @enum {string} */
    FormulaTypeEnum: "invalid" | "text" | "char" | "link" | "date_interval" | "date" | "boolean" | "number" | "array" | "single_select";
    GalleryViewCreateView: {
      name: string;
      type: components["schemas"]["ViewTypesEnum"];
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      /** @description References a file field of which the first image must be shown as card cover image. */
      card_cover_image_field?: number | null;
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
    GalleryViewFieldOptions: {
      /** @description Whether or not the field should be hidden in the card. */
      hidden?: boolean;
      /** @description The order that the field has in the form. Lower value is first. */
      order?: number;
    };
    GalleryViewView: {
      id: number;
      table_id: number;
      name: string;
      order: number;
      type: string;
      table: components["schemas"]["Table"];
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      filters?: (components["schemas"]["ViewFilter"])[];
      sortings?: (components["schemas"]["ViewSort"])[];
      decorations?: (components["schemas"]["ViewDecoration"])[];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      public_view_has_password: boolean;
      show_logo?: boolean;
      /** @description References a file field of which the first image must be shown as card cover image. */
      card_cover_image_field?: number | null;
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
    GeneratedConditional_colorCreateViewDecoration: {
      /** @description The decorator type. This is then interpreted by the frontend to display the decoration. */
      type: components["schemas"]["TypeFc4Enum"];
      /**
       * @description The value provider type that gives the value to the decorator. 
       * @default
       */
      value_provider_type?: components["schemas"]["ValueProviderTypeEnum"] | components["schemas"]["BlankEnum"];
      /** @description The configuration of the value provider */
      value_provider_conf?: components["schemas"]["ConditionalColorValueProviderConfColors"];
      /** @description The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first. */
      order?: number;
    };
    GeneratedConditional_colorUpdateViewDecoration: {
      /** @description The decorator type. This is then interpreted by the frontend to display the decoration. */
      type?: components["schemas"]["TypeFc4Enum"];
      /** @description The value provider type that gives the value to the decorator. */
      value_provider_type?: components["schemas"]["ValueProviderTypeEnum"] | components["schemas"]["BlankEnum"];
      /** @description The configuration of the value provider */
      value_provider_conf?: components["schemas"]["ConditionalColorValueProviderConfColors"];
      /** @description The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first. */
      order?: number;
    };
    GeneratedConditional_colorViewDecoration: {
      id: number;
      /** @description The view to which the decoration applies. Each view can have his own decorations. */
      view?: number;
      /** @description The decorator type. This is then interpreted by the frontend to display the decoration. */
      type?: string;
      /** @description The value provider type that gives the value to the decorator. */
      value_provider_type?: string;
      /** @description The configuration of the value provider */
      value_provider_conf?: components["schemas"]["ConditionalColorValueProviderConfColors"];
      /** @description The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first. */
      order?: number;
    };
    GeneratedSingle_select_colorCreateViewDecoration: {
      /** @description The decorator type. This is then interpreted by the frontend to display the decoration. */
      type: components["schemas"]["TypeFc4Enum"];
      /**
       * @description The value provider type that gives the value to the decorator. 
       * @default
       */
      value_provider_type?: components["schemas"]["ValueProviderTypeEnum"] | components["schemas"]["BlankEnum"];
      /** @description The configuration of the value provider */
      value_provider_conf?: components["schemas"]["SelectColorValueProviderConf"];
      /** @description The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first. */
      order?: number;
    };
    GeneratedSingle_select_colorUpdateViewDecoration: {
      /** @description The decorator type. This is then interpreted by the frontend to display the decoration. */
      type?: components["schemas"]["TypeFc4Enum"];
      /** @description The value provider type that gives the value to the decorator. */
      value_provider_type?: components["schemas"]["ValueProviderTypeEnum"] | components["schemas"]["BlankEnum"];
      /** @description The configuration of the value provider */
      value_provider_conf?: components["schemas"]["SelectColorValueProviderConf"];
      /** @description The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first. */
      order?: number;
    };
    GeneratedSingle_select_colorViewDecoration: {
      id: number;
      /** @description The view to which the decoration applies. Each view can have his own decorations. */
      view?: number;
      /** @description The decorator type. This is then interpreted by the frontend to display the decoration. */
      type?: string;
      /** @description The value provider type that gives the value to the decorator. */
      value_provider_type?: string;
      /** @description The configuration of the value provider */
      value_provider_conf?: components["schemas"]["SelectColorValueProviderConf"];
      /** @description The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first. */
      order?: number;
    };
    GitHubAuthProviderModelAuthProvider: {
      id: number;
      /** @description The type of the related field. */
      type: string;
      domain?: string | null;
      enabled?: boolean;
      name: string;
      /** @description App ID, or consumer key */
      client_id: string;
      /** @description API secret, client secret, or consumer secret */
      secret: string;
    };
    GitLabAuthProviderModelAuthProvider: {
      id: number;
      /** @description The type of the related field. */
      type: string;
      domain?: string | null;
      enabled?: boolean;
      name: string;
      /**
       * Format: uri 
       * @description Base URL of the authorization server
       */
      base_url: string;
      /** @description App ID, or consumer key */
      client_id: string;
      /** @description API secret, client secret, or consumer secret */
      secret: string;
    };
    GoogleAuthProviderModelAuthProvider: {
      id: number;
      /** @description The type of the related field. */
      type: string;
      domain?: string | null;
      enabled?: boolean;
      name: string;
      /** @description App ID, or consumer key */
      client_id: string;
      /** @description API secret, client secret, or consumer secret */
      secret: string;
    };
    GridViewCreateView: {
      name: string;
      type: components["schemas"]["ViewTypesEnum"];
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      row_identifier_type?: components["schemas"]["RowIdentifierTypeEnum"];
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
    GridViewFieldOptions: {
      /** @description The width of the table field in the related view. */
      width?: number;
      /** @description Whether or not the field should be hidden in the current view. */
      hidden?: boolean;
      /** @description The position that the field has within the view, lowest first. If there is another field with the same order value then the field with the lowest id must be shown first. */
      order?: number;
      /** @description Indicates how the field value is aggregated. This value is different from the `aggregation_raw_type`. The `aggregation_raw_type` is the value extracted from the database, while the `aggregation_type` can implies further calculations. For example: if you want to compute an average, `sum` is going to be the `aggregation_raw_type`, the value extracted from database, and `sum / row_count` will be the aggregation result displayed to the user. This aggregation_type should be used by the client to compute the final value. */
      aggregation_type?: string;
      /** @description Indicates how to compute the raw aggregation value from database. This type must be registered in the backend prior to use it. */
      aggregation_raw_type?: components["schemas"]["AggregationRawTypeEnum"] | components["schemas"]["BlankEnum"];
    };
    GridViewFilter: {
      /** @description Only the fields related to the provided ids are added to the response. If None are provided all fields will be returned. */
      field_ids?: (number)[];
      /** @description Only rows related to the provided ids are added to the response. */
      row_ids: (number)[];
    };
    GridViewView: {
      id: number;
      table_id: number;
      name: string;
      order: number;
      type: string;
      table: components["schemas"]["Table"];
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      filters?: (components["schemas"]["ViewFilter"])[];
      sortings?: (components["schemas"]["ViewSort"])[];
      decorations?: (components["schemas"]["ViewDecoration"])[];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      public_view_has_password: boolean;
      show_logo?: boolean;
      row_identifier_type?: components["schemas"]["RowIdentifierTypeEnum"];
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
    Group: {
      id: number;
      name: string;
    };
    GroupAdminUsers: {
      id: number;
      email: string;
      /** @description The permissions that the user has within the group. */
      permissions?: string;
    };
    GroupInvitation: {
      id: number;
      /** @description The group that the user will get access to once the invitation is accepted. */
      group: number;
      /**
       * Format: email 
       * @description The email address of the user that the invitation is meant for. Only a user with that email address can accept it.
       */
      email: string;
      /** @description The permissions that the user is going to get within the group after accepting the invitation. */
      permissions?: string;
      /** @description An optional message that the invitor can provide. This will be visible to the receiver of the invitation. */
      message?: string;
      /** Format: date-time */
      created_on: string;
    };
    GroupUser: {
      id: number;
      /** @description User defined name. */
      name: string;
      /** @description User email. */
      email: string;
      /** @description The group that the user has access to. */
      group: number;
      /** @description The permissions that the user has within the group. */
      permissions?: string;
      /** Format: date-time */
      created_on: string;
      /** @description The user that has access to the group. */
      user_id: number;
      /** @description True if user account is pending deletion. */
      to_be_deleted: boolean;
    };
    /** @description A serializer for the `GroupUserSerializer.teams` field. */
    GroupUserEnterpriseTeam: {
      /** @description The unique identifier for this team. */
      id: number;
      /** @description The team name that this group user belongs to. */
      name: string;
    };
    /**
     * @description This serializers includes relevant fields of the Group model, but also
     * some GroupUser specific fields related to the group user relation.
     * 
     * Additionally, the list of users are included for each group.
     */
    GroupUserGroup: {
      /** @description Group id. */
      id: number;
      /** @description Group name. */
      name: string;
      /** @description List of all group users. */
      users: readonly (components["schemas"]["GroupUser"])[];
      /** @description The requesting user's order within the group users. */
      order: number;
      /** @description The requesting user's permissions for the group. */
      permissions: string;
    };
    GroupsAdminResponse: {
      id: number;
      name: string;
      users: (components["schemas"]["GroupAdminUsers"])[];
      application_count: number;
      /** Format: date-time */
      created_on: string;
    };
    InstallTemplateJobCreateJob: {
      /** @description The type of the job. */
      type: components["schemas"]["Type4afEnum"];
      /** @description The ID of the group where the template will be installed. */
      group_id: number;
      /** @description The template ID that will be installed. */
      template_id: number;
    };
    InstallTemplateJobJob: {
      id: number;
      /** @description The type of the job. */
      type: string;
      /** @description A percentage indicating how far along the job is. 100 means that it's finished. */
      progress_percentage: number;
      /** @description Indicates the state of the import job. */
      state: string;
      /** @description A human readable error message indicating what went wrong. */
      human_readable_error?: string;
      group: components["schemas"]["Group"];
      template: components["schemas"]["Template"];
      installed_applications: {
        [key: string]: unknown | undefined;
      };
    };
    InstanceId: {
      instance_id: string;
    };
    Job: {
      id: number;
      /** @description The type of the job. */
      type: string;
      /** @description A percentage indicating how far along the job is. 100 means that it's finished. */
      progress_percentage: number;
      /** @description Indicates the state of the import job. */
      state: string;
      /** @description A human readable error message indicating what went wrong. */
      human_readable_error?: string;
    };
    Job_TypeCreateJob: components["schemas"]["DuplicateApplicationJobCreateJob"] | components["schemas"]["InstallTemplateJobCreateJob"] | components["schemas"]["CreateSnapshotJobCreateJob"] | components["schemas"]["RestoreSnapshotJobCreateJob"] | components["schemas"]["AirtableImportJobCreateJob"] | components["schemas"]["FileImportJobCreateJob"] | components["schemas"]["DuplicateTableJobCreateJob"] | components["schemas"]["DuplicateFieldJobCreateJob"] | components["schemas"]["AuditLogExportJobCreateJob"];
    Job_TypeJob: components["schemas"]["DuplicateApplicationJobJob"] | components["schemas"]["InstallTemplateJobJob"] | components["schemas"]["CreateSnapshotJobJob"] | components["schemas"]["RestoreSnapshotJobJob"] | components["schemas"]["AirtableImportJobJob"] | components["schemas"]["FileImportJobJob"] | components["schemas"]["DuplicateTableJobJob"] | components["schemas"]["DuplicateFieldJobJob"] | components["schemas"]["AuditLogExportJobJob"];
    KanbanViewCreateView: {
      name: string;
      type: components["schemas"]["ViewTypesEnum"];
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      single_select_field?: number | null;
      /** @description References a file field of which the first image must be shown as card cover image. */
      card_cover_image_field?: number | null;
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
    KanbanViewExampleResponse: {
      /** @description Every select option related to the view's single select field can have its own entry like this. */
      OPTION_ID: components["schemas"]["KanbanViewExampleResponseStack"];
      field_options: (components["schemas"]["KanbanViewFieldOptions"])[];
    };
    KanbanViewExampleResponseStack: {
      /** @description The total count of rows that are included in this group. */
      count: number;
      /** @description All the rows that belong in this group related with the provided `limit` and `offset`. */
      results: (components["schemas"]["ExampleRowResponse"])[];
    };
    KanbanViewFieldOptions: {
      /** @description Whether or not the field should be hidden in the card. */
      hidden?: boolean;
      /** @description The order that the field has in the form. Lower value is first. */
      order?: number;
    };
    KanbanViewView: {
      id: number;
      table_id: number;
      name: string;
      order: number;
      type: string;
      table: components["schemas"]["Table"];
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      filters?: (components["schemas"]["ViewFilter"])[];
      sortings?: (components["schemas"]["ViewSort"])[];
      decorations?: (components["schemas"]["ViewDecoration"])[];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      public_view_has_password: boolean;
      show_logo?: boolean;
      single_select_field?: number | null;
      /** @description References a file field of which the first image must be shown as card cover image. */
      card_cover_image_field?: number | null;
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
    LastModifiedFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
      timezone: components["schemas"]["TimezoneEnum"];
    };
    LastModifiedFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
      timezone: components["schemas"]["TimezoneEnum"];
    };
    LastModifiedFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
      timezone: components["schemas"]["TimezoneEnum"];
    };
    LastModifiedFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"];
      timezone: components["schemas"]["TimezoneEnum"];
    };
    License: {
      id: number;
      /** @description Unique identifier of the license. */
      license_id: string;
      /** @description Indicates if the backend deems the license valid. */
      is_active: boolean;
      /** Format: date-time */
      last_check?: string | null;
      /**
       * Format: date-time 
       * @description From which timestamp the license becomes active.
       */
      valid_from: string;
      /**
       * Format: date-time 
       * @description Until which timestamp the license is active.
       */
      valid_through: string;
      /** @description The amount of free users that are currently using the license. */
      free_users_count: number;
      /** @description The amount of users that are currently using the license. */
      seats_taken: number;
      /** @description The maximum amount of users that can use the license. */
      seats: number;
      /** @description The product code that indicates what the license unlocks. */
      product_code: string;
      /**
       * Format: date-time 
       * @description The date when the license was issued. It could be that a new license is issued with the same `license_id` because it was updated. In that case, the one that has been issued last should be used.
       */
      issued_on: string;
      /**
       * Format: email 
       * @description Indicates to which email address the license has been issued.
       */
      issued_to_email: string;
      /** @description Indicates to whom the license has been issued. */
      issued_to_name: string;
    };
    LicenseUser: {
      id: number;
      first_name?: string;
      /**
       * Email address 
       * Format: email
       */
      email?: string;
    };
    LicenseUserLookup: {
      id: number;
      /** @description The name and the email address of the user. */
      value: string;
    };
    LicenseWithUsers: {
      id: number;
      /** @description Unique identifier of the license. */
      license_id: string;
      /** @description Indicates if the backend deems the license valid. */
      is_active: boolean;
      /** Format: date-time */
      last_check?: string | null;
      /**
       * Format: date-time 
       * @description From which timestamp the license becomes active.
       */
      valid_from: string;
      /**
       * Format: date-time 
       * @description Until which timestamp the license is active.
       */
      valid_through: string;
      /** @description The amount of free users that are currently using the license. */
      free_users_count: number;
      /** @description The amount of users that are currently using the license. */
      seats_taken: number;
      /** @description The maximum amount of users that can use the license. */
      seats: number;
      /** @description The product code that indicates what the license unlocks. */
      product_code: string;
      /**
       * Format: date-time 
       * @description The date when the license was issued. It could be that a new license is issued with the same `license_id` because it was updated. In that case, the one that has been issued last should be used.
       */
      issued_on: string;
      /**
       * Format: email 
       * @description Indicates to which email address the license has been issued.
       */
      issued_to_email: string;
      /** @description Indicates to whom the license has been issued. */
      issued_to_name: string;
      users: readonly (components["schemas"]["LicenseUser"])[];
    };
    LinkRowFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
      /** @description The id of the linked table. */
      link_row_table_id?: number | null;
      /** @description The id of the related field. */
      link_row_related_field_id: number | null;
      /** @description (Deprecated) The id of the linked table. */
      link_row_table?: number | null;
      /** @description (Deprecated) The id of the related field. */
      link_row_related_field: number;
    };
    LinkRowFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description The id of the linked table. */
      link_row_table_id?: number | null;
      /** @description The id of the related field. */
      link_row_related_field_id: number | null;
      /** @description (Deprecated) The id of the linked table. */
      link_row_table?: number | null;
      /** @description (Deprecated) The id of the related field. */
      link_row_related_field: number;
    };
    LinkRowFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
      /** @description The id of the linked table. */
      link_row_table_id?: number | null;
      /** @description The id of the related field. */
      link_row_related_field_id: number | null;
      /** @description (Deprecated) The id of the linked table. */
      link_row_table?: number | null;
      /** @description (Deprecated) The id of the related field. */
      link_row_related_field: number;
    };
    LinkRowFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
      /** @description The id of the linked table. */
      link_row_table_id?: number | null;
      /** @description (Deprecated) The id of the linked table. */
      link_row_table?: number | null;
      has_related_field?: boolean;
    };
    LinkRowValue: {
      /** @description The unique identifier of the row in the related table. */
      id: number;
      /** @description The primary field's value as a string of the row in the related table. */
      value?: string;
    };
    /**
     * @description Mixin to a DRF serializer class to raise an exception if data with unknown fields
     * is provided to the serializer.
     */
    ListGroupUsersWithMemberData: {
      id: number;
      /** @description User defined name. */
      name: string;
      /** @description User email. */
      email: string;
      /** @description The group that the user has access to. */
      group: number;
      /** @description The permissions that the user has within the group. */
      permissions?: string;
      /** Format: date-time */
      created_on: string;
      /** @description The user that has access to the group. */
      user_id: number;
      /** @description True if user account is pending deletion. */
      to_be_deleted: boolean;
      /** @description Enterprise only: a list of team IDs and names, which this group user belongs to in this group. */
      teams?: (components["schemas"]["GroupUserEnterpriseTeam"])[];
      /** @description Enterprise only: the uid of the role that is assigned to this group user in this group. */
      role?: string | null;
    };
    LongTextFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
    };
    LongTextFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
    };
    LongTextFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
    };
    LongTextFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
    };
    LookupFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
      error?: string | null;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean | null;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"] | components["schemas"]["NullEnum"];
      array_formula_type?: components["schemas"]["ArrayFormulaTypeEnum"] | components["schemas"]["NullEnum"];
      /** @description The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required. */
      through_field_id?: number | null;
      /** @description The name of the link row field to lookup values for. */
      through_field_name?: string | null;
      /** @description The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required. */
      target_field_id?: number | null;
      /** @description The name of the field in the table linked to by the through_field to lookup. */
      target_field_name?: string | null;
      formula_type?: components["schemas"]["FormulaTypeEnum"];
    };
    LookupFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      error?: string | null;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean | null;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"] | components["schemas"]["NullEnum"];
      array_formula_type?: components["schemas"]["ArrayFormulaTypeEnum"] | components["schemas"]["NullEnum"];
      /** @description The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required. */
      through_field_id?: number | null;
      /** @description The name of the link row field to lookup values for. */
      through_field_name?: string | null;
      /** @description The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required. */
      target_field_id?: number | null;
      /** @description The name of the field in the table linked to by the through_field to lookup. */
      target_field_name?: string | null;
      formula_type?: components["schemas"]["FormulaTypeEnum"];
    };
    LookupFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
      error?: string | null;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean | null;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"] | components["schemas"]["NullEnum"];
      array_formula_type?: components["schemas"]["ArrayFormulaTypeEnum"] | components["schemas"]["NullEnum"];
      /** @description The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required. */
      through_field_id?: number | null;
      /** @description The name of the link row field to lookup values for. */
      through_field_name?: string | null;
      /** @description The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required. */
      target_field_id?: number | null;
      /** @description The name of the field in the table linked to by the through_field to lookup. */
      target_field_name?: string | null;
      formula_type?: components["schemas"]["FormulaTypeEnum"];
    };
    LookupFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
      error?: string | null;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean | null;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"] | components["schemas"]["NullEnum"];
      array_formula_type?: components["schemas"]["ArrayFormulaTypeEnum"] | components["schemas"]["NullEnum"];
      /** @description The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required. */
      through_field_id?: number | null;
      /** @description The name of the link row field to lookup values for. */
      through_field_name?: string | null;
      /** @description The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required. */
      target_field_id?: number | null;
      /** @description The name of the field in the table linked to by the through_field to lookup. */
      target_field_name?: string | null;
      formula_type?: components["schemas"]["FormulaTypeEnum"];
    };
    /** @enum {string} */
    ModeEnum: "form" | "survey";
    MultipleCollaboratorsFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
    };
    MultipleCollaboratorsFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
    };
    MultipleCollaboratorsFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
    };
    MultipleCollaboratorsFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
    };
    MultipleSelectFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
      select_options?: (components["schemas"]["SelectOption"])[];
    };
    MultipleSelectFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      select_options?: (components["schemas"]["SelectOption"])[];
    };
    MultipleSelectFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
      select_options?: (components["schemas"]["SelectOption"])[];
    };
    MultipleSelectFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
      select_options?: (components["schemas"]["SelectOption"])[];
    };
    /** @enum {unknown} */
    NullEnum: "";
    /** @enum {integer} */
    NumberDecimalPlacesEnum: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
    NumberFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"];
      /** @description Indicates if negative values are allowed. */
      number_negative?: boolean;
    };
    NumberFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"];
      /** @description Indicates if negative values are allowed. */
      number_negative?: boolean;
    };
    NumberFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"];
      /** @description Indicates if negative values are allowed. */
      number_negative?: boolean;
    };
    NumberFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"];
      /** @description Indicates if negative values are allowed. */
      number_negative?: boolean;
    };
    /** @description Serializer for RoleAssignment used for the Open API spec */
    OpenApiRoleAssignment: {
      id: number;
      /** @description The uid of the role assigned to the user or team in the given group. */
      role: string;
      /** @description The structure of the subject field depends on the subject typereturned and will have additional fields accordingly */
      subject: components["schemas"]["OpenApiSubjectField"];
      /** @description The subject ID. */
      subject_id: number;
      /** @description The unique scope ID. */
      scope_id: number;
      /** @description The subject type. */
      subject_type: components["schemas"]["SubjectType850Enum"];
      /** @description The type of the scope object. The scope object limit the role assignment to this scope and all its descendants. */
      scope_type: components["schemas"]["ScopeTypeEnum"];
    };
    OpenApiSubjectField: {
      id: number;
    };
    OpenIdConnectAuthProviderModelAuthProvider: {
      id: number;
      /** @description The type of the related field. */
      type: string;
      domain?: string | null;
      enabled?: boolean;
      name: string;
      /**
       * Format: uri 
       * @description Base URL of the authorization server
       */
      base_url: string;
      /** @description App ID, or consumer key */
      client_id: string;
      /** @description API secret, client secret, or consumer secret */
      secret: string;
    };
    OrderApplications: {
      /** @description Application ids in the desired order. */
      application_ids: (number)[];
    };
    /** @enum {string} */
    OrderEnum: "ASC" | "DESC";
    OrderGroups: {
      /** @description Group ids in the desired order. */
      groups: (number)[];
    };
    OrderTables: {
      /** @description Table ids in the desired order. */
      table_ids: (number)[];
    };
    OrderViews: {
      /** @description View ids in the desired order. */
      view_ids: (number)[];
    };
    PaginationSerializerExampleRowResponseSerializerWithUserFieldNames: {
      /** @description The total amount of results. */
      count: number;
      /**
       * Format: uri 
       * @description URL to the next page.
       */
      next: string | null;
      /**
       * Format: uri 
       * @description URL to the previous page.
       */
      previous: string | null;
      results: (components["schemas"]["ExampleRowResponseSerializerWithUserFieldNames"])[];
    };
    PaginationSerializerLicenseUserLookup: {
      /** @description The total amount of results. */
      count: number;
      /**
       * Format: uri 
       * @description URL to the next page.
       */
      next: string | null;
      /**
       * Format: uri 
       * @description URL to the previous page.
       */
      previous: string | null;
      results: (components["schemas"]["LicenseUserLookup"])[];
    };
    PaginationSerializerLinkRowValue: {
      /** @description The total amount of results. */
      count: number;
      /**
       * Format: uri 
       * @description URL to the next page.
       */
      next: string | null;
      /**
       * Format: uri 
       * @description URL to the previous page.
       */
      previous: string | null;
      results: (components["schemas"]["LinkRowValue"])[];
    };
    PaginationSerializerRowComment: {
      /** @description The total amount of results. */
      count: number;
      /**
       * Format: uri 
       * @description URL to the next page.
       */
      next: string | null;
      /**
       * Format: uri 
       * @description URL to the previous page.
       */
      previous: string | null;
      results: (components["schemas"]["RowComment"])[];
    };
    PaginationSerializerTrashContents: {
      /** @description The total amount of results. */
      count: number;
      /**
       * Format: uri 
       * @description URL to the next page.
       */
      next: string | null;
      /**
       * Format: uri 
       * @description URL to the previous page.
       */
      previous: string | null;
      results: (components["schemas"]["TrashContents"])[];
    };
    PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse: {
      /** @description An object containing the field id as key and the properties related to view as value. */
      field_options?: {
        [key: string]: components["schemas"]["GalleryViewFieldOptions"] | undefined;
      };
      /** @description The total amount of results. */
      count: number;
      /**
       * Format: uri 
       * @description URL to the next page.
       */
      next: string | null;
      /**
       * Format: uri 
       * @description URL to the previous page.
       */
      previous: string | null;
      results: (components["schemas"]["ExampleRowResponse"])[];
    };
    PaginationSerializerWithGridViewFieldOptionsExampleRowResponse: {
      /** @description An object containing the field id as key and the properties related to view as value. */
      field_options?: {
        [key: string]: components["schemas"]["GridViewFieldOptions"] | undefined;
      };
      /** @description An object keyed by row id with a value being an object containing additional metadata about that row. A row might not have metadata and will not be present as a key if so. */
      row_metadata?: {
        [key: string]: components["schemas"]["RowMetadata"] | undefined;
      };
      /** @description The total amount of results. */
      count: number;
      /**
       * Format: uri 
       * @description URL to the next page.
       */
      next: string | null;
      /**
       * Format: uri 
       * @description URL to the previous page.
       */
      previous: string | null;
      results: (components["schemas"]["ExampleRowResponse"])[];
    };
    PasswordAuthProviderModelAuthProvider: {
      id: number;
      /** @description The type of the related field. */
      type: string;
      /** @description The email domain (if any) registered with this password provider. */
      domain?: string;
      /** @description Whether the provider is enabled or not. */
      enabled?: boolean;
    };
    /** @description This serializer must be kept in sync with `UserSerializer`. */
    PatchedAccount: {
      first_name?: string;
      /** @description An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB. */
      language?: string;
    };
    PatchedApplicationUpdate: {
      name?: string;
    };
    PatchedDecorator_Value_Provider_TypeUpdateViewDecoration: components["schemas"]["GeneratedSingle_select_colorUpdateViewDecoration"] | components["schemas"]["GeneratedConditional_colorUpdateViewDecoration"];
    PatchedExampleBatchUpdateRowsRequest: {
      items?: (components["schemas"]["ExampleBatchUpdateRowRequestSerializerWithUserFieldNames"])[];
    };
    PatchedExampleUpdateRowRequestSerializerWithUserFieldNames: {
      /** @description This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_1?: string | null;
      /** @description This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_2?: string | null;
      /** @description This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_3?: string | null;
      /** @description This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_4?: string | null;
      /**
       * Format: decimal 
       * @description This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
       */
      field_5?: string | null;
      /**
       * @description This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. 
       * @default 0
       */
      field_6?: number;
      /**
       * @description This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. 
       * @default false
       */
      field_7?: boolean;
      /**
       * Format: date 
       * @description This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.
       */
      field_8?: string | null;
      /** @description This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes. */
      field_11?: (number)[];
      /** @description This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files. */
      field_12?: (components["schemas"]["FileFieldRequest"])[] | null;
      /** @description This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed. */
      field_13?: number | null;
      field_14?: (number | null)[];
      /** @description This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field. */
      field_15?: string | null;
      field_18?: (components["schemas"]["Collaborator"])[];
    };
    PatchedFieldUpdateField: components["schemas"]["TextFieldUpdateField"] | components["schemas"]["LongTextFieldUpdateField"] | components["schemas"]["URLFieldUpdateField"] | components["schemas"]["EmailFieldUpdateField"] | components["schemas"]["NumberFieldUpdateField"] | components["schemas"]["RatingFieldUpdateField"] | components["schemas"]["BooleanFieldUpdateField"] | components["schemas"]["DateFieldUpdateField"] | components["schemas"]["LastModifiedFieldUpdateField"] | components["schemas"]["CreatedOnFieldUpdateField"] | components["schemas"]["LinkRowFieldUpdateField"] | components["schemas"]["FileFieldUpdateField"] | components["schemas"]["SingleSelectFieldUpdateField"] | components["schemas"]["MultipleSelectFieldUpdateField"] | components["schemas"]["PhoneNumberFieldUpdateField"] | components["schemas"]["FormulaFieldUpdateField"] | components["schemas"]["LookupFieldUpdateField"] | components["schemas"]["MultipleCollaboratorsFieldUpdateField"];
    PatchedGroup: {
      id?: number;
      name?: string;
    };
    PatchedSettings: {
      /** @description Indicates whether new users can create a new account when signing up. */
      allow_new_signups?: boolean;
      /** @description Indicates whether invited users can create an account when signing up, even if allow_new_signups is disabled. */
      allow_signups_via_group_invitations?: boolean;
      /** @description Indicates whether users can request a password reset link. */
      allow_reset_password?: boolean;
      /** @description Indicates whether all users can create groups, or just staff. */
      allow_global_group_creation?: boolean;
      /** @description Number of days after the last login for an account pending deletion to be deleted */
      account_deletion_grace_delay?: number;
      /** @description Indicates that there are no admin users in the database yet, so in the frontend the signup form will be shown instead of the login page. */
      show_admin_signup_page?: boolean;
    };
    PatchedTableUpdate: {
      name?: string;
    };
    PatchedTableWebhookUpdateRequest: {
      /**
       * Format: uri 
       * @description The URL that must be called when the webhook is triggered.
       */
      url?: string;
      /** @description Indicates whether this webhook should listen to all events. */
      include_all_events?: boolean;
      /** @description A list containing the events that will trigger this webhook. */
      events?: (components["schemas"]["EventTypesEnum"])[];
      /** @description The request method that be used when the event occurs. */
      request_method?: components["schemas"]["RequestMethodEnum"];
      /** @description The additional headers as an object where the key is the name and the value the value. */
      headers?: {
        [key: string]: unknown | undefined;
      };
      /** @description An internal name of the webhook. */
      name?: string;
      /** @description Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated. */
      active?: boolean;
      /** @description Indicates whether the field names must be used as payload key instead of the id. */
      use_user_field_names?: boolean;
    };
    PatchedTokenUpdate: {
      /** @description The human readable name of the database token for the user. */
      name?: string;
      /**
       * @description Indicates per operation which permissions the database token has within the whole group. If the value of for example `create` is `true`, then the token can create rows in all tables related to the group. If a list is provided with for example `[["table", 1]]` then the token only has create permissions for the table with id 1. Same goes for if a database references is provided. `[["database", 1]]` means create permissions for all tables in the database with id 1.
       * 
       * Example:
       * ```json
       * {
       *   "create": true// Allows creating rows in all tables.
       *   // Allows reading rows from database 1 and table 10.
       *   "read": [["database", 1], ["table", 10]],
       *   "update": false  // Denies updating rows in all tables.
       *   "delete": []  // Denies deleting rows in all tables.
       *  }
       * ```
       */
      permissions?: {
        create?: boolean | (((string | number)[])[]);
        read?: boolean | (((string | number)[])[]);
        update?: boolean | (((string | number)[])[]);
        delete?: boolean | (((string | number)[])[]);
      };
      /**
       * @description Indicates if a new key must be generated. 
       * @default false
       */
      rotate_key?: boolean;
    };
    /**
     * @description Mixin to a DRF serializer class to raise an exception if data with unknown fields
     * is provided to the serializer.
     */
    PatchedTrashEntryRequest: {
      trash_item_id?: number;
      parent_trash_item_id?: number | null;
      trash_item_type?: components["schemas"]["TrashItemTypeEnum"];
    };
    PatchedUndoRedoRequest: {
      /** @description A JSON object with keys and values representing the various action scopes to include when undoing or redoing. Every action in Baserow will be associated with a action scope, when undoing/redoing only actions which match any of the provided scope key:value pairs will included when this endpoint picks the next action to undo/redo. If no scopes are provided then all actions performed in the client session will be included when undoing/redoing. */
      scopes?: components["schemas"]["ActionScopes"];
    };
    PatchedUpdateGroupInvitation: {
      /** @description The permissions that the user is going to get within the group after accepting the invitation. */
      permissions?: string;
    };
    PatchedUpdateGroupUser: {
      /** @description The permissions that the user has within the group. */
      permissions?: string;
    };
    PatchedUpdatePremiumViewAttributes: {
      show_logo?: boolean;
    };
    PatchedUpdateViewFilter: {
      /** @description The field of which the value must be compared to the filter value. */
      field?: number;
      /** @description Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`). */
      type?: components["schemas"]["TypeC84Enum"];
      /** @description The filter value that must be compared to the field's value. */
      value?: string;
    };
    PatchedUpdateViewSort: {
      /** @description The field that must be sorted on. */
      field?: number;
      /** @description Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A. */
      order?: components["schemas"]["OrderEnum"];
    };
    /**
     * @description Serializes a request body for updating a given user. Do not use for returning user
     * data as the password will be returned also.
     */
    PatchedUserAdminUpdate: {
      /** Format: email */
      username?: string;
      name?: string;
      /**
       * Active 
       * @description Designates whether this user should be treated as active. Set this to false instead of deleting accounts.
       */
      is_active?: boolean;
      /**
       * Staff status 
       * @description Designates whether this user is an admin and has access to all groups and Baserow's admin areas.
       */
      is_staff?: boolean;
      password?: string;
    };
    PatchedViewFieldOptions: components["schemas"]["grid_view_field_options"] | components["schemas"]["gallery_view_field_options"] | components["schemas"]["form_view_field_options"] | components["schemas"]["kanban_view_field_options"];
    PatchedViewUpdateView: components["schemas"]["grid_view_update"] | components["schemas"]["gallery_view_update"] | components["schemas"]["form_view_update"] | components["schemas"]["kanban_view_update"];
    PermissionObject: {
      /** @description The permission manager name. */
      name: string;
      /** @description The content of the permission object for this permission manager. */
      permissions: {
        [key: string]: unknown | undefined;
      };
    };
    PhoneNumberFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
    };
    PhoneNumberFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
    };
    PhoneNumberFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
    };
    PhoneNumberFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
    };
    PublicField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
    };
    PublicFormView: {
      /** @description The title that is displayed at the beginning of the form. */
      title?: string;
      /** @description The description that is displayed at the beginning of the form. */
      description?: string;
      /** @description Configurable mode of the form. */
      mode?: components["schemas"]["ModeEnum"];
      /** @description The user file cover image that is displayed at the top of the form. */
      cover_image?: components["schemas"]["UserFile"] | null;
      /** @description The user file logo image that is displayed at the top of the form. */
      logo_image?: components["schemas"]["UserFile"] | null;
      /** @description The text displayed on the submit button. */
      submit_text?: string;
      fields: (components["schemas"]["PublicFormViewFieldOptions"])[];
      show_logo?: boolean;
    };
    PublicFormViewField: {
      id: number;
      /** @description The type of the related field. */
      type: string;
    };
    PublicFormViewFieldOptions: {
      /** @description If provided, then this value will be visible above the field input. */
      name: string;
      /** @description If provided, then this value be will be shown under the field name. */
      description?: string;
      /** @description Indicates whether the field is required for the visitor to fill out. */
      required?: boolean;
      /** @description The order that the field has in the form. Lower value is first. */
      order?: number;
      /** @description The properties of the related field. These can be used to construct the correct input. Additional properties could be added depending on the field type. */
      field: components["schemas"]["PublicFormViewField"];
      /** @description Indicates whether this field is visible when the conditions are met. */
      show_when_matching_conditions?: boolean;
      /** @description Indicates whether all (AND) or any (OR) of the conditions should match before shown. */
      condition_type?: components["schemas"]["ConditionTypeEnum"];
      conditions?: (components["schemas"]["FormViewFieldOptionsCondition"])[];
    };
    PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse: {
      /** @description An object containing the field id as key and the properties related to view as value. */
      field_options?: {
        [key: string]: components["schemas"]["GalleryViewFieldOptions"] | undefined;
      };
      /** @description The total amount of results. */
      count: number;
      /**
       * Format: uri 
       * @description URL to the next page.
       */
      next: string | null;
      /**
       * Format: uri 
       * @description URL to the previous page.
       */
      previous: string | null;
      results: (components["schemas"]["ExampleRowResponse"])[];
    };
    PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse: {
      /** @description An object containing the field id as key and the properties related to view as value. */
      field_options?: {
        [key: string]: components["schemas"]["GridViewFieldOptions"] | undefined;
      };
      /** @description The total amount of results. */
      count: number;
      /**
       * Format: uri 
       * @description URL to the next page.
       */
      next: string | null;
      /**
       * Format: uri 
       * @description URL to the previous page.
       */
      previous: string | null;
      results: (components["schemas"]["ExampleRowResponse"])[];
    };
    PublicView: {
      id: string;
      table: components["schemas"]["PublicViewTable"];
      name: string;
      order: number;
      type: string;
      sortings: readonly (components["schemas"]["PublicViewSort"])[];
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug where the view can be accessed publicly on. */
      slug: string;
      show_logo?: boolean;
    };
    PublicViewAuthRequest: {
      password: string;
    };
    PublicViewAuthResponse: {
      access_token: string;
    };
    PublicViewInfo: {
      fields: readonly (components["schemas"]["PublicField"])[];
      view: components["schemas"]["PublicView"];
    };
    PublicViewSort: {
      id: number;
      view: string;
      /** @description The field that must be sorted on. */
      field: number;
      /** @description Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A. */
      order?: components["schemas"]["OrderEnum"];
    };
    PublicViewTable: {
      id: number;
      database_id: number;
    };
    RatingFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
      /** @description Maximum value the rating can take. */
      max_value?: number;
      /** @description Color of the symbols. */
      color?: string;
      /** @description Rating style. Allowed values: star, heart, thumbs-up, flag, smile. */
      style?: components["schemas"]["StyleEnum"];
    };
    RatingFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description Maximum value the rating can take. */
      max_value?: number;
      /** @description Color of the symbols. */
      color?: string;
      /** @description Rating style. Allowed values: star, heart, thumbs-up, flag, smile. */
      style?: components["schemas"]["StyleEnum"];
    };
    RatingFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
      /** @description Maximum value the rating can take. */
      max_value?: number;
      /** @description Color of the symbols. */
      color?: string;
      /** @description Rating style. Allowed values: star, heart, thumbs-up, flag, smile. */
      style?: components["schemas"]["StyleEnum"];
    };
    RatingFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
      /** @description Maximum value the rating can take. */
      max_value?: number;
      /** @description Color of the symbols. */
      color?: string;
      /** @description Rating style. Allowed values: star, heart, thumbs-up, flag, smile. */
      style?: components["schemas"]["StyleEnum"];
    };
    Register: {
      name: string;
      /**
       * Format: email 
       * @description The email address is also going to be the username.
       */
      email: string;
      password: string;
      /**
       * @description An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB. 
       * @default en
       */
      language?: string;
      /**
       * @description Indicates whether an authentication JWT should be generated and be included in the response. 
       * @default false
       */
      authenticate?: boolean;
      /** @description If provided and valid, the user accepts the group invitation and will have access to the group after signing up. */
      group_invitation_token?: string;
      /** @description The id of the template that must be installed after creating the account. This only works if the `group_invitation_token` param is not provided. */
      template_id?: number;
    };
    RegisterLicense: {
      /** @description The license that you want to register. */
      license: string;
    };
    RelatedFields: {
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
    };
    Report: {
      /** @description An object containing field in error by rows. The keys are the row indexes from original file and values are objects of errors by fields. */
      failing_rows: {
        [key: string]: ({
          [key: string]: (string)[] | undefined;
        }) | undefined;
      };
    };
    /** @enum {string} */
    RequestMethodEnum: "POST" | "GET" | "PUT" | "PATCH" | "DELETE";
    ResetPasswordBodyValidation: {
      token: string;
      password: string;
    };
    RestoreSnapshotJobCreateJob: {
      /** @description The type of the job. */
      type: components["schemas"]["Type4afEnum"];
    };
    RestoreSnapshotJobJob: {
      id: number;
      /** @description The type of the job. */
      type: string;
      /** @description A percentage indicating how far along the job is. 100 means that it's finished. */
      progress_percentage: number;
      /** @description Indicates the state of the import job. */
      state: string;
      /** @description A human readable error message indicating what went wrong. */
      human_readable_error?: string;
    };
    RowComment: {
      id: number;
      /** @description The table the row this comment is for is found in. */
      table_id: number;
      /** @description The id of the row the comment is for. */
      row_id: number;
      /** @description The users comment. */
      comment: string;
      first_name?: string;
      /** Format: date-time */
      created_on: string;
      /** Format: date-time */
      updated_on: string;
      /** @description The user who made the comment. */
      user_id: number | null;
    };
    RowCommentCreate: {
      comment: string;
    };
    /** @enum {string} */
    RowIdentifierTypeEnum: "id" | "count";
    RowMetadata: {
      /** @description How many row comments exist for this row. */
      row_comment_count?: number;
    };
    SAMLResponse: {
      /** @description The encoded SAML response from the IdP. */
      SAMLResponse: string;
      /** @description The frontend URL where redirect the authenticated user. */
      RelayState: string;
    };
    SamlAuthProviderModelAuthProvider: {
      id: number;
      /** @description The type of the related field. */
      type: string;
      /** @description The email domain registered with this provider. */
      domain: string;
      /** @description Whether the provider is enabled or not. */
      enabled?: boolean;
      /** @description The SAML metadata XML provided by the IdP. */
      metadata: string;
      /** @description Whether or not a user sign in correctly with this SAML provider. */
      is_verified: boolean;
    };
    /** @enum {string} */
    ScopeTypeEnum: "core" | "application" | "group" | "group_invitation" | "snapshot" | "group_user" | "database" | "database_table" | "database_field" | "database_view" | "database_view_decoration" | "database_view_sort" | "database_view_filter" | "token" | "team" | "team_subject" | "license";
    SelectColorValueProviderConf: {
      /** @description An id of a select field of the table. The value provider return the color of the selected option for each row. */
      field_id: number | null;
    };
    SelectOption: {
      id?: number;
      value: string;
      color: string;
    };
    SendResetPasswordEmailBodyValidation: {
      /**
       * Format: email 
       * @description The email address of the user that has requested a password reset.
       */
      email: string;
      /**
       * Format: uri 
       * @description The base URL where the user can reset his password. The reset token is going to be appended to the base_url (base_url '/token').
       */
      base_url: string;
    };
    Settings: {
      /** @description Indicates whether new users can create a new account when signing up. */
      allow_new_signups?: boolean;
      /** @description Indicates whether invited users can create an account when signing up, even if allow_new_signups is disabled. */
      allow_signups_via_group_invitations?: boolean;
      /** @description Indicates whether users can request a password reset link. */
      allow_reset_password?: boolean;
      /** @description Indicates whether all users can create groups, or just staff. */
      allow_global_group_creation?: boolean;
      /** @description Number of days after the last login for an account pending deletion to be deleted */
      account_deletion_grace_delay?: number;
      /** @description Indicates that there are no admin users in the database yet, so in the frontend the signup form will be shown instead of the login page. */
      show_admin_signup_page?: boolean;
    };
    SingleSelectFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
      select_options?: (components["schemas"]["SelectOption"])[];
    };
    SingleSelectFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      select_options?: (components["schemas"]["SelectOption"])[];
    };
    SingleSelectFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
      select_options?: (components["schemas"]["SelectOption"])[];
    };
    SingleSelectFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
      select_options?: (components["schemas"]["SelectOption"])[];
    };
    Snapshot: {
      id: number;
      name: string;
      snapshot_from_application: number;
      created_by: components["schemas"]["User"];
      /** Format: date-time */
      created_at: string;
    };
    SpecificApplication: {
      id: number;
      name: string;
      order: number;
      type: string;
      /** @description The group that the application belongs to. */
      group: components["schemas"]["Group"];
    };
    /** @enum {string} */
    StateEnum: "pending" | "exporting" | "cancelled" | "finished" | "failed" | "expired";
    /** @enum {string} */
    StyleEnum: "star" | "heart" | "thumbs-up" | "flag" | "smile";
    /** @enum {string} */
    SubjectType3ffEnum: "auth.User";
    /** @enum {string} */
    SubjectType850Enum: "auth.User" | "baserow_enterprise.Team";
    /** @enum {string} */
    SubmitActionEnum: "MESSAGE" | "REDIRECT";
    Table: {
      id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      database_id: number;
    };
    TableCreate: {
      name: string;
      /**
       * @description A list of rows that needs to be created as initial table data. Each row is a list of values that are going to be added in the new table in the same order as provided.
       * 
       * Ex: 
       * ```json
       * [
       *   ["row1_field1_value", "row1_field2_value"],
       *   ["row2_field1_value", "row2_field2_value"],
       * ]
       * ```
       * for creating a two rows table with two fields.
       * 
       * If not provided, some example data is going to be created.
       */
      data?: (Record<string, never>)[];
      /**
       * @description Indicates if the first provided row is the header. If true the field names are going to be the values of the first row. Otherwise they will be called "Field N" 
       * @default false
       */
      first_row_header?: boolean;
    };
    TableImport: {
      /**
       * @description A list of rows you want to add to the specified table. Each row is a list of values, one for each **writable** field. The field values must be ordered according to the field order in the table. All values must be compatible with the corresponding field type.
       * 
       * Ex: 
       * ```json
       * [
       *   ["row1_field1_value", "row1_field2_value"],
       *   ["row2_field1_value", "row2_field2_value"],
       * ]
       * ```
       * for adding two rows to a table with two writable fields.
       */
      data: (Record<string, never>)[];
    };
    TableWebhook: {
      id: number;
      /** @description A list containing the events that will trigger this webhook. */
      events: {
        [key: string]: unknown | undefined;
      };
      /** @description The additional headers as an object where the key is the name and the value the value. */
      headers: {
        [key: string]: unknown | undefined;
      };
      /** @description All the calls that this webhook made. */
      calls: (components["schemas"]["TableWebhookCall"])[];
      /** Format: date-time */
      created_on: string;
      /** Format: date-time */
      updated_on: string;
      /** @description Indicates whether the field names must be used as payload key instead of the id. */
      use_user_field_names?: boolean;
      /** @description The URL that must be called when the webhook is triggered. */
      url: string;
      /** @description The request method that be used when the event occurs. */
      request_method?: components["schemas"]["RequestMethodEnum"];
      /** @description An internal name of the webhook. */
      name: string;
      /** @description Indicates whether this webhook should listen to all events. */
      include_all_events?: boolean;
      /** @description The amount of failed webhook calls. */
      failed_triggers?: number;
      /** @description Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated. */
      active?: boolean;
    };
    TableWebhookCall: {
      id: number;
      /**
       * Format: uuid 
       * @description Event ID where the call originated from.
       */
      event_id: string;
      event_type: string;
      /** Format: date-time */
      called_time?: string | null;
      called_url: string;
      /** @description A text copy of the request headers and body. */
      request?: string | null;
      /** @description A text copy of the response headers and body. */
      response?: string | null;
      /** @description The HTTP response status code. */
      response_status?: number | null;
      /** @description An internal error reflecting what went wrong. */
      error?: string | null;
    };
    TableWebhookCreateRequest: {
      /**
       * Format: uri 
       * @description The URL that must be called when the webhook is triggered.
       */
      url: string;
      /** @description Indicates whether this webhook should listen to all events. */
      include_all_events?: boolean;
      /** @description A list containing the events that will trigger this webhook. */
      events?: (components["schemas"]["Events3eaEnum"])[];
      /** @description The request method that be used when the event occurs. */
      request_method?: components["schemas"]["RequestMethodEnum"];
      /** @description The additional headers as an object where the key is the name and the value the value. */
      headers?: {
        [key: string]: unknown | undefined;
      };
      /** @description An internal name of the webhook. */
      name: string;
      /** @description Indicates whether the field names must be used as payload key instead of the id. */
      use_user_field_names?: boolean;
    };
    TableWebhookTestCallRequest: {
      /**
       * Format: uri 
       * @description The URL that must be called when the webhook is triggered.
       */
      url: string;
      /** @description The event type that must be used for the test call. */
      event_type: components["schemas"]["EventTypeEnum"];
      /** @description The request method that be used when the event occurs. */
      request_method?: components["schemas"]["RequestMethodEnum"];
      /** @description The additional headers as an object where the key is the name and the value the value. */
      headers?: {
        [key: string]: unknown | undefined;
      };
      /** @description Indicates whether the field names must be used as payload key instead of the id. */
      use_user_field_names?: boolean;
    };
    TableWebhookTestCallResponse: {
      /** @description A text copy of the request headers and body. */
      request: string;
      /** @description A text copy of the response headers and body. */
      response: string;
      /** @description The HTTP response status code. */
      status_code: number;
      /** @description Indicates whether the provided URL could be reached. */
      is_unreachable: boolean;
    };
    /**
     * @description Mixin to a DRF serializer class to raise an exception if data with unknown fields
     * is provided to the serializer.
     */
    Team: {
      /** @description A human friendly name for this team. */
      name: string;
      /** @description The uid of the role you want to assign to the team in the given group. You can omit this property if you want to remove the role. */
      default_role?: string | null;
      /**
       * @description An array of subject ID/type objects to be used during team create and update. 
       * @default []
       */
      subjects?: (components["schemas"]["TeamSubject"])[];
    };
    TeamResponse: {
      id: number;
      /** @description A human friendly name for this team. */
      name: string;
      /** @description The group that this team belongs to. */
      group: number;
      /** Format: date-time */
      created_on: string;
      /** Format: date-time */
      updated_on: string;
      /** @description The uid of the role this team has in its workspace. */
      default_role?: string;
      /** @description The amount of subjects (e.g. users) that are currently assigned to this team. */
      subject_count: number;
      /** @description A sample, by default 10, of the most recent subjects to join this team. */
      subject_sample?: (components["schemas"]["TeamSampleSubject"])[];
    };
    TeamSampleSubject: {
      /** @description The subject's unique identifier. */
      subject_id: number;
      /** @description The type of subject who belongs to the team. */
      subject_type: components["schemas"]["SubjectType3ffEnum"];
      /** @description The subject's label. Defaults to a user's first name. */
      subject_label: string;
      /** @description The team subject unique identifier. */
      team_subject_id: number;
    };
    /**
     * @description Mixin to a DRF serializer class to raise an exception if data with unknown fields
     * is provided to the serializer.
     */
    TeamSubject: {
      id: number;
      /** @description The subject's unique identifier. */
      subject_id?: number;
      /**
       * Format: email 
       * @description The user subject's email address.
       */
      subject_user_email?: string;
      /** @description The type of subject that is being invited. */
      subject_type: components["schemas"]["SubjectType3ffEnum"];
    };
    TeamSubjectResponse: {
      id: number;
      /** @description The unique subject ID. */
      subject_id: number;
      subject_type: string;
      /** @description The team this subject belongs to. */
      team: number;
    };
    Template: {
      id: number;
      name: string;
      /** @description The font awesome class name that can be used for displaying purposes. */
      icon: string;
      /** @description Keywords related to the template that can be used for search. */
      keywords?: string;
      /** @description The group containing the applications related to the template. The read endpoints related to that group are publicly accessible for preview purposes. */
      group_id: number | null;
      /** @description Indicates if the template must be selected by default. The web-frontend automatically selects the first `is_default` template that it can find. */
      is_default: string;
    };
    TemplateCategories: {
      id: number;
      name: string;
      templates: readonly (components["schemas"]["Template"])[];
    };
    TextFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
      /** @description If set, this value is going to be added every time a new row created. */
      text_default?: string;
    };
    TextFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description If set, this value is going to be added every time a new row created. */
      text_default?: string;
    };
    TextFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
      /** @description If set, this value is going to be added every time a new row created. */
      text_default?: string;
    };
    TextFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
      /** @description If set, this value is going to be added every time a new row created. */
      text_default?: string;
    };
    /** @enum {string} */
    TimezoneEnum: "Africa/Abidjan" | "Africa/Accra" | "Africa/Addis_Ababa" | "Africa/Algiers" | "Africa/Asmara" | "Africa/Asmera" | "Africa/Bamako" | "Africa/Bangui" | "Africa/Banjul" | "Africa/Bissau" | "Africa/Blantyre" | "Africa/Brazzaville" | "Africa/Bujumbura" | "Africa/Cairo" | "Africa/Casablanca" | "Africa/Ceuta" | "Africa/Conakry" | "Africa/Dakar" | "Africa/Dar_es_Salaam" | "Africa/Djibouti" | "Africa/Douala" | "Africa/El_Aaiun" | "Africa/Freetown" | "Africa/Gaborone" | "Africa/Harare" | "Africa/Johannesburg" | "Africa/Juba" | "Africa/Kampala" | "Africa/Khartoum" | "Africa/Kigali" | "Africa/Kinshasa" | "Africa/Lagos" | "Africa/Libreville" | "Africa/Lome" | "Africa/Luanda" | "Africa/Lubumbashi" | "Africa/Lusaka" | "Africa/Malabo" | "Africa/Maputo" | "Africa/Maseru" | "Africa/Mbabane" | "Africa/Mogadishu" | "Africa/Monrovia" | "Africa/Nairobi" | "Africa/Ndjamena" | "Africa/Niamey" | "Africa/Nouakchott" | "Africa/Ouagadougou" | "Africa/Porto-Novo" | "Africa/Sao_Tome" | "Africa/Timbuktu" | "Africa/Tripoli" | "Africa/Tunis" | "Africa/Windhoek" | "America/Adak" | "America/Anchorage" | "America/Anguilla" | "America/Antigua" | "America/Araguaina" | "America/Argentina/Buenos_Aires" | "America/Argentina/Catamarca" | "America/Argentina/ComodRivadavia" | "America/Argentina/Cordoba" | "America/Argentina/Jujuy" | "America/Argentina/La_Rioja" | "America/Argentina/Mendoza" | "America/Argentina/Rio_Gallegos" | "America/Argentina/Salta" | "America/Argentina/San_Juan" | "America/Argentina/San_Luis" | "America/Argentina/Tucuman" | "America/Argentina/Ushuaia" | "America/Aruba" | "America/Asuncion" | "America/Atikokan" | "America/Atka" | "America/Bahia" | "America/Bahia_Banderas" | "America/Barbados" | "America/Belem" | "America/Belize" | "America/Blanc-Sablon" | "America/Boa_Vista" | "America/Bogota" | "America/Boise" | "America/Buenos_Aires" | "America/Cambridge_Bay" | "America/Campo_Grande" | "America/Cancun" | "America/Caracas" | "America/Catamarca" | "America/Cayenne" | "America/Cayman" | "America/Chicago" | "America/Chihuahua" | "America/Coral_Harbour" | "America/Cordoba" | "America/Costa_Rica" | "America/Creston" | "America/Cuiaba" | "America/Curacao" | "America/Danmarkshavn" | "America/Dawson" | "America/Dawson_Creek" | "America/Denver" | "America/Detroit" | "America/Dominica" | "America/Edmonton" | "America/Eirunepe" | "America/El_Salvador" | "America/Ensenada" | "America/Fort_Nelson" | "America/Fort_Wayne" | "America/Fortaleza" | "America/Glace_Bay" | "America/Godthab" | "America/Goose_Bay" | "America/Grand_Turk" | "America/Grenada" | "America/Guadeloupe" | "America/Guatemala" | "America/Guayaquil" | "America/Guyana" | "America/Halifax" | "America/Havana" | "America/Hermosillo" | "America/Indiana/Indianapolis" | "America/Indiana/Knox" | "America/Indiana/Marengo" | "America/Indiana/Petersburg" | "America/Indiana/Tell_City" | "America/Indiana/Vevay" | "America/Indiana/Vincennes" | "America/Indiana/Winamac" | "America/Indianapolis" | "America/Inuvik" | "America/Iqaluit" | "America/Jamaica" | "America/Jujuy" | "America/Juneau" | "America/Kentucky/Louisville" | "America/Kentucky/Monticello" | "America/Knox_IN" | "America/Kralendijk" | "America/La_Paz" | "America/Lima" | "America/Los_Angeles" | "America/Louisville" | "America/Lower_Princes" | "America/Maceio" | "America/Managua" | "America/Manaus" | "America/Marigot" | "America/Martinique" | "America/Matamoros" | "America/Mazatlan" | "America/Mendoza" | "America/Menominee" | "America/Merida" | "America/Metlakatla" | "America/Mexico_City" | "America/Miquelon" | "America/Moncton" | "America/Monterrey" | "America/Montevideo" | "America/Montreal" | "America/Montserrat" | "America/Nassau" | "America/New_York" | "America/Nipigon" | "America/Nome" | "America/Noronha" | "America/North_Dakota/Beulah" | "America/North_Dakota/Center" | "America/North_Dakota/New_Salem" | "America/Nuuk" | "America/Ojinaga" | "America/Panama" | "America/Pangnirtung" | "America/Paramaribo" | "America/Phoenix" | "America/Port-au-Prince" | "America/Port_of_Spain" | "America/Porto_Acre" | "America/Porto_Velho" | "America/Puerto_Rico" | "America/Punta_Arenas" | "America/Rainy_River" | "America/Rankin_Inlet" | "America/Recife" | "America/Regina" | "America/Resolute" | "America/Rio_Branco" | "America/Rosario" | "America/Santa_Isabel" | "America/Santarem" | "America/Santiago" | "America/Santo_Domingo" | "America/Sao_Paulo" | "America/Scoresbysund" | "America/Shiprock" | "America/Sitka" | "America/St_Barthelemy" | "America/St_Johns" | "America/St_Kitts" | "America/St_Lucia" | "America/St_Thomas" | "America/St_Vincent" | "America/Swift_Current" | "America/Tegucigalpa" | "America/Thule" | "America/Thunder_Bay" | "America/Tijuana" | "America/Toronto" | "America/Tortola" | "America/Vancouver" | "America/Virgin" | "America/Whitehorse" | "America/Winnipeg" | "America/Yakutat" | "America/Yellowknife" | "Antarctica/Casey" | "Antarctica/Davis" | "Antarctica/DumontDUrville" | "Antarctica/Macquarie" | "Antarctica/Mawson" | "Antarctica/McMurdo" | "Antarctica/Palmer" | "Antarctica/Rothera" | "Antarctica/South_Pole" | "Antarctica/Syowa" | "Antarctica/Troll" | "Antarctica/Vostok" | "Arctic/Longyearbyen" | "Asia/Aden" | "Asia/Almaty" | "Asia/Amman" | "Asia/Anadyr" | "Asia/Aqtau" | "Asia/Aqtobe" | "Asia/Ashgabat" | "Asia/Ashkhabad" | "Asia/Atyrau" | "Asia/Baghdad" | "Asia/Bahrain" | "Asia/Baku" | "Asia/Bangkok" | "Asia/Barnaul" | "Asia/Beirut" | "Asia/Bishkek" | "Asia/Brunei" | "Asia/Calcutta" | "Asia/Chita" | "Asia/Choibalsan" | "Asia/Chongqing" | "Asia/Chungking" | "Asia/Colombo" | "Asia/Dacca" | "Asia/Damascus" | "Asia/Dhaka" | "Asia/Dili" | "Asia/Dubai" | "Asia/Dushanbe" | "Asia/Famagusta" | "Asia/Gaza" | "Asia/Harbin" | "Asia/Hebron" | "Asia/Ho_Chi_Minh" | "Asia/Hong_Kong" | "Asia/Hovd" | "Asia/Irkutsk" | "Asia/Istanbul" | "Asia/Jakarta" | "Asia/Jayapura" | "Asia/Jerusalem" | "Asia/Kabul" | "Asia/Kamchatka" | "Asia/Karachi" | "Asia/Kashgar" | "Asia/Kathmandu" | "Asia/Katmandu" | "Asia/Khandyga" | "Asia/Kolkata" | "Asia/Krasnoyarsk" | "Asia/Kuala_Lumpur" | "Asia/Kuching" | "Asia/Kuwait" | "Asia/Macao" | "Asia/Macau" | "Asia/Magadan" | "Asia/Makassar" | "Asia/Manila" | "Asia/Muscat" | "Asia/Nicosia" | "Asia/Novokuznetsk" | "Asia/Novosibirsk" | "Asia/Omsk" | "Asia/Oral" | "Asia/Phnom_Penh" | "Asia/Pontianak" | "Asia/Pyongyang" | "Asia/Qatar" | "Asia/Qostanay" | "Asia/Qyzylorda" | "Asia/Rangoon" | "Asia/Riyadh" | "Asia/Saigon" | "Asia/Sakhalin" | "Asia/Samarkand" | "Asia/Seoul" | "Asia/Shanghai" | "Asia/Singapore" | "Asia/Srednekolymsk" | "Asia/Taipei" | "Asia/Tashkent" | "Asia/Tbilisi" | "Asia/Tehran" | "Asia/Tel_Aviv" | "Asia/Thimbu" | "Asia/Thimphu" | "Asia/Tokyo" | "Asia/Tomsk" | "Asia/Ujung_Pandang" | "Asia/Ulaanbaatar" | "Asia/Ulan_Bator" | "Asia/Urumqi" | "Asia/Ust-Nera" | "Asia/Vientiane" | "Asia/Vladivostok" | "Asia/Yakutsk" | "Asia/Yangon" | "Asia/Yekaterinburg" | "Asia/Yerevan" | "Atlantic/Azores" | "Atlantic/Bermuda" | "Atlantic/Canary" | "Atlantic/Cape_Verde" | "Atlantic/Faeroe" | "Atlantic/Faroe" | "Atlantic/Jan_Mayen" | "Atlantic/Madeira" | "Atlantic/Reykjavik" | "Atlantic/South_Georgia" | "Atlantic/St_Helena" | "Atlantic/Stanley" | "Australia/ACT" | "Australia/Adelaide" | "Australia/Brisbane" | "Australia/Broken_Hill" | "Australia/Canberra" | "Australia/Currie" | "Australia/Darwin" | "Australia/Eucla" | "Australia/Hobart" | "Australia/LHI" | "Australia/Lindeman" | "Australia/Lord_Howe" | "Australia/Melbourne" | "Australia/NSW" | "Australia/North" | "Australia/Perth" | "Australia/Queensland" | "Australia/South" | "Australia/Sydney" | "Australia/Tasmania" | "Australia/Victoria" | "Australia/West" | "Australia/Yancowinna" | "Brazil/Acre" | "Brazil/DeNoronha" | "Brazil/East" | "Brazil/West" | "CET" | "CST6CDT" | "Canada/Atlantic" | "Canada/Central" | "Canada/Eastern" | "Canada/Mountain" | "Canada/Newfoundland" | "Canada/Pacific" | "Canada/Saskatchewan" | "Canada/Yukon" | "Chile/Continental" | "Chile/EasterIsland" | "Cuba" | "EET" | "EST" | "EST5EDT" | "Egypt" | "Eire" | "Etc/GMT" | "Etc/GMT+0" | "Etc/GMT+1" | "Etc/GMT+10" | "Etc/GMT+11" | "Etc/GMT+12" | "Etc/GMT+2" | "Etc/GMT+3" | "Etc/GMT+4" | "Etc/GMT+5" | "Etc/GMT+6" | "Etc/GMT+7" | "Etc/GMT+8" | "Etc/GMT+9" | "Etc/GMT-0" | "Etc/GMT-1" | "Etc/GMT-10" | "Etc/GMT-11" | "Etc/GMT-12" | "Etc/GMT-13" | "Etc/GMT-14" | "Etc/GMT-2" | "Etc/GMT-3" | "Etc/GMT-4" | "Etc/GMT-5" | "Etc/GMT-6" | "Etc/GMT-7" | "Etc/GMT-8" | "Etc/GMT-9" | "Etc/GMT0" | "Etc/Greenwich" | "Etc/UCT" | "Etc/UTC" | "Etc/Universal" | "Etc/Zulu" | "Europe/Amsterdam" | "Europe/Andorra" | "Europe/Astrakhan" | "Europe/Athens" | "Europe/Belfast" | "Europe/Belgrade" | "Europe/Berlin" | "Europe/Bratislava" | "Europe/Brussels" | "Europe/Bucharest" | "Europe/Budapest" | "Europe/Busingen" | "Europe/Chisinau" | "Europe/Copenhagen" | "Europe/Dublin" | "Europe/Gibraltar" | "Europe/Guernsey" | "Europe/Helsinki" | "Europe/Isle_of_Man" | "Europe/Istanbul" | "Europe/Jersey" | "Europe/Kaliningrad" | "Europe/Kiev" | "Europe/Kirov" | "Europe/Kyiv" | "Europe/Lisbon" | "Europe/Ljubljana" | "Europe/London" | "Europe/Luxembourg" | "Europe/Madrid" | "Europe/Malta" | "Europe/Mariehamn" | "Europe/Minsk" | "Europe/Monaco" | "Europe/Moscow" | "Europe/Nicosia" | "Europe/Oslo" | "Europe/Paris" | "Europe/Podgorica" | "Europe/Prague" | "Europe/Riga" | "Europe/Rome" | "Europe/Samara" | "Europe/San_Marino" | "Europe/Sarajevo" | "Europe/Saratov" | "Europe/Simferopol" | "Europe/Skopje" | "Europe/Sofia" | "Europe/Stockholm" | "Europe/Tallinn" | "Europe/Tirane" | "Europe/Tiraspol" | "Europe/Ulyanovsk" | "Europe/Uzhgorod" | "Europe/Vaduz" | "Europe/Vatican" | "Europe/Vienna" | "Europe/Vilnius" | "Europe/Volgograd" | "Europe/Warsaw" | "Europe/Zagreb" | "Europe/Zaporozhye" | "Europe/Zurich" | "GB" | "GB-Eire" | "GMT" | "GMT+0" | "GMT-0" | "GMT0" | "Greenwich" | "HST" | "Hongkong" | "Iceland" | "Indian/Antananarivo" | "Indian/Chagos" | "Indian/Christmas" | "Indian/Cocos" | "Indian/Comoro" | "Indian/Kerguelen" | "Indian/Mahe" | "Indian/Maldives" | "Indian/Mauritius" | "Indian/Mayotte" | "Indian/Reunion" | "Iran" | "Israel" | "Jamaica" | "Japan" | "Kwajalein" | "Libya" | "MET" | "MST" | "MST7MDT" | "Mexico/BajaNorte" | "Mexico/BajaSur" | "Mexico/General" | "NZ" | "NZ-CHAT" | "Navajo" | "PRC" | "PST8PDT" | "Pacific/Apia" | "Pacific/Auckland" | "Pacific/Bougainville" | "Pacific/Chatham" | "Pacific/Chuuk" | "Pacific/Easter" | "Pacific/Efate" | "Pacific/Enderbury" | "Pacific/Fakaofo" | "Pacific/Fiji" | "Pacific/Funafuti" | "Pacific/Galapagos" | "Pacific/Gambier" | "Pacific/Guadalcanal" | "Pacific/Guam" | "Pacific/Honolulu" | "Pacific/Johnston" | "Pacific/Kanton" | "Pacific/Kiritimati" | "Pacific/Kosrae" | "Pacific/Kwajalein" | "Pacific/Majuro" | "Pacific/Marquesas" | "Pacific/Midway" | "Pacific/Nauru" | "Pacific/Niue" | "Pacific/Norfolk" | "Pacific/Noumea" | "Pacific/Pago_Pago" | "Pacific/Palau" | "Pacific/Pitcairn" | "Pacific/Pohnpei" | "Pacific/Ponape" | "Pacific/Port_Moresby" | "Pacific/Rarotonga" | "Pacific/Saipan" | "Pacific/Samoa" | "Pacific/Tahiti" | "Pacific/Tarawa" | "Pacific/Tongatapu" | "Pacific/Truk" | "Pacific/Wake" | "Pacific/Wallis" | "Pacific/Yap" | "Poland" | "Portugal" | "ROC" | "ROK" | "Singapore" | "Turkey" | "UCT" | "US/Alaska" | "US/Aleutian" | "US/Arizona" | "US/Central" | "US/East-Indiana" | "US/Eastern" | "US/Hawaii" | "US/Indiana-Starke" | "US/Michigan" | "US/Mountain" | "US/Pacific" | "US/Samoa" | "UTC" | "Universal" | "W-SU" | "WET" | "Zulu";
    Token: {
      id: number;
      /** @description The human readable name of the database token for the user. */
      name: string;
      /** @description Only the tables of the group can be accessed. */
      group: number;
      /** @description The unique token key that can be used to authorize for the table row endpoints. */
      key: string;
      /**
       * @description Indicates per operation which permissions the database token has within the whole group. If the value of for example `create` is `true`, then the token can create rows in all tables related to the group. If a list is provided with for example `[["table", 1]]` then the token only has create permissions for the table with id 1. Same goes for if a database references is provided. `[["database", 1]]` means create permissions for all tables in the database with id 1.
       * 
       * Example:
       * ```json
       * {
       *   "create": true// Allows creating rows in all tables.
       *   // Allows reading rows from database 1 and table 10.
       *   "read": [["database", 1], ["table", 10]],
       *   "update": false  // Denies updating rows in all tables.
       *   "delete": []  // Denies deleting rows in all tables.
       *  }
       * ```
       */
      permissions: {
        create?: boolean | (((string | number)[])[]);
        read?: boolean | (((string | number)[])[]);
        update?: boolean | (((string | number)[])[]);
        delete?: boolean | (((string | number)[])[]);
      };
    };
    TokenCreate: {
      /** @description The human readable name of the database token for the user. */
      name: string;
      /** @description Only the tables of the group can be accessed. */
      group: number;
    };
    TokenObtainPairWithUser: {
      /** Format: email */
      email?: string;
      /**
       * Format: email 
       * @deprecated 
       * @description Deprecated. Use `email` instead.
       */
      username?: string;
      password: string;
    };
    TokenRefreshWithUser: {
      access: string;
      refresh_token?: string;
      /**
       * @deprecated 
       * @description Deprecated. Use `refresh_token` instead.
       */
      token?: string;
    };
    TokenVerifyWithUser: {
      /**
       * @deprecated 
       * @description Deprecated. Use `refresh_token` instead.
       */
      token?: string;
      refresh_token: string;
    };
    TrashContents: {
      id: number;
      user_who_trashed: string;
      trash_item_type: string;
      trash_item_id: number;
      parent_trash_item_id?: number | null;
      /** Format: date-time */
      trashed_at: string;
      application?: number | null;
      group: number;
      name: string;
      names?: (string)[] | null;
      parent_name?: string | null;
    };
    /** @enum {string} */
    TrashItemTypeEnum: "group" | "application" | "table" | "field" | "row" | "rows" | "view" | "team";
    TrashStructure: {
      groups: (components["schemas"]["TrashStructureGroup"])[];
    };
    TrashStructureApplication: {
      id: number;
      name: string;
      trashed?: boolean;
    };
    TrashStructureGroup: {
      id: number;
      trashed: boolean;
      name: string;
      applications: (components["schemas"]["TrashStructureApplication"])[];
    };
    /** @enum {string} */
    Type4afEnum: "duplicate_application" | "install_template" | "create_snapshot" | "restore_snapshot" | "airtable" | "file_import" | "duplicate_table" | "duplicate_field" | "audit_log_export";
    /** @enum {string} */
    Type77bEnum: "text" | "long_text" | "url" | "email" | "number" | "rating" | "boolean" | "date" | "last_modified" | "created_on" | "link_row" | "file" | "single_select" | "multiple_select" | "phone_number" | "formula" | "lookup" | "multiple_collaborators";
    /** @enum {string} */
    TypeC84Enum: "equal" | "not_equal" | "filename_contains" | "has_file_type" | "contains" | "contains_not" | "length_is_lower_than" | "higher_than" | "lower_than" | "date_equal" | "date_before" | "date_after" | "date_not_equal" | "date_equals_today" | "date_before_today" | "date_after_today" | "date_equals_days_ago" | "date_equals_months_ago" | "date_equals_years_ago" | "date_equals_week" | "date_equals_month" | "date_equals_day_of_month" | "date_equals_year" | "single_select_equal" | "single_select_not_equal" | "link_row_has" | "link_row_has_not" | "link_row_contains" | "link_row_not_contains" | "boolean" | "empty" | "not_empty" | "multiple_select_has" | "multiple_select_has_not" | "multiple_collaborators_has" | "multiple_collaborators_has_not";
    /** @enum {string} */
    TypeFc4Enum: "left_border_color" | "background_color";
    TypeFormulaRequest: {
      formula: string;
      name: string;
    };
    TypeFormulaResult: {
      error?: string | null;
      /** @description EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20) */
      date_format?: components["schemas"]["DateFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description Indicates if the field also includes a time. */
      date_include_time?: boolean | null;
      /** @description 24 (14:30) or 12 (02:30 PM) */
      date_time_format?: components["schemas"]["DateTimeFormatEnum"] | components["schemas"]["NullEnum"];
      /** @description The amount of digits allowed after the point. */
      number_decimal_places?: components["schemas"]["NumberDecimalPlacesEnum"] | components["schemas"]["NullEnum"];
      array_formula_type?: components["schemas"]["ArrayFormulaTypeEnum"] | components["schemas"]["NullEnum"];
      formula: string;
      formula_type?: components["schemas"]["FormulaTypeEnum"];
    };
    URLFieldCreateField: {
      name: string;
      type: components["schemas"]["Type77bEnum"];
    };
    URLFieldField: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
    };
    URLFieldFieldSerializerWithRelatedFields: {
      id: number;
      table_id: number;
      name: string;
      /** @description Lowest first. */
      order: number;
      /** @description The type of the related field. */
      type: string;
      /** @description Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row. */
      primary?: boolean;
      /** @description Indicates whether the field is a read only field. If true, it's not possible to update the cell value. */
      read_only: boolean;
      /** @description A list of related fields which also changed. */
      related_fields: readonly (components["schemas"]["Field"])[];
    };
    URLFieldUpdateField: {
      name?: string;
      type?: components["schemas"]["Type77bEnum"];
    };
    UndoRedoAction: {
      /** @description If an action was undone/redone/skipped due to an error this field will contain the type of the action that was undone/redone. */
      action_type?: string | null;
      /** @description If an action was undone/redone/skipped due to an error this field will contain the scope of the action that was undone/redone. */
      action_scope?: string | null;
    };
    UndoRedoResponse: {
      actions: (components["schemas"]["UndoRedoAction"])[];
      /** @description Indicates the result of the undo/redo operation. Will be 'SUCCESS' on success, 'NOTHING_TO_DO' when there is no action to undo/redo and 'SKIPPED_DUE_TO_ERROR' when the undo/redo failed due to a conflict or error and was skipped over. */
      result_code: string;
    };
    UniqueRowValues: {
      values: (string)[];
    };
    User: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
    };
    UserAdminGroups: {
      id: number;
      name: string;
      /** @description The permissions that the user has within the group. */
      permissions?: string;
    };
    /** @description Serializes the safe user attributes to expose for a response back to the user. */
    UserAdminResponse: {
      id: number;
      /** Format: email */
      username: string;
      name: string;
      groups: (components["schemas"]["UserAdminGroups"])[];
      /** Format: date-time */
      last_login?: string | null;
      /** Format: date-time */
      date_joined?: string;
      /**
       * Active 
       * @description Designates whether this user should be treated as active. Set this to false instead of deleting accounts.
       */
      is_active?: boolean;
      /**
       * Staff status 
       * @description Designates whether this user is an admin and has access to all groups and Baserow's admin areas.
       */
      is_staff?: boolean;
    };
    UserFile: {
      size: number;
      mime_type?: string;
      is_image?: boolean;
      image_width?: number | null;
      image_height?: number | null;
      /** Format: date-time */
      uploaded_at: string;
      /** Format: uri */
      url: string;
      thumbnails: {
        [key: string]: unknown | undefined;
      };
      name: string;
      original_name: string;
    };
    UserFileUploadViaURLRequest: {
      /** Format: uri */
      url: string;
    };
    /**
     * @description This serializer is used for displaying the invitation to the user that doesn't
     * have access to the group yet, so not for invitation management purposes.
     */
    UserGroupInvitation: {
      id: number;
      invited_by: string;
      group: string;
      /**
       * Format: email 
       * @description The email address of the user that the invitation is meant for. Only a user with that email address can accept it.
       */
      email: string;
      /** @description An optional message that the invitor can provide. This will be visible to the receiver of the invitation. */
      message: string;
      /** Format: date-time */
      created_on: string;
      email_exists: boolean;
    };
    /** @enum {string} */
    ValueProviderTypeEnum: "single_select_color" | "conditional_color";
    View: {
      id: number;
      table_id: number;
      name: string;
      order: number;
      type: string;
      table: components["schemas"]["Table"];
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      filters?: (components["schemas"]["ViewFilter"])[];
      sortings?: (components["schemas"]["ViewSort"])[];
      decorations?: (components["schemas"]["ViewDecoration"])[];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      public_view_has_password: boolean;
      show_logo?: boolean;
    };
    ViewCreateView: components["schemas"]["GridViewCreateView"] | components["schemas"]["GalleryViewCreateView"] | components["schemas"]["FormViewCreateView"] | components["schemas"]["KanbanViewCreateView"];
    ViewDecoration: {
      id: number;
      /** @description The view to which the decoration applies. Each view can have his own decorations. */
      view?: number;
      /** @description The decorator type. This is then interpreted by the frontend to display the decoration. */
      type?: string;
      /** @description The value provider type that gives the value to the decorator. */
      value_provider_type?: string;
      /** @description The configuration consumed by the value provider. */
      value_provider_conf?: {
        [key: string]: unknown | undefined;
      };
      /** @description The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first. */
      order?: number;
    };
    ViewFieldOptions: components["schemas"]["grid_view_field_options"] | components["schemas"]["gallery_view_field_options"] | components["schemas"]["form_view_field_options"] | components["schemas"]["kanban_view_field_options"];
    ViewFilter: {
      id: number;
      /** @description The view to which the filter applies. Each view can have his own filters. */
      view: number;
      /** @description The field of which the value must be compared to the filter value. */
      field: number;
      /** @description Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`). */
      type: string;
      /** @description The filter value that must be compared to the field's value. */
      value?: string;
      /** @description Can contain unique preloaded values per filter. This is for example used by the `link_row_has` filter to communicate the display name if a value is provided. */
      preload_values: {
        [key: string]: unknown | undefined;
      };
    };
    ViewSort: {
      id: number;
      /** @description The view to which the sort applies. Each view can have his own sortings. */
      view: number;
      /** @description The field that must be sorted on. */
      field: number;
      /** @description Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A. */
      order?: components["schemas"]["OrderEnum"];
    };
    /** @enum {string} */
    ViewTypesEnum: "grid" | "gallery" | "form" | "kanban";
    ViewView: components["schemas"]["GridViewView"] | components["schemas"]["GalleryViewView"] | components["schemas"]["FormViewView"] | components["schemas"]["KanbanViewView"];
    form_view_field_options: {
      /** @description An object containing the field id as key and the properties related to view as value. */
      field_options: {
        [key: string]: components["schemas"]["FormViewFieldOptions"] | undefined;
      };
    };
    form_view_update: {
      name?: string;
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      /** @description The password required to access the public view URL. */
      public_view_password?: string;
      /** @description The title that is displayed at the beginning of the form. */
      title?: string;
      /** @description The description that is displayed at the beginning of the form. */
      description?: string;
      /** @description Configurable mode of the form. */
      mode?: components["schemas"]["ModeEnum"];
      /** @description The cover image that must be displayed at the top of the form. */
      cover_image?: components["schemas"]["UserFile"] | null;
      /** @description The logo image that must be displayed at the top of the form. */
      logo_image?: components["schemas"]["UserFile"] | null;
      /** @description The text displayed on the submit button. */
      submit_text?: string;
      /** @description The action that must be performed after the visitor has filled out the form. */
      submit_action?: components["schemas"]["SubmitActionEnum"];
      /** @description If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form. */
      submit_action_message?: string;
      /**
       * Format: uri 
       * @description If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.
       */
      submit_action_redirect_url?: string;
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
    gallery_view_field_options: {
      /** @description An object containing the field id as key and the properties related to view as value. */
      field_options: {
        [key: string]: components["schemas"]["GalleryViewFieldOptions"] | undefined;
      };
    };
    gallery_view_update: {
      name?: string;
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      /** @description The password required to access the public view URL. */
      public_view_password?: string;
      /** @description References a file field of which the first image must be shown as card cover image. */
      card_cover_image_field?: number | null;
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
    grid_view_field_options: {
      /** @description An object containing the field id as key and the properties related to view as value. */
      field_options: {
        [key: string]: components["schemas"]["GridViewFieldOptions"] | undefined;
      };
    };
    grid_view_update: {
      name?: string;
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      /** @description The password required to access the public view URL. */
      public_view_password?: string;
      row_identifier_type?: components["schemas"]["RowIdentifierTypeEnum"];
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
    kanban_view_field_options: {
      /** @description An object containing the field id as key and the properties related to view as value. */
      field_options: {
        [key: string]: components["schemas"]["KanbanViewFieldOptions"] | undefined;
      };
    };
    kanban_view_update: {
      name?: string;
      /** @description Indicates whether all the rows should apply to all filters (AND) or to any filter (OR). */
      filter_type?: components["schemas"]["ConditionTypeEnum"];
      /** @description Allows users to see results unfiltered while still keeping the filters saved for the view. */
      filters_disabled?: boolean;
      /** @description The password required to access the public view URL. */
      public_view_password?: string;
      single_select_field?: number | null;
      /** @description References a file field of which the first image must be shown as card cover image. */
      card_cover_image_field?: number | null;
      /** @description Indicates whether the view is publicly accessible to visitors. */
      public?: boolean;
      /** @description The unique slug that can be used to construct a public URL. */
      slug: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  admin_audit_log: {
    /** @description Lists all audit log entries. */
    parameters: {
        /** @description Defines which page should be returned. */
        /** @description If provided only audit_log_entries that match the query will be returned. */
        /** @description Defines how many audit_log_entries should be returned per page. */
        /** @description A comma separated string of attributes to sort by, each attribute must be prefixed with `+` for a descending sort or a `-` for an ascending sort. The accepted attribute names are: user, group, type, timestamp, ip_address. For example `sorts=-user,-group` will sort the audit_log_entries first by descending user and then ascending group. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error. */
      query: {
        page?: number;
        search?: string;
        size?: number;
        sorts?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["AuditLog"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_PAGE_SIZE_LIMIT" | "ERROR_INVALID_PAGE" | "ERROR_INVALID_SORT_DIRECTION" | "ERROR_INVALID_SORT_ATTRIBUTE";
            detail?: string | Record<string, never>;
          };
        };
      };
      /** @description No response body */
      401: never;
    };
  };
  admin_audit_log_types: {
    /** @description List all distinct action types related to an audit log entry. */
    responses: {
      /** @description No response body */
      200: never;
    };
  };
  export_audit_log: {
    /** @description Creates a job to export the filtered audit log to a CSV file. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
      header: {
        ClientSessionId?: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AuditLogExportJob"];
        "application/x-www-form-urlencoded": components["schemas"]["AuditLogExportJob"];
        "multipart/form-data": components["schemas"]["AuditLogExportJob"];
      };
    };
    responses: {
      202: {
        content: {
          "application/json": components["schemas"]["AuditLogExportJob"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_MAX_JOB_COUNT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  admin_audit_log_groups: {
    /** @description List all distinct group names related to an audit log entry. */
    parameters: {
        /** @description Defines which page should be returned. */
        /** @description If provided only groups that match the query will be returned. */
        /** @description Defines how many groups should be returned per page. */
        /** @description A comma separated string of attributes to sort by, each attribute must be prefixed with `+` for a descending sort or a `-` for an ascending sort. The accepted attribute names are: . For example `sorts=-field_1,-field_2` will sort the groups first by descending field_1 and then ascending field_2. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error. */
      query: {
        page?: number;
        search?: string;
        size?: number;
        sorts?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["AuditLogGroup"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_PAGE_SIZE_LIMIT" | "ERROR_INVALID_PAGE" | "ERROR_INVALID_SORT_DIRECTION" | "ERROR_INVALID_SORT_ATTRIBUTE";
            detail?: string | Record<string, never>;
          };
        };
      };
      /** @description No response body */
      401: never;
    };
  };
  admin_audit_log_users: {
    /** @description List all users that have performed an action in the audit log. */
    parameters: {
        /** @description Defines which page should be returned. */
        /** @description If provided only users that match the query will be returned. */
        /** @description Defines how many users should be returned per page. */
        /** @description A comma separated string of attributes to sort by, each attribute must be prefixed with `+` for a descending sort or a `-` for an ascending sort. The accepted attribute names are: . For example `sorts=-field_1,-field_2` will sort the users first by descending field_1 and then ascending field_2. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error. */
      query: {
        page?: number;
        search?: string;
        size?: number;
        sorts?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["AuditLogUser"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_PAGE_SIZE_LIMIT" | "ERROR_INVALID_PAGE" | "ERROR_INVALID_SORT_DIRECTION" | "ERROR_INVALID_SORT_ATTRIBUTE";
            detail?: string | Record<string, never>;
          };
        };
      };
      /** @description No response body */
      401: never;
    };
  };
  list_auth_providers: {
    /** @description List all the available authentication providers. */
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Authentication_ProviderAuthProvider"])[];
        };
      };
    };
  };
  create_auth_provider: {
    /** @description Creates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook. */
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Authentication_ProviderAuthProvider"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_auth_provider: {
    /** @description Get an authentication provider. */
    parameters: {
        /** @description The authentication provider id to fetch. */
      path: {
        auth_provider_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Authentication_ProviderAuthProvider"];
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_AUTH_PROVIDER_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_auth_provider: {
    /** @description Delete an authentication provider. */
    parameters: {
        /** @description The authentication provider id to delete. */
      path: {
        auth_provider_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_AUTH_PROVIDER_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_auth_provider: {
    /** @description Updates a new authentication provider. This can be used to enable authentication with a third party service like Google or Facebook. */
    parameters: {
        /** @description The authentication provider id to update. */
      path: {
        auth_provider_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Authentication_ProviderAuthProvider"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_AUTH_PROVIDER_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  admin_dashboard: {
    /**
     * @description Returns the new and active users for the last 24 hours, 7 days and 30 days. The `previous_` values are the values of the period before, so for example `previous_new_users_last_24_hours` are the new users that signed up from 48 to 24 hours ago. It can be used to calculate an increase or decrease in the amount of signups. A list of the new and active users for every day for the last 30 days is also included.
     * 
     * This is a **premium** feature.
     */
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AdminDashboard"];
        };
      };
      /** @description No response body */
      401: never;
    };
  };
  admin_list_groups: {
    /**
     * @description Returns all groups with detailed information on each group, if the requesting user is staff.
     * 
     * This is a **premium** feature.
     */
    parameters: {
        /** @description Defines which page should be returned. */
        /** @description If provided only groups that match the query will be returned. */
        /** @description Defines how many groups should be returned per page. */
        /** @description A comma separated string of attributes to sort by, each attribute must be prefixed with `+` for a descending sort or a `-` for an ascending sort. The accepted attribute names are: id, name, application_count, created_on. For example `sorts=-id,-name` will sort the groups first by descending id and then ascending name. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error. */
      query: {
        page?: number;
        search?: string;
        size?: number;
        sorts?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["GroupsAdminResponse"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_PAGE_SIZE_LIMIT" | "ERROR_INVALID_PAGE" | "ERROR_INVALID_SORT_DIRECTION" | "ERROR_INVALID_SORT_ATTRIBUTE";
            detail?: string | Record<string, never>;
          };
        };
      };
      /** @description No response body */
      401: never;
    };
  };
  admin_delete_group: {
    /**
     * @description Deletes the specified group and the applications inside that group, if the requesting user is staff. 
     * 
     * This is a **premium** feature.
     */
    parameters: {
        /** @description The id of the group to delete */
      path: {
        group_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST" | "ERROR_FEATURE_NOT_AVAILABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      /** @description No response body */
      401: never;
    };
  };
  admin_list_users: {
    /**
     * @description Returns all users with detailed information on each user, if the requesting user is staff. 
     * 
     * This is a **premium** feature.
     */
    parameters: {
        /** @description Defines which page should be returned. */
        /** @description If provided only users that match the query will be returned. */
        /** @description Defines how many users should be returned per page. */
        /** @description A comma separated string of attributes to sort by, each attribute must be prefixed with `+` for a descending sort or a `-` for an ascending sort. The accepted attribute names are: id, is_active, name, username, date_joined, last_login. For example `sorts=-id,-is_active` will sort the users first by descending id and then ascending is_active. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_INVALID_SORT_ATTRIBUTE error. */
      query: {
        page?: number;
        search?: string;
        size?: number;
        sorts?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["UserAdminResponse"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_PAGE_SIZE_LIMIT" | "ERROR_INVALID_PAGE" | "ERROR_INVALID_SORT_DIRECTION" | "ERROR_INVALID_SORT_ATTRIBUTE";
            detail?: string | Record<string, never>;
          };
        };
      };
      /** @description No response body */
      401: never;
    };
  };
  admin_delete_user: {
    /**
     * @description Deletes the specified user, if the requesting user has admin permissions. You cannot delete yourself. 
     * 
     * This is a **premium** feature.
     */
    parameters: {
        /** @description The id of the user to delete */
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description No response body */
      200: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "USER_ADMIN_CANNOT_DELETE_SELF" | "USER_ADMIN_UNKNOWN_USER" | "ERROR_FEATURE_NOT_AVAILABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      /** @description No response body */
      401: never;
    };
  };
  admin_edit_user: {
    /**
     * @description Updates specified user attributes and returns the updated user if the requesting user is staff. You cannot update yourself to no longer be an admin or active. 
     * 
     * This is a **premium** feature.
     */
    parameters: {
        /** @description The id of the user to edit */
      path: {
        user_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUserAdminUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUserAdminUpdate"];
        "multipart/form-data": components["schemas"]["PatchedUserAdminUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserAdminResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_REQUEST_BODY_VALIDATION" | "USER_ADMIN_CANNOT_DEACTIVATE_SELF" | "USER_ADMIN_UNKNOWN_USER" | "ERROR_FEATURE_NOT_AVAILABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      /** @description No response body */
      401: never;
    };
  };
  admin_impersonate_user: {
    /**
     * @description This endpoint allows staff to impersonate another user by requesting a JWT token and user object. The requesting user must have staff access in order to do this. It's not possible to impersonate a superuser or staff.
     * 
     * This is a **premium** feature.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["BaserowImpersonateAuthToken"];
        "application/x-www-form-urlencoded": components["schemas"]["BaserowImpersonateAuthToken"];
        "multipart/form-data": components["schemas"]["BaserowImpersonateAuthToken"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @description An object containing information related to the user. */
            user?: {
              /** @description The first name of related user. */
              first_name?: string;
              /**
               * Format: email 
               * @description The username of the related user. This is always an email address.
               */
              username?: string;
              /** @description An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB. */
              language?: string;
            };
            /**
             * @deprecated 
             * @description Deprecated. Use the `access_token` instead.
             */
            token?: string;
            /** @description 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes. */
            access_token?: string;
          };
        };
      };
    };
  };
  list_all_applications: {
    /** @description Lists all the applications that the authorized user has access to. The properties that belong to the application can differ per type. An application always belongs to a single group. All the applications of the groups that the user has access to are going to be listed here. */
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Applications"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_application: {
    /** @description Returns the requested application if the authorized user is in the application's group. The properties that belong to the application can differ per type. */
    parameters: {
        /** @description Returns the application related to the provided value. */
      path: {
        application_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Applications"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_application: {
    /** @description Deletes an application if the authorized user is in the application's group. All the related children are also going to be deleted. For example in case of a database application all the underlying tables, fields, views and rows are going to be deleted. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Deletes the application related to the provided value. */
      path: {
        application_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_application: {
    /** @description Updates the existing application related to the provided `application_id` param if the authorized user is in the application's group. It is not possible to change the type, but properties like the name can be changed. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the application related to the provided value. */
      path: {
        application_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedApplicationUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedApplicationUpdate"];
        "multipart/form-data": components["schemas"]["PatchedApplicationUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Applications"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  duplicate_application_async: {
    /** @description Duplicate an application if the authorized user is in the application's group. All the related children are also going to be duplicated. For example in case of a database application all the underlying tables, fields, views and rows are going to be duplicated. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description The id of the application to duplicate. */
      path: {
        application_id: number;
      };
    };
    responses: {
      202: {
        content: {
          "application/json": components["schemas"]["DuplicateApplicationJobJob"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_APPLICATION_NOT_IN_GROUP" | "ERROR_MAX_JOB_COUNT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_applications: {
    /** @description Lists all the applications of the group related to the provided `group_id` parameter if the authorized user is in that group. If thegroup is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single group. */
    parameters: {
        /** @description Returns only applications that are in the group related to the provided value. */
      path: {
        group_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Applications"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_application: {
    /** @description Creates a new application based on the provided type. The newly created application is going to be added to the group related to the provided `group_id` parameter. If the authorized user does not belong to the group an error will be returned. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Creates an application for the group related to the provided value. */
      path: {
        group_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["ApplicationCreate"];
        "multipart/form-data": components["schemas"]["ApplicationCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Applications"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  order_applications: {
    /** @description Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the order of the applications in the group related to the provided value. */
      path: {
        group_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderApplications"];
        "application/x-www-form-urlencoded": components["schemas"]["OrderApplications"];
        "multipart/form-data": components["schemas"]["OrderApplications"];
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_APPLICATION_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_auth_providers_login_options: {
    /** @description Lists the available login options for the configured authentication providers. */
    responses: {
      200: {
        content: {
          "application/json": {
            [key: string]: unknown | undefined;
          };
        };
      };
    };
  };
  get_export_job: {
    /** @description Returns information such as export progress and state or the url of the exported file for the specified export job, only if the requesting user has access. */
    parameters: {
        /** @description The job id to lookup information about. */
      path: {
        job_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExportJob"];
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_EXPORT_JOB_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  export_table: {
    /** @description Creates and starts a new export job for a table given some exporter options. Returns an error if the requesting user does not have permissionsto view the table. */
    parameters: {
        /** @description The table id to create and start an export job for */
      path: {
        table_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Export"];
        "application/x-www-form-urlencoded": components["schemas"]["Export"];
        "multipart/form-data": components["schemas"]["Export"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExportJob"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_TABLE_ONLY_EXPORT_UNSUPPORTED" | "ERROR_VIEW_UNSUPPORTED_FOR_EXPORT_TYPE" | "ERROR_VIEW_NOT_IN_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_table_field: {
    /** @description Returns the existing field if the authorized user has access to the related database's group. Depending on the type different properties could be returned. */
    parameters: {
        /** @description Returns the field related to the provided value. */
      path: {
        field_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FieldField"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_FIELD_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_database_table_field: {
    /** @description Deletes the existing field if the authorized user has access to the related database's group. Note that all the related data to that field is also deleted. Primary fields cannot be deleted because their value represents the row. If deleting the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Deletes the field related to the provided value. */
      path: {
        field_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RelatedFields"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_CANNOT_DELETE_PRIMARY_FIELD" | "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_FIELD_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_database_table_field: {
    /** @description Updates the existing field if the authorized user has access to the related database's group. The type can also be changed and depending on that type, different additional properties can optionally be set. If you change the field type it could happen that the data conversion fails, in that case the `ERROR_CANNOT_CHANGE_FIELD_TYPE` is returned, but this rarely happens. If a data value cannot be converted it is set to `null` so data might go lost.If updated the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the field related to the provided value. */
      path: {
        field_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedFieldUpdateField"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedFieldUpdateField"];
        "multipart/form-data": components["schemas"]["PatchedFieldUpdateField"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FieldFieldSerializerWithRelatedFields"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_CANNOT_CHANGE_FIELD_TYPE" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_RESERVED_BASEROW_FIELD_NAME" | "ERROR_FIELD_WITH_SAME_NAME_ALREADY_EXISTS" | "ERROR_INVALID_BASEROW_FIELD_NAME" | "ERROR_FIELD_SELF_REFERENCE" | "ERROR_FIELD_CIRCULAR_REFERENCE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_FIELD_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  duplicate_table_field: {
    /** @description Duplicates the table with the provided `table_id` parameter if the authorized user has access to the database's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description The field to duplicate. */
      path: {
        field_id: number;
      };
    };
    responses: {
      202: {
        content: {
          "application/json": components["schemas"]["DuplicateFieldJobJob"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_MAX_JOB_COUNT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_FIELD_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_field_unique_row_values: {
    /** @description Returns a list of all the unique row values for an existing field, sorted in order of frequency. */
    parameters: {
        /** @description Defines how many values should be returned. */
        /** @description Indicates whether the original column values must be splitted by comma. */
      query: {
        limit?: number;
        split_comma_separated?: boolean;
      };
        /** @description Returns the values related to the provided field. */
      path: {
        field_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UniqueRowValues"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_FIELD_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_table_fields: {
    /** @description Lists all the fields of the table related to the provided parameter if the user has access to the related database's group. If the group is related to a template, then this endpoint will be publicly accessible. A table consists of fields and each field can have a different type. Each type can have different properties. A field is comparable with a regular table's column. */
    parameters: {
        /** @description Returns only the fields of the table related to the provided value. */
      path: {
        table_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["FieldField"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_database_table_field: {
    /** @description Creates a new field for the table related to the provided `table_id` parameter if the authorized user has access to the related database's group. Depending on the type, different properties can optionally be set.If creating the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Creates a new field for the provided table related to the value. */
      path: {
        table_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["FieldCreateField"];
        "application/x-www-form-urlencoded": components["schemas"]["FieldCreateField"];
        "multipart/form-data": components["schemas"]["FieldCreateField"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FieldFieldSerializerWithRelatedFields"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_MAX_FIELD_COUNT_EXCEEDED" | "ERROR_RESERVED_BASEROW_FIELD_NAME" | "ERROR_FIELD_WITH_SAME_NAME_ALREADY_EXISTS" | "ERROR_INVALID_BASEROW_FIELD_NAME" | "ERROR_FIELD_SELF_REFERENCE" | "ERROR_FIELD_CIRCULAR_REFERENCE";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  type_formula_field: {
    /** @description Calculates and returns the type of the specified formula value. Does not change the state of the field in any way. */
    parameters: {
        /** @description The table id of the formula field to type. */
      path: {
        table_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TypeFormulaRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TypeFormulaRequest"];
        "multipart/form-data": components["schemas"]["TypeFormulaRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TypeFormulaResult"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_WITH_FORMULA" | "ERROR_FIELD_SELF_REFERENCE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_table_row_names: {
    /** @description Returns the names of the given row of the given tables. The nameof a row is the primary field value for this row. The result can be usedfor example, when you want to display the name of a linked row from another table. */
    parameters: {
        /** @description A list of comma separated row ids to query from the table with id {id}. For example, if you want the name of row `42` and `43` from table `28` this parameter will be `table__28=42,43`. You can specify multiple rows for different tables but every tables must be in the same database. You need at least read permission on all specified tables. */
      query: {
        "table__{id}"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @description An object containing the row names of table `table_id`. */
            "{table_id}*"?: {
              /** @description the name of the row with id `row_id` from table with id `table_id`. */
              "{row_id}*"?: string;
            };
          };
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_table_rows: {
    /** @description Lists all the rows of the table related to the provided parameter if the user has access to the related database's group. The response is paginated by a page/size style. It is also possible to provide an optional search query, only rows where the data matches the search query are going to be returned then. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type. */
    parameters: {
        /** @description All the fields are included in the response by default. You can select a subset of fields by providing the exclude query parameter. If you for example provide the following GET parameter `exclude=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. If the `user_field_names` parameter is provided then instead exclude should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `exclude=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `exclude=My Field,Field with \"`. */
        /**
         * @description The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.
         * 
         * For example if you provide the following GET parameter `filter__field_1__equal=test` then only rows where the value of field_1 is equal to test are going to be returned.
         * 
         * The following filters are available: equal, not_equal, filename_contains, has_file_type, contains, contains_not, length_is_lower_than, higher_than, lower_than, date_equal, date_before, date_after, date_not_equal, date_equals_today, date_before_today, date_after_today, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, single_select_equal, single_select_not_equal, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not.
         */
        /**
         * @description `AND`: Indicates that the rows must match all the provided filters.
         * `OR`: Indicates that the rows only have to match one of the filters.
         * 
         * This works only if two or more filters are provided.
         */
        /** @description All the fields are included in the response by default. You can select a subset of fields by providing the include query parameter. If you for example provide the following GET parameter `include=field_1,field_2` then only the fields withid `1` and id `2` are going to be selected and included in the response. If the `user_field_names` parameter is provided then instead include should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `include=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `include=My Field,Field with \"`. */
        /** @description Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a '-' it can be ordered descending (Z-A). If the `user_field_names` parameter is provided then instead order_by should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `order_by=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `order_by=My Field,Field with \"`. */
        /** @description Defines which page of rows should be returned. */
        /** @description If provided only rows with data that matches the search query are going to be returned. */
        /** @description Defines how many rows should be returned per page. */
        /** @description A flag query parameter which if provided the returned json will use the user specified field names instead of internal Baserow field names (field_123 etc). */
        /** @description Includes all the filters and sorts of the provided view. */
      query: {
        exclude?: string;
        "filter__{field}__{filter}"?: string;
        filter_type?: string;
        include?: string;
        order_by?: string;
        page?: number;
        search?: string;
        size?: number;
        user_field_names?: boolean;
        view_id?: number;
      };
        /** @description Returns the rows of the table related to the provided value. */
      path: {
        table_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSerializerExampleRowResponseSerializerWithUserFieldNames"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_PAGE_SIZE_LIMIT" | "ERROR_INVALID_PAGE" | "ERROR_ORDER_BY_FIELD_NOT_FOUND" | "ERROR_ORDER_BY_FIELD_NOT_POSSIBLE" | "ERROR_FILTER_FIELD_NOT_FOUND" | "ERROR_VIEW_FILTER_TYPE_DOES_NOT_EXIST" | "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_FIELD_DOES_NOT_EXIST" | "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_database_table_row: {
    /** @description Creates a new row in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided. */
    parameters: {
        /** @description If provided then the newly created row will be positioned before the row with the provided id. */
        /** @description A flag query parameter which if provided this endpoint will expect and return the user specified field names instead of internal Baserow field names (field_123 etc). */
      query: {
        before?: number;
        user_field_names?: boolean;
      };
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Creates a row in the table related to the provided value. */
      path: {
        table_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ExampleRowRequestSerializerWithUserFieldNames"];
        "application/x-www-form-urlencoded": components["schemas"]["ExampleRowRequestSerializerWithUserFieldNames"];
        "multipart/form-data": components["schemas"]["ExampleRowRequestSerializerWithUserFieldNames"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExampleRowResponseSerializerWithUserFieldNames"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_ROW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_table_row: {
    /** @description Fetches an existing row from the table if the user has access to the related table's group. The properties of the returned row depend on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type. */
    parameters: {
        /** @description A flag query parameter which if provided the returned json will use the user specified field names instead of internal Baserow field names (field_123 etc). */
      query: {
        user_field_names?: boolean;
      };
        /** @description Returns the row related the provided value. */
        /** @description Returns the row of the table related to the provided value. */
      path: {
        row_id: number;
        table_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExampleRowResponseSerializerWithUserFieldNames"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_ROW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_database_table_row: {
    /** @description Deletes an existing row in the table if the user has access to the table's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Deletes the row related to the value. */
        /** @description Deletes the row in the table related to the value. */
      path: {
        row_id: number;
        table_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_ROW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_database_table_row: {
    /** @description Updates an existing row in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided. */
    parameters: {
        /** @description A flag query parameter which if provided this endpoint will expect and return the user specified field names instead of internal Baserow field names (field_123 etc). */
      query: {
        user_field_names?: boolean;
      };
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the row related to the value. */
        /** @description Updates the row in the table related to the value. */
      path: {
        row_id: number;
        table_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedExampleUpdateRowRequestSerializerWithUserFieldNames"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedExampleUpdateRowRequestSerializerWithUserFieldNames"];
        "multipart/form-data": components["schemas"]["PatchedExampleUpdateRowRequestSerializerWithUserFieldNames"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExampleRowResponseSerializerWithUserFieldNames"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_ROW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_adjacent_database_table_row: {
    /** @description Fetches the adjacent row to a given row_id in the table with the given table_id. If the previous flag is set it will return the previous row, otherwise it will return the next row. You can specifya view_id and it will apply the filters and sorts of the provided view. */
    parameters: {
        /** @description A flag query parameter which if provided returns theprevious row to the specified row_id. If it's not setit will return the next row. */
        /** @description If provided, the adjacent row will be one that matchesthe search query. */
        /** @description A flag query parameter which if provided the returned json will use the user specified field names instead of internal Baserow field names (field_123 etc). */
        /** @description Applies the filters and sorts of the provided view. */
      query: {
        previous?: boolean;
        search?: string;
        user_field_names?: boolean;
        view_id?: number;
      };
        /** @description Returns the row adjacent the provided value. */
        /** @description Returns the row of the table related to the provided value. */
      path: {
        row_id: number;
        table_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExampleRowResponseSerializerWithUserFieldNames"];
        };
      };
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_ROW_DOES_NOT_EXIST" | "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  move_database_table_row: {
    /** @description Moves the row related to given `row_id` parameter to another position. It is only possible to move the row before another existing row or to the end. If the `before_id` is provided then the row related to the `row_id` parameter is moved before that row. If the `before_id` parameter is not provided, then the row will be moved to the end. */
    parameters: {
        /** @description Moves the row related to the given `row_id` before the row related to the provided value. If not provided, then the row will be moved to the end. */
        /** @description A flag query parameter which if provided the returned json will use the user specified field names instead of internal Baserow field names (field_123 etc). */
      query: {
        before_id?: number;
        user_field_names?: boolean;
      };
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Moves the row related to the value. */
        /** @description Moves the row in the table related to the value. */
      path: {
        row_id: number;
        table_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExampleRowResponseSerializerWithUserFieldNames"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_ROW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  batch_create_database_table_rows: {
    /**
     * @description Creates new rows in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * 
     *  **WARNING:** This endpoint doesn't yet work with row created webhooks.
     */
    parameters: {
        /** @description If provided then the newly created rows will be positioned before the row with the provided id. */
        /** @description A flag query parameter which if provided this endpoint will expect and return the user specified field names instead of internal Baserow field names (field_123 etc). */
      query: {
        before?: number;
        user_field_names?: boolean;
      };
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Creates the rows in the table. */
      path: {
        table_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExampleBatchRowsRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ExampleBatchRowsRequest"];
        "multipart/form-data": components["schemas"]["ExampleBatchRowsRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExampleBatchRowsResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_ROW_IDS_NOT_UNIQUE" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_ROW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  batch_update_database_table_rows: {
    /**
     * @description Updates existing rows in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided for each row. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.
     * 
     *  **WARNING:** This endpoint doesn't yet work with row updated webhooks.
     */
    parameters: {
        /** @description A flag query parameter which if provided this endpoint will expect and return the user specified field names instead of internal Baserow field names (field_123 etc). */
      query: {
        user_field_names?: boolean;
      };
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the rows in the table. */
      path: {
        table_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedExampleBatchUpdateRowsRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedExampleBatchUpdateRowsRequest"];
        "multipart/form-data": components["schemas"]["PatchedExampleBatchUpdateRowsRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExampleBatchRowsResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_ROW_IDS_NOT_UNIQUE" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_ROW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  batch_delete_database_table_rows: {
    /**
     * @description Deletes existing rows in the table if the user has access to the table's group.
     * 
     *  **WARNING:**  This endpoint doesn't yet work with row deleted webhooks.
     */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Deletes the rows in the table related to the value. */
      path: {
        table_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchDeleteRows"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchDeleteRows"];
        "multipart/form-data": components["schemas"]["BatchDeleteRows"];
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM" | "ERROR_ROW_IDS_NOT_UNIQUE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_ROW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_table: {
    /** @description Returns the requested table if the authorized user has access to the related database's group. */
    parameters: {
        /** @description Returns the table related to the provided value. */
      path: {
        table_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Table"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_database_table: {
    /** @description Deletes the existing table if the authorized user has access to the related database's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Deletes the table related to the provided value. */
      path: {
        table_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_database_table: {
    /** @description Updates the existing table if the authorized user has access to the related database's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the table related to the provided value. */
      path: {
        table_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTableUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTableUpdate"];
        "multipart/form-data": components["schemas"]["PatchedTableUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Table"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  duplicate_database_table_async: {
    /** @description Start a job to duplicate the table with the provided `table_id` parameter if the authorized user has access to the database's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description The table to duplicate. */
      path: {
        table_id: number;
      };
    };
    responses: {
      202: {
        content: {
          "application/json": components["schemas"]["DuplicateTableJobJob"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_MAX_JOB_COUNT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  import_data_database_table_async: {
    /** @description Import data in the specified table if the authorized user has access to the related database's group. This endpoint is asynchronous and return the created job to track the progress of the task. */
    parameters: {
        /** @description Import data into the table related to the provided value. */
      path: {
        table_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TableImport"];
        "application/x-www-form-urlencoded": components["schemas"]["TableImport"];
        "multipart/form-data": components["schemas"]["TableImport"];
      };
    };
    responses: {
      202: {
        content: {
          "application/json": components["schemas"]["FileImportJobJob"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_tables: {
    /** @description Lists all the tables that are in the database related to the `database_id` parameter if the user has access to the database's group. A table is exactly as the name suggests. It can hold multiple fields, each having their own type and multiple rows. They can be added via the **create_database_table_field** and **create_database_table_row** endpoints. */
    parameters: {
        /** @description Returns only tables that are related to the provided value. */
      path: {
        database_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Table"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_database_table: {
    /**
     * @description Creates synchronously a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database's group.
     * 
     * As an alternative you can use the `create_async_database_table` for better performances and importing bigger files.
     */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Creates a table for the database related to the provided value. */
      path: {
        database_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TableCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["TableCreate"];
        "multipart/form-data": components["schemas"]["TableCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Table"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_INVALID_INITIAL_TABLE_DATA" | "ERROR_INITIAL_TABLE_DATA_LIMIT_EXCEEDED" | "ERROR_RESERVED_BASEROW_FIELD_NAME" | "ERROR_INITIAL_TABLE_DATA_HAS_DUPLICATE_NAMES" | "ERROR_INVALID_BASEROW_FIELD_NAME" | "ERROR_MAX_JOB_COUNT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_database_table_async: {
    /** @description Creates a job that creates a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database's group. This endpoint is asynchronous and return the created job to track the progress of the task. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
      header: {
        ClientSessionId?: string;
      };
        /** @description Creates a table for the database related to the provided value. */
      path: {
        database_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TableCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["TableCreate"];
        "multipart/form-data": components["schemas"]["TableCreate"];
      };
    };
    responses: {
      202: {
        content: {
          "application/json": components["schemas"]["FileImportJobJob"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_MAX_JOB_COUNT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  order_database_tables: {
    /** @description Changes the order of the provided table ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the order of the tables in the database related to the provided value. */
      path: {
        database_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderTables"];
        "application/x-www-form-urlencoded": components["schemas"]["OrderTables"];
        "multipart/form-data": components["schemas"]["OrderTables"];
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_TABLE_NOT_IN_DATABASE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_tokens: {
    /** @description Lists all the database tokens that belong to the authorized user. A token can be used to create, read, update and delete rows in the tables of the token's group. It only works on the tables if the token has the correct permissions. The **Database table rows** endpoints can be used for these operations. */
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Token"])[];
        };
      };
    };
  };
  create_database_token: {
    /** @description Creates a new database token for a given group and for the authorized user. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenCreate"];
        "multipart/form-data": components["schemas"]["TokenCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_token: {
    /** @description Returns the requested database token if it is owned by the authorized user andif the user has access to the related group. */
    parameters: {
        /** @description Returns the database token related to the provided value. */
      path: {
        token_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TOKEN_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_database_token: {
    /** @description Deletes the existing database token if it is owned by the authorized user and ifthe user has access to the related group. */
    parameters: {
        /** @description Deletes the database token related to the provided value. */
      path: {
        token_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TOKEN_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_database_token: {
    /** @description Updates the existing database token if it is owned by the authorized user and ifthe user has access to the related group. */
    parameters: {
        /** @description Updates the database token related to the provided value. */
      path: {
        token_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTokenUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTokenUpdate"];
        "multipart/form-data": components["schemas"]["PatchedTokenUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_DATABASE_DOES_NOT_BELONG_TO_GROUP" | "ERROR_TABLE_DOES_NOT_BELONG_TO_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TOKEN_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  check_database_token: {
    /** @description This endpoint check be used to check if the provided personal API token is valid. If returns a `200` response if so and a `403` is not. This can be used by integrations like Zapier or n8n to test if a token is valid. */
    responses: {
      /** @description No response body */
      200: never;
      403: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TOKEN_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  premium_view_attributes_update: {
    /** @description Sets view attributes only available for premium users. */
    parameters: {
        /** @description Sets show_logo of this view. */
      path: {
        view_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUpdatePremiumViewAttributes"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUpdatePremiumViewAttributes"];
        "multipart/form-data": components["schemas"]["PatchedUpdatePremiumViewAttributes"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["View"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_FEATURE_NOT_AVAILABLE" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_CANNOT_UPDATE_PREMIUM_ATTRIBUTES_ON_TEMPLATE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  database_table_public_view_link_row_field_lookup: {
    /** @description If the view is publicly shared or if an authenticated user has access to the related group, then this endpoint can be used to do a value lookup of the link row fields that are included in the view. Normally it is not possible for a not authenticated visitor to fetch the rows of a table. This endpoint makes it possible to fetch the id and primary field value of the related table of a link row included in the view. */
    parameters: {
        /** @description The field id of the link row field. */
        /** @description The slug related to the view. */
      path: {
        field_id: number;
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSerializerLinkRowValue"];
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_AUTHORIZATION_TO_PUBLICLY_SHARED_VIEW";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST" | "ERROR_FIELD_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  public_view_token_auth: {
    /** @description Returns a valid never-expiring JWT token for this public shared view if the password provided matches with the one saved by the view's owner. */
    parameters: {
        /** @description The slug of the grid view to get public information about. */
      path: {
        slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PublicViewAuthRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PublicViewAuthRequest"];
        "multipart/form-data": components["schemas"]["PublicViewAuthRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PublicViewAuthResponse"];
        };
      };
      401: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_public_view_info: {
    /** @description Returns the required public information to display a single shared view. */
    parameters: {
        /** @description The slug of the view to get public information about. */
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PublicViewInfo"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_AUTHORIZATION_TO_PUBLICLY_SHARED_VIEW";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_table_view: {
    /** @description Returns the existing view if the authorized user has access to the related database's group. Depending on the type different propertiescould be returned. */
    parameters: {
        /** @description A comma separated list of extra attributes to include on the returned view. The supported attributes are `filters`, `sortings` and `decorations`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively. */
      query: {
        include?: string;
      };
        /** @description Returns the view related to the provided value. */
      path: {
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewView"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_database_table_view: {
    /** @description Deletes the existing view if the authorized user has access to the related database's group. Note that all the related settings of the view are going to be deleted also. The data stays intact after deleting the view because this is related to the table and not the view. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Deletes the view related to the provided value. */
      path: {
        view_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_database_table_view: {
    /** @description Updates the existing view if the authorized user has access to the related database's group. The type cannot be changed. It depends on the existing type which properties can be changed. */
    parameters: {
        /** @description A comma separated list of extra attributes to include on the returned view. The supported attributes are `filters`, `sortings` and `decorations`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively. */
      query: {
        include?: string;
      };
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the view related to the provided value. */
      path: {
        view_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedViewUpdateView"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedViewUpdateView"];
        "multipart/form-data": components["schemas"]["PatchedViewUpdateView"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewView"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_FIELD_NOT_IN_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_table_view_decorations: {
    /** @description Lists all decorations of the view related to the provided `view_id` if the user has access to the related database's group. A view can have multiple decorations. View decorators can be used to decorate rows. This can, for example, be used to change the border or background color of a row if it matches certain conditions. */
    parameters: {
        /** @description Returns only decoration of the view given to the provided value. */
      path: {
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Decorator_Value_Provider_TypeViewDecoration"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_database_table_view_decoration: {
    /** @description Creates a new decoration for the view related to the provided `view_id` parameter if the authorized user has access to the related database's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Creates a decoration for the view related to the given value. */
      path: {
        view_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Decorator_Value_Provider_TypeCreateViewDecoration"];
        "application/x-www-form-urlencoded": components["schemas"]["Decorator_Value_Provider_TypeCreateViewDecoration"];
        "multipart/form-data": components["schemas"]["Decorator_Value_Provider_TypeCreateViewDecoration"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Decorator_Value_Provider_TypeViewDecoration"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  duplicate_database_table_view: {
    /**
     * @description Duplicates an existing view if the user has access to it. When a view is duplicated everything is copied except:
     * - The name is appended with the copy number. Ex: `View Name` -> `View Name (2)` and `View (2)` -> `View (3)`
     * - If the original view is publicly shared, the new view will not be shared anymore
     */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Duplicates the view related to the provided value. */
      path: {
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewView"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_table_view_field_options: {
    /** @description Responds with the fields options of the provided view if the authenticated user has access to the related group. */
    parameters: {
        /** @description Responds with field options related to the provided value. */
      path: {
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewFieldOptions"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_VIEW_DOES_NOT_SUPPORT_FIELD_OPTIONS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_database_table_view_field_options: {
    /** @description Updates the field options of a view. The field options differ per field type  This could for example be used to update the field width of a `grid` view if the user changes it. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the field options related to the provided value. */
      path: {
        view_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedViewFieldOptions"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedViewFieldOptions"];
        "multipart/form-data": components["schemas"]["PatchedViewFieldOptions"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewFieldOptions"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_VIEW_DOES_NOT_SUPPORT_FIELD_OPTIONS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_table_view_filters: {
    /** @description Lists all filters of the view related to the provided `view_id` if the user has access to the related database's group. A view can have multiple filters. When all the rows are requested for the view only those that apply to the filters are returned. */
    parameters: {
        /** @description Returns only filters of the view related to the provided value. */
      path: {
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["ViewFilter"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_database_table_view_filter: {
    /** @description Creates a new filter for the view related to the provided `view_id` parameter if the authorized user has access to the related database's group. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, then only the rows that apply to all the filters are going to be returned. A filter compares the value of a field to the value of a filter. It depends on the type how values are going to be compared. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Creates a filter for the view related to the provided value. */
      path: {
        view_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateViewFilter"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateViewFilter"];
        "multipart/form-data": components["schemas"]["CreateViewFilter"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewFilter"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_FIELD_NOT_IN_TABLE" | "ERROR_VIEW_FILTER_NOT_SUPPORTED" | "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  rotate_database_view_slug: {
    /** @description Rotates the unique slug of the view by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won't be able to access the viewanymore. Only view types which are sharable can have their slugs rotated. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Rotates the slug of the view related to the provided value. */
      path: {
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewView"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_CANNOT_SHARE_VIEW_TYPE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_table_view_sortings: {
    /** @description Lists all sortings of the view related to the provided `view_id` if the user has access to the related database's group. A view can have multiple sortings. When all the rows are requested they will be in the desired order. */
    parameters: {
        /** @description Returns only sortings of the view related to the provided value. */
      path: {
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["ViewSort"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_database_table_view_sort: {
    /** @description Creates a new sort for the view related to the provided `view_id` parameter if the authorized user has access to the related database's group. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, they will be returned in the respected order defined by all the sortings. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Creates a sort for the view related to the provided value. */
      path: {
        view_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateViewSort"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateViewSort"];
        "multipart/form-data": components["schemas"]["CreateViewSort"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewSort"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_VIEW_SORT_NOT_SUPPORTED" | "ERROR_FIELD_NOT_IN_TABLE" | "ERROR_VIEW_SORT_FIELD_ALREADY_EXISTS" | "ERROR_VIEW_SORT_FIELD_NOT_SUPPORTED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_table_view_decoration: {
    /** @description Returns the existing view decoration if the current user has access to the related database's group. */
    parameters: {
        /** @description Returns the view decoration related to the provided id. */
      path: {
        view_decoration_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Decorator_Value_Provider_TypeViewDecoration"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DECORATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_database_table_view_decoration: {
    /** @description Deletes the existing decoration if the authorized user has access to the related database's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Deletes the decoration related to the provided value. */
      path: {
        view_decoration_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DECORATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_database_table_view_decoration: {
    /** @description Updates the existing decoration if the authorized user has access to the related database's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the view decoration related to the provided value. */
      path: {
        view_decoration_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDecorator_Value_Provider_TypeUpdateViewDecoration"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDecorator_Value_Provider_TypeUpdateViewDecoration"];
        "multipart/form-data": components["schemas"]["PatchedDecorator_Value_Provider_TypeUpdateViewDecoration"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Decorator_Value_Provider_TypeViewDecoration"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DECORATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_table_view_filter: {
    /** @description Returns the existing view filter if the authorized user has access to the related database's group. */
    parameters: {
        /** @description Returns the view filter related to the provided value. */
      path: {
        view_filter_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewFilter"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_FILTER_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_database_table_view_filter: {
    /** @description Deletes the existing filter if the authorized user has access to the related database's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Deletes the filter related to the provided value. */
      path: {
        view_filter_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_FILTER_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_database_table_view_filter: {
    /** @description Updates the existing filter if the authorized user has access to the related database's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the view filter related to the provided value. */
      path: {
        view_filter_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUpdateViewFilter"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUpdateViewFilter"];
        "multipart/form-data": components["schemas"]["PatchedUpdateViewFilter"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewFilter"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_FIELD_NOT_IN_TABLE" | "ERROR_VIEW_FILTER_NOT_SUPPORTED" | "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_FILTER_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_meta_database_table_form_view: {
    /** @description Returns the meta data related to the form view if the form is publicly shared or if the user has access to the related group. This data can be used to construct a form with the right fields. */
    parameters: {
        /** @description The slug related to the form form. */
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PublicFormView"];
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_PUBLICLY_SHARED_FORM";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_FORM_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  submit_database_table_form_view: {
    /** @description Submits the form if the form is publicly shared or if the user has access to the related group. The provided data will be validated based on the fields that are in the form and the rules per field. If valid, a new row will be created in the table. */
    parameters: {
        /** @description The slug related to the form. */
      path: {
        slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ExampleRowRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ExampleRowRequest"];
        "multipart/form-data": components["schemas"]["ExampleRowRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FormViewSubmitted"];
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_PERMISSION_TO_PUBLICLY_SHARED_FORM";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_FORM_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  upload_file_form_view: {
    /** @description Uploads a file anonymously to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents. */
    parameters: {
        /** @description Submits files only if the view with the provided slughas a public file field. */
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserFile"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_INVALID_FILE" | "ERROR_FILE_SIZE_TOO_LARGE" | "ERROR_VIEW_HAS_NO_PUBLIC_FILE_FIELD";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_AUTHORIZATION_TO_PUBLICLY_SHARED_VIEW";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  public_list_database_table_gallery_view_rows: {
    /** @description Lists the requested rows of the view's table related to the provided `slug` if the gallery view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type. */
    parameters: {
        /** @description If provided only the count will be returned. */
        /** @description All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter `exclude_fields=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. */
        /**
         * @description The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.
         * 
         * For example if you provide the following GET parameter `filter__field_1__equal=test` then only rows where the value of field_1 is equal to test are going to be returned.
         * 
         * The following filters are available: equal, not_equal, filename_contains, has_file_type, contains, contains_not, length_is_lower_than, higher_than, lower_than, date_equal, date_before, date_after, date_not_equal, date_equals_today, date_before_today, date_after_today, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, single_select_equal, single_select_not_equal, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not.
         */
        /**
         * @description `AND`: Indicates that the rows must match all the provided filters.
         * `OR`: Indicates that the rows only have to match one of the filters.
         * 
         * This works only if two or more filters are provided.
         */
        /** @description A comma separated list allowing the values of `field_options` which will add the object/objects with the same name to the response if included. The `field_options` object contains user defined view settings for each field. For example the field's width is included in here. */
        /** @description All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter `include_fields=field_1,field_2` then only the fields with id `1` and id `2` are going to be selected and included in the response. */
        /** @description Defines how many rows should be returned. */
        /** @description Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned. */
        /** @description Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a '-' it can be ordered descending (Z-A). */
        /** @description Defines which page of rows should be returned. Either the `page` or `limit` can be provided, not both. */
        /** @description If provided only rows with data that matches the search query are going to be returned. */
        /** @description Can only be used in combination with the `page` parameter and defines how many rows should be returned. */
      query: {
        count?: boolean;
        exclude_fields?: string;
        "filter__{field}__{filter}"?: string;
        filter_type?: string;
        include?: string;
        include_fields?: string;
        limit?: number;
        offset?: number;
        order_by?: string;
        page?: number;
        search?: string;
        size?: number;
      };
        /** @description Returns only rows that belong to the related view. */
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PublicPaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_AUTHORIZATION_TO_PUBLICLY_SHARED_VIEW";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GALLERY_DOES_NOT_EXIST" | "ERROR_FIELD_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_table_gallery_view_rows: {
    /** @description Lists the requested rows of the view's table related to the provided `view_id` if the authorized user has access to the database's group. The response is paginated by a limit/offset style. */
    parameters: {
        /** @description If provided only the count will be returned. */
        /** @description A comma separated list allowing the values of `field_options` which will add the object/objects with the same name to the response if included. The `field_options` object contains user defined view settings for each field. For example the field's order is included in here. */
        /** @description Defines how many rows should be returned. */
        /** @description Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned. */
        /** @description If provided only rows with data that matches the search query are going to be returned. */
      query: {
        count?: boolean;
        include?: string;
        limit?: number;
        offset?: number;
        search?: string;
      };
        /** @description Returns only rows that belong to the related view's table. */
      path: {
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GALLERY_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  public_list_database_table_grid_view_rows: {
    /** @description Lists the requested rows of the view's table related to the provided `slug` if the grid view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type. */
    parameters: {
        /** @description If provided only the count will be returned. */
        /** @description All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter `exclude_fields=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. */
        /**
         * @description The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.
         * 
         * For example if you provide the following GET parameter `filter__field_1__equal=test` then only rows where the value of field_1 is equal to test are going to be returned.
         * 
         * The following filters are available: equal, not_equal, filename_contains, has_file_type, contains, contains_not, length_is_lower_than, higher_than, lower_than, date_equal, date_before, date_after, date_not_equal, date_equals_today, date_before_today, date_after_today, date_equals_days_ago, date_equals_months_ago, date_equals_years_ago, date_equals_week, date_equals_month, date_equals_day_of_month, date_equals_year, single_select_equal, single_select_not_equal, link_row_has, link_row_has_not, link_row_contains, link_row_not_contains, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not, multiple_collaborators_has, multiple_collaborators_has_not.
         */
        /**
         * @description `AND`: Indicates that the rows must match all the provided filters.
         * `OR`: Indicates that the rows only have to match one of the filters.
         * 
         * This works only if two or more filters are provided.
         */
        /** @description A comma separated list allowing the values of `field_options` which will add the object/objects with the same name to the response if included. The `field_options` object contains user defined view settings for each field. For example the field's width is included in here. */
        /** @description All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter `include_fields=field_1,field_2` then only the fields with id `1` and id `2` are going to be selected and included in the response. */
        /** @description Defines how many rows should be returned. */
        /** @description Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned. */
        /** @description Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a '-' it can be ordered descending (Z-A). */
        /** @description Defines which page of rows should be returned. Either the `page` or `limit` can be provided, not both. */
        /** @description If provided only rows with data that matches the search query are going to be returned. */
        /** @description Can only be used in combination with the `page` parameter and defines how many rows should be returned. */
      query: {
        count?: boolean;
        exclude_fields?: string;
        "filter__{field}__{filter}"?: string;
        filter_type?: string;
        include?: string;
        include_fields?: string;
        limit?: number;
        offset?: number;
        order_by?: string;
        page?: number;
        search?: string;
        size?: number;
      };
        /** @description Returns only rows that belong to the related view. */
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_AUTHORIZATION_TO_PUBLICLY_SHARED_VIEW";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GRID_DOES_NOT_EXIST" | "ERROR_FIELD_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_table_grid_view_rows: {
    /**
     * @description Lists the requested rows of the view's table related to the provided `view_id` if the authorized user has access to the database's group. The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.
     * 
     * The filters and sortings are automatically applied. To get a full overview of the applied filters and sortings you can use the `list_database_table_view_filters` and `list_database_table_view_sortings` endpoints.
     */
    parameters: {
        /** @description If provided only the count will be returned. */
        /** @description All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter `exclude_fields=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. */
        /** @description A comma separated list allowing the values of `field_options` and `row_metadata` which will add the object/objects with the same name to the response if included. The `field_options` object contains user defined view settings for each field. For example the field's width is included in here. The `row_metadata` object includes extra row specific data on a per row basis. */
        /** @description All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter `include_fields=field_1,field_2` then only the fields with id `1` and id `2` are going to be selected and included in the response. */
        /** @description Defines how many rows should be returned. */
        /** @description Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned. */
        /** @description Defines which page of rows should be returned. Either the `page` or `limit` can be provided, not both. */
        /** @description If provided only rows with data that matches the search query are going to be returned. */
        /** @description Can only be used in combination with the `page` parameter and defines how many rows should be returned. */
      query: {
        count?: boolean;
        exclude_fields?: string;
        include?: string;
        include_fields?: string;
        limit?: number;
        offset?: number;
        page?: number;
        search?: string;
        size?: number;
      };
        /** @description Returns only rows that belong to the related view's table. */
      path: {
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSerializerWithGridViewFieldOptionsExampleRowResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GRID_DOES_NOT_EXIST" | "ERROR_FIELD_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  filter_database_table_grid_view_rows: {
    /** @description Lists only the rows and fields that match the request. Only the rows with the ids that are in the `row_ids` list are going to be returned. Same goes for the fields, only the fields with the ids in the `field_ids` are going to be returned. This endpoint could be used to refresh data after changes something. For example in the web frontend after changing a field type, the data of the related cells will be refreshed using this endpoint. In the example all field types are listed, but normally  the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type. */
    parameters: {
        /** @description Returns only rows that belong to the related view's table. */
      path: {
        view_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GridViewFilter"];
        "application/x-www-form-urlencoded": components["schemas"]["GridViewFilter"];
        "multipart/form-data": components["schemas"]["GridViewFilter"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["ExampleRowResponse"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GRID_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_table_grid_view_field_aggregation: {
    /** @description Computes the aggregation of all the values for a specified field from the selected grid view. You must select the aggregation type by setting the `type` GET parameter. If filters are configured for the selected view, the aggregation is calculated only on filtered rows. You need to have read permissions on the view to request an aggregation. */
    parameters: {
        /** @description if `include` is set to `total`, the total row count will be returned with the result. */
        /** @description The aggregation type you want. Available aggregation types: empty_count, not_empty_count, unique_count, min, max, sum, average, median, decile, variance, std_dev */
      query: {
        include?: string;
        type?: string;
      };
        /** @description The field id you want to aggregate */
        /** @description Select the view you want the aggregation for. */
      path: {
        field_id: number;
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            value: number | string | (Record<string, never>)[] | Record<string, never>;
            /**
             * @description The total value count. Only returned if `include=total` is specified as GET parameter. 
             * @example 7
             */
            total?: number;
          };
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_AGGREGATION_TYPE_DOES_NOT_EXIST" | "ERROR_FIELD_NOT_IN_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_FIELD_DOES_NOT_EXIST" | "ERROR_GRID_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_table_grid_view_field_aggregations: {
    /** @description Returns all field aggregations values previously defined for this grid view. If filters exist for this view, the aggregations are computed only on filtered rows.You need to have read permissions on the view to request aggregations. */
    parameters: {
        /** @description if `include` is set to `total`, the total row count will be returned with the result. */
        /** @description If provided the aggregations are calculated only for matching rows. */
      query: {
        include?: string;
        search?: string;
      };
        /** @description Select the view you want the aggregations for. */
      path: {
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            "field_{id}"?: number | string | (Record<string, never>)[] | Record<string, never>;
            /**
             * @description The total value count. Only returned if `include=total` is specified as GET parameter. 
             * @example 7
             */
            total?: number;
          };
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GRID_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  public_list_database_table_kanban_view_rows: {
    /**
     * @description Responds with serialized rows grouped by the view's single select field options related to the `slug` if the kanban view is publicly shared. Additional query parameters can be provided to control the `limit` and `offset` per select option. 
     * 
     * This is a **premium** feature.
     */
    parameters: {
        /** @description Defines how many rows should be returned by default. This value can be overwritten per select option. */
        /** @description Defines from which offset the rows should be returned.This value can be overwritten per select option. */
        /** @description Accepts multiple `select_option` parameters. If not provided, the rows of all select options will be returned. If one or more `select_option` parameters are provided, then only the rows of those will be included in the response. `?select_option=1&select_option=null` will only include the rows for both select option with id `1` and `null`. `?select_option=1,10,20` will only include the rows of select option id `1` with a limit of `10` and and offset of `20`. */
      query: {
        limit?: number;
        offset?: number;
        select_option?: string;
      };
        /** @description Returns only rows that belong to the related view. */
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["KanbanViewExampleResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_KANBAN_VIEW_HAS_NO_SINGLE_SELECT_FIELD" | "ERROR_INVALID_SELECT_OPTION_PARAMETER";
            detail?: string | Record<string, never>;
          };
        };
      };
      401: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_NO_AUTHORIZATION_TO_PUBLICLY_SHARED_VIEW";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_KANBAN_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_table_kanban_view_rows: {
    /**
     * @description Responds with serialized rows grouped by the view's single select field options if the user is authenticated and has access to the related group. Additional query parameters can be provided to control the `limit` and `offset` per select option.
     * 
     * This is a **premium** feature.
     */
    parameters: {
        /** @description Accepts `field_options` as value if the field options must also be included in the response. */
        /** @description Defines how many rows should be returned by default. This value can be overwritten per select option. */
        /** @description Defines from which offset the rows should be returned.This value can be overwritten per select option. */
        /** @description Accepts multiple `select_option` parameters. If not provided, the rows of all select options will be returned. If one or more `select_option` parameters are provided, then only the rows of those will be included in the response. `?select_option=1&select_option=null` will only include the rows for both select option with id `1` and `null`. `?select_option=1,10,20` will only include the rows of select option id `1` with a limit of `10` and and offset of `20`. */
      query: {
        include?: string;
        limit?: number;
        offset?: number;
        select_option?: string;
      };
        /** @description Returns only rows that belong to the related view's table. */
      path: {
        view_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["KanbanViewExampleResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_KANBAN_VIEW_HAS_NO_SINGLE_SELECT_FIELD" | "ERROR_INVALID_SELECT_OPTION_PARAMETER" | "ERROR_FEATURE_NOT_AVAILABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_KANBAN_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_table_view_sort: {
    /** @description Returns the existing view sort if the authorized user has access to the related database's group. */
    parameters: {
        /** @description Returns the view sort related to the provided value. */
      path: {
        view_sort_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewSort"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_SORT_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_database_table_view_sort: {
    /** @description Deletes the existing sort if the authorized user has access to the related database's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Deletes the sort related to the provided value. */
      path: {
        view_sort_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_SORT_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_database_table_view_sort: {
    /** @description Updates the existing sort if the authorized user has access to the related database's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the view sort related to the provided value. */
      path: {
        view_sort_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUpdateViewSort"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUpdateViewSort"];
        "multipart/form-data": components["schemas"]["PatchedUpdateViewSort"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewSort"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_FIELD_NOT_IN_TABLE" | "ERROR_VIEW_SORT_FIELD_ALREADY_EXISTS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_VIEW_SORT_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_table_views: {
    /** @description Lists all views of the table related to the provided `table_id` if the user has access to the related database's group. If the group is related to a template, then this endpoint will be publicly accessible. A table can have multiple views. Each view can display the data in a different way. For example the `grid` view shows the in a spreadsheet like way. That type has custom endpoints for data retrieval and manipulation. In the future other views types like a calendar or Kanban are going to be added. Each type can have different properties. */
    parameters: {
        /** @description A comma separated list of extra attributes to include on each view in the response. The supported attributes are `filters`, `sortings` and `decorations`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively. */
        /** @description The maximum amount of views that must be returned. This endpoint doesn't support pagination, but if you for example just need to fetch the first view, you can do that by setting a limit. There isn't a limit by default. */
        /** @description Optionally filter on the view type. If provided, only views of that type will be returned. */
      query: {
        include?: string;
        limit?: number;
        type?: string;
      };
        /** @description Returns only views of the table related to the provided value. */
      path: {
        table_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["ViewView"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_database_table_view: {
    /** @description Creates a new view for the table related to the provided `table_id` parameter if the authorized user has access to the related database's group. Depending on the type, different properties can optionally be set. */
    parameters: {
        /** @description A comma separated list of extra attributes to include on each view in the response. The supported attributes are `filters`, `sortings` and `decorations`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively. */
      query: {
        include?: string;
      };
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Creates a view for the table related to the provided value. */
      path: {
        table_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ViewCreateView"];
        "application/x-www-form-urlencoded": components["schemas"]["ViewCreateView"];
        "multipart/form-data": components["schemas"]["ViewCreateView"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ViewView"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_FIELD_NOT_IN_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  order_database_table_views: {
    /** @description Changes the order of the provided view ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided views will be set to `0`. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the order of the views in the table related to the provided value. */
      path: {
        table_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderViews"];
        "application/x-www-form-urlencoded": components["schemas"]["OrderViews"];
        "multipart/form-data": components["schemas"]["OrderViews"];
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_VIEW_NOT_IN_TABLE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_database_table_webhook: {
    /** @description Returns the existing webhook if the authorized user has access to the related database group. */
    parameters: {
        /** @description Returns the webhook related to the provided value. */
      path: {
        webhook_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TableWebhook"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_WEBHOOK_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_database_table_webhook: {
    /** @description Deletes the existing webhook if the authorized user has access to the related database's group. */
    parameters: {
        /** @description Deletes the webhook related to the provided value. */
      path: {
        webhook_id: number;
      };
    };
    responses: {
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_WEBHOOK_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_database_table_webhook: {
    /** @description Updates the existing view if the authorized user has access to the related database group. */
    parameters: {
        /** @description Updates the webhook related to the provided value. */
      path: {
        webhook_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTableWebhookUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTableWebhookUpdateRequest"];
        "multipart/form-data": components["schemas"]["PatchedTableWebhookUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TableWebhook"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_WEBHOOK_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_database_table_webhooks: {
    /** @description Lists all webhooks of the table related to the provided `table_id` if the user has access to the related database group. */
    parameters: {
        /** @description Returns only webhooks of the table related to this value. */
      path: {
        table_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["TableWebhook"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_database_table_webhook: {
    /** @description Creates a new webhook for the table related to the provided `table_id` parameter if the authorized user has access to the related database group. */
    parameters: {
        /** @description Creates a webhook for the table related to the provided value. */
      path: {
        table_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TableWebhookCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TableWebhookCreateRequest"];
        "multipart/form-data": components["schemas"]["TableWebhookCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TableWebhook"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_TABLE_WEBHOOK_MAX_LIMIT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  test_call_database_table_webhook: {
    /** @description This endpoint triggers a test call based on the provided data if the user has access to the group related to the table. The test call will be made immediately and a copy of the request, response and status will be included in the response. */
    parameters: {
        /** @description The id of the table that must be tested. */
      path: {
        table_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TableWebhookTestCallRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TableWebhookTestCallRequest"];
        "multipart/form-data": components["schemas"]["TableWebhookTestCallRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TableWebhookTestCallResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_groups: {
    /** @description Lists all the groups of the authorized user. A group can contain multiple applications like a database. Multiple users can have access to a group. For example each company could have their own group containing databases related to that company. The order of the groups are custom for each user. The order is configurable via the **order_groups** endpoint. */
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["GroupUserGroup"])[];
        };
      };
    };
  };
  create_group: {
    /** @description Creates a new group where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
      header: {
        ClientSessionId?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group"];
        "application/x-www-form-urlencoded": components["schemas"]["Group"];
        "multipart/form-data": components["schemas"]["Group"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupUserGroup"];
        };
      };
    };
  };
  delete_group: {
    /** @description Deletes an existing group if the authorized user belongs to the group. All the applications, databases, tables etc that were in the group are going to be deleted also. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Deletes the group related to the provided value. */
      path: {
        group_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_USER_INVALID_GROUP_PERMISSIONS" | "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_group: {
    /** @description Updates the existing group related to the provided `group_id` parameter if the authorized user belongs to the group. It is not yet possible to add additional users to a group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description Updates the group related to the provided value. */
      path: {
        group_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedGroup"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedGroup"];
        "multipart/form-data": components["schemas"]["PatchedGroup"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_USER_INVALID_GROUP_PERMISSIONS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  leave_group: {
    /** @description Makes the authenticated user leave the group related to the provided `group_id` if the user is in that group. If the user is the last admin in the group, he will not be able to leave it. There must always be one admin in the group, otherwise it will be left without control. If that is the case, he must either delete the group or give another member admin permissions first. */
    parameters: {
        /** @description Leaves the group related to the value. */
      path: {
        group_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_GROUP_USER_IS_LAST_ADMIN";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  group_permissions: {
    /**
     * @description Returns a the permission data necessary to determine the permissions of a specific user over a specific group. 
     * See `core.handler.CoreHandler.get_permissions()` for more details.
     */
    parameters: {
        /** @description The group id we want the permission object for. */
      path: {
        group_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["PermissionObject"])[];
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_group_invitation: {
    /** @description Returns the requested group invitation if the authorized user has admin right to the related group */
    parameters: {
        /** @description Returns the group invitation related to the provided value. */
      path: {
        group_invitation_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupInvitation"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_USER_INVALID_GROUP_PERMISSIONS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_INVITATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_group_invitation: {
    /** @description Deletes a group invitation if the authorized user has admin rights to the related group. */
    parameters: {
        /** @description Deletes the group invitation related to the provided value. */
      path: {
        group_invitation_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_USER_INVALID_GROUP_PERMISSIONS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_INVITATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_group_invitation: {
    /** @description Updates the existing group invitation related to the provided `group_invitation_id` param if the authorized user has admin rights to the related group. */
    parameters: {
        /** @description Updates the group invitation related to the provided value. */
      path: {
        group_invitation_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUpdateGroupInvitation"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUpdateGroupInvitation"];
        "multipart/form-data": components["schemas"]["PatchedUpdateGroupInvitation"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupInvitation"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_USER_INVALID_GROUP_PERMISSIONS" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_INVITATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  accept_group_invitation: {
    /** @description Accepts a group invitation with the given id if the email address of the user matches that of the invitation. */
    parameters: {
        /** @description Accepts the group invitation related to the provided value. */
      path: {
        group_invitation_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupUserGroup"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_INVITATION_EMAIL_MISMATCH";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_INVITATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  reject_group_invitation: {
    /** @description Rejects a group invitation with the given id if the email address of the user matches that of the invitation. */
    parameters: {
        /** @description Rejects the group invitation related to the provided value. */
      path: {
        group_invitation_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_INVITATION_EMAIL_MISMATCH";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_INVITATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_group_invitations: {
    /** @description Lists all the group invitations of the group related to the provided `group_id` parameter if the authorized user has admin rights to that group. */
    parameters: {
        /** @description Returns only invitations that are in the group related to the provided value. */
      path: {
        group_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["GroupInvitation"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_USER_INVALID_GROUP_PERMISSIONS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_group_invitation: {
    /** @description Creates a new group invitations for an email address if the authorized user has admin rights to the related group. An email containing a sign up link will be send to the user. */
    parameters: {
        /** @description Creates a group invitation to the group related to the provided value. */
      path: {
        group_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGroupInvitation"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateGroupInvitation"];
        "multipart/form-data": components["schemas"]["CreateGroupInvitation"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupInvitation"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_USER_INVALID_GROUP_PERMISSIONS" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_group_invitation_by_token: {
    /** @description Responds with the serialized group invitation if an invitation with the provided token is found. */
    parameters: {
        /** @description Returns the group invitation related to the provided token. */
      path: {
        token: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupInvitation"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "BAD_TOKEN_SIGNATURE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_INVITATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  order_groups: {
    /** @description Changes the order of the provided group ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order will be custom for each user. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderGroups"];
        "application/x-www-form-urlencoded": components["schemas"]["OrderGroups"];
        "multipart/form-data": components["schemas"]["OrderGroups"];
      };
    };
    responses: {
      /** @description No response body */
      204: never;
    };
  };
  delete_group_user: {
    /** @description Deletes a group user if the authorized user has admin rights to the related group. */
    parameters: {
        /** @description Deletes the group user related to the provided value. */
      path: {
        group_user_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_USER_INVALID_GROUP_PERMISSIONS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_INVITATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_group_user: {
    /** @description Updates the existing group user related to the provided `group_user_id` param if the authorized user has admin rights to the related group. */
    parameters: {
        /** @description Updates the group user related to the provided value. */
      path: {
        group_user_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUpdateGroupUser"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUpdateGroupUser"];
        "multipart/form-data": components["schemas"]["PatchedUpdateGroupUser"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupUser"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_USER_INVALID_GROUP_PERMISSIONS" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_USER_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_group_users: {
    /** @description Lists all the users that are in a group if the authorized user has admin permissions to the related group. To add a user to a group an invitation must be sent first. */
    parameters: {
        /** @description Search for group users by username, or email. */
        /** @description Sort group users by name, email or role. */
      query: {
        search?: string;
        sorts?: string;
      };
        /** @description Updates the group user related to the provided value. */
      path: {
        group_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["ListGroupUsersWithMemberData"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_USER_INVALID_GROUP_PERMISSIONS" | "ERROR_INVALID_SORT_DIRECTION" | "ERROR_INVALID_SORT_ATTRIBUTE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_job: {
    /** @description List all existing jobs. Jobs are task executed asynchronously in the background. You can use the `get_job` endpoint to read the currentprogress of a the job. */
    parameters: {
        /** @description A comma separated list of job ids in the desired order.The jobs will be returned in the same order as the ids.If a job id is not found it will be ignored. */
        /** @description A comma separated list of jobs state to look for. The only possible values are: `pending`, `finished` and `failed`. It's possible to exclude a state by prefixing it with a `!`. */
      query: {
        job_ids?: string;
        states?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Job_TypeJob"])[];
        };
      };
    };
  };
  create_job: {
    /** @description Creates a new job. This job runs asynchronously in the background and execute the task specific to the provided typeparameters. The `get_job` can be used to get the current state of the job. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Job_TypeCreateJob"];
        "application/x-www-form-urlencoded": components["schemas"]["Job_TypeCreateJob"];
        "multipart/form-data": components["schemas"]["Job_TypeCreateJob"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Job_TypeJob"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_MAX_JOB_COUNT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_job: {
    /** @description Returns the information related to the provided job id. This endpoint can for example be polled to get the state and progress of the job in real time. */
    parameters: {
        /** @description The job id to lookup information about. */
      path: {
        job_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Job_TypeJob"];
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_JOB_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  admin_licenses: {
    /** @description Lists all the valid licenses that are registered to this instance. A premium license can be used to unlock the premium features for a fixed amount of users. An enterprise license can similarly be used to unlock enterpise features. More information about self hosted licenses can be found on our pricing page https://baserow.io/pricing. */
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["License"])[];
        };
      };
    };
  };
  admin_register_license: {
    /** @description Registers a new license. After registering you can assign users to the license that will be able to use the license's features while the license is active. If an existing license with the same `license_id` already exists and the provided license has been issued later than that one, the existing one will be upgraded. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterLicense"];
        "application/x-www-form-urlencoded": components["schemas"]["RegisterLicense"];
        "multipart/form-data": components["schemas"]["RegisterLicense"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["License"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_INVALID_LICENSE" | "ERROR_UNSUPPORTED_LICENSE" | "ERROR_PREMIUM_LICENSE_INSTANCE_ID_MISMATCH" | "ERROR_LICENSE_HAS_EXPIRED" | "ERROR_LICENSE_ALREADY_EXISTS";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  admin_get_license: {
    /** @description Responds with detailed information about the license related to the provided parameter. */
    parameters: {
        /** @description The internal identifier of the license. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LicenseWithUsers"];
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_LICENSE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  admin_remove_license: {
    /** @description Removes the existing license related to the provided parameter. If the license is active, then all the users that are using the license will lose access to the features granted by that license. */
    parameters: {
        /** @description The internal identifier of the license, this is `id` and not `license_id`. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_LICENSE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  admin_add_user_to_license: {
    /** @description Adds the user related to the provided parameter and to the license related to the parameter. This only happens if there are enough seats left on the license and if the user is not already on the license. */
    parameters: {
        /** @description The internal identifier of the license, this is `id` and not `license_id`. */
        /** @description The ID of the user that must be added to the license. */
      path: {
        id: number;
        user_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LicenseUser"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_ALREADY_ON_LICENSE" | "ERROR_NO_SEATS_LEFT_IN_LICENSE" | "ERROR_CANT_MANUALLY_CHANGE_SEATS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_LICENSE_DOES_NOT_EXIST" | "ERROR_USER_NOT_FOUND";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  admin_remove_user_from_license: {
    /** @description Removes the user related to the provided parameter and to the license related to the parameter. This only happens if the user is on the license, otherwise nothing will happen. */
    parameters: {
        /** @description The internal identifier of the license, this is `id` and not `license_id`. */
        /** @description The ID of the user that must be removed from the license. */
      path: {
        id: number;
        user_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_CANT_MANUALLY_CHANGE_SEATS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_LICENSE_DOES_NOT_EXIST" | "ERROR_USER_NOT_FOUND";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  admin_license_check: {
    /** @description This endpoint checks with the authority if the license needs to be updated. It also checks if the license is operating within its limits and might take action on that. It could also happen that the license has been deleted because there is an instance id mismatch or because it's invalid. In that case a `204` status code is returned. */
    parameters: {
        /** @description The internal identifier of the license, this is `id` and not `license_id`. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LicenseWithUsers"];
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_LICENSE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  admin_fill_remaining_seats_of_license: {
    /** @description Fills the remaining empty seats of the license with the first users that are found. */
    parameters: {
        /** @description The internal identifier of the license, this is `id` and not `license_id`. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["LicenseUser"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_CANT_MANUALLY_CHANGE_SEATS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_LICENSE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  admin_license_lookup_users: {
    /** @description This endpoint can be used to lookup users that can be added to a  license. Users that are already in the license are not returned here. Optionally a `search` query parameter can be provided to filter the results. */
    parameters: {
        /** @description Defines which page of users should be returned. */
        /** @description If provided, only users where the name or email contains the value are returned. */
        /** @description Defines how many users should be returned per page. */
      query: {
        page?: number;
        search?: string;
        size?: number;
      };
        /** @description The internal identifier of the license, this is `id` and not `license_id`. */
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSerializerLicenseUserLookup"];
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_LICENSE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  admin_remove_all_users_from_license: {
    /** @description Removes all the users the users that are on the license. This will empty all the seats. */
    parameters: {
        /** @description The internal identifier of the license, this is `id` and not `license_id`. */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_CANT_MANUALLY_CHANGE_SEATS";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_LICENSE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_role_assignments: {
    /** @description You can list the role assignments within a group, optionally filtered downto a specific scope inside of that group. If the scope isn't specified,the group will be considered the scope. */
    parameters: {
        /** @description The id of the scope you are trying to get all roleassignments for. */
        /** @description The type of scope you are trying to get all roleassignments for. */
      query: {
        scope_id?: number;
        scope_type?: string;
      };
        /** @description The group in which the role assignments are related to. */
      path: {
        group_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["OpenApiRoleAssignment"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_SCOPE_DOES_NOT_EXIST" | "ERROR_GROUP_DOES_NOT_EXIST" | "ERROR_OBJECT_SCOPE_TYPE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  assign_role: {
    /** @description You can assign a role to a subject into the given group for the given scope with this endpoint. If you want to remove the role you can omit the role property. */
    parameters: {
        /** @description The group in which the role assignment takes place. */
      path: {
        group_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRoleAssignment"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateRoleAssignment"];
        "multipart/form-data": components["schemas"]["CreateRoleAssignment"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OpenApiRoleAssignment"];
        };
      };
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_CANT_ASSIGN_ROLE_EXCEPTION_TO_ADMIN";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_SCOPE_DOES_NOT_EXIST" | "ERROR_GROUP_DOES_NOT_EXIST" | "ERROR_OBJECT_SCOPE_TYPE_DOES_NOT_EXIST" | "ERROR_SUBJECT_TYPE_DOES_NOT_EXIST" | "ERROR_ROLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  batch_assign_role: {
    /** @description You can assign a role to a multiple subjects into the given group for the given scope with this endpoint. If you want to remove the role you canomit the role property. */
    parameters: {
        /** @description The group in which the role assignment takes place. */
      path: {
        group_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchCreateRoleAssignment"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchCreateRoleAssignment"];
        "multipart/form-data": components["schemas"]["BatchCreateRoleAssignment"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["OpenApiRoleAssignment"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_DUPLICATE_ROLE_ASSIGNMENTS" | "ERROR_CANT_ASSIGN_ROLE_EXCEPTION_TO_ADMIN";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_SCOPE_DOES_NOT_EXIST" | "ERROR_GROUP_DOES_NOT_EXIST" | "ERROR_OBJECT_SCOPE_TYPE_DOES_NOT_EXIST" | "ERROR_SUBJECT_TYPE_DOES_NOT_EXIST" | "ERROR_ROLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_row_comments: {
    /** @description Returns all row comments for the specified table and row. */
    parameters: {
        /** @description Defines how many rows should be returned. */
        /** @description Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned. */
        /** @description Defines which page of rows should be returned. Either the `page` or `limit` can be provided, not both. */
        /** @description Can only be used in combination with the `page` parameter and defines how many rows should be returned. */
      query: {
        limit?: number;
        offset?: number;
        page?: number;
        size?: number;
      };
        /** @description The row to get row comments for. */
        /** @description The table the row is in. */
      path: {
        row_id: number;
        table_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSerializerRowComment"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_ROW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_row_comment: {
    /** @description Creates a comment on the specified row. */
    parameters: {
        /** @description The row to create a comment for. */
        /** @description The table to find the row to comment on in. */
      path: {
        row_id: number;
        table_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RowCommentCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["RowCommentCreate"];
        "multipart/form-data": components["schemas"]["RowCommentCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RowComment"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TABLE_DOES_NOT_EXIST" | "ERROR_ROW_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_settings: {
    /** @description Responds with all the admin configured settings. */
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Settings"];
        };
      };
    };
  };
  get_instance_id: {
    /** @description Responds with the self hosted instance id. Only a user with staff permissions can request it. */
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InstanceId"];
        };
      };
    };
  };
  update_settings: {
    /** @description Updates the admin configured settings if the user has admin permissions. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSettings"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSettings"];
        "multipart/form-data": components["schemas"]["PatchedSettings"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Settings"];
        };
      };
    };
  };
  delete_snapshot: {
    /** @description Deletes a snapshot. Deleting a snapshot doesn't affect the application that the snapshot is made from and doesn't affect any applications that were created by restoring it. Snapshot deletion is permanent and can't be undone. */
    parameters: {
        /** @description Id of the snapshot to delete. */
      path: {
        snapshot_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_APPLICATION_OPERATION_NOT_SUPPORTED" | "ERROR_SNAPSHOT_IS_BEING_RESTORED" | "ERROR_SNAPSHOT_IS_BEING_DELETED" | "ERROR_SNAPSHOT_OPERATION_LIMIT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_SNAPSHOT_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  restore_snapshot: {
    /** @description Restores a snapshot. When an application snapshot is restored, a new application will be created in the same group that the original application was placed in with the name of the snapshot and data that were in the original application at the time the snapshot was taken. The original application that the snapshot was taken from is unaffected. Snapshots can be restored multiple times and a number suffix is added to the new application name in the case of a collision. */
    parameters: {
        /** @description Id of the snapshot to restore. */
      path: {
        snapshot_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Job"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_APPLICATION_OPERATION_NOT_SUPPORTED" | "ERROR_SNAPSHOT_IS_BEING_RESTORED" | "ERROR_SNAPSHOT_IS_BEING_DELETED" | "ERROR_SNAPSHOT_OPERATION_LIMIT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_SNAPSHOT_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_snapshots: {
    /** @description Lists snapshots that were created for a given application. */
    parameters: {
        /** @description Application ID for which to list snapshots. */
      path: {
        application_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Snapshot"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_snapshot: {
    /** @description Creates a new application snapshot. Snapshots represent a state of an application at a specific point in time and can be restored later, making it easy to create backups of entire applications. */
    parameters: {
        /** @description Application ID for which to list snapshots. */
      path: {
        application_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Snapshot"];
        "application/x-www-form-urlencoded": components["schemas"]["Snapshot"];
        "multipart/form-data": components["schemas"]["Snapshot"];
      };
    };
    responses: {
      202: {
        content: {
          "application/json": components["schemas"]["Job"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_MAXIMUM_SNAPSHOTS_REACHED" | "ERROR_APPLICATION_OPERATION_NOT_SUPPORTED" | "ERROR_SNAPSHOT_IS_BEING_CREATED" | "ERROR_SNAPSHOT_NAME_NOT_UNIQUE" | "ERROR_SNAPSHOT_OPERATION_LIMIT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  oauth_provider_login_callback: {
    /** @description Processes callback from OAuth2 provider and logs the user in if successful. */
    parameters: {
        /** @description The id of the provider for which to process the callback. */
      query: {
        code?: number;
      };
        /** @description The id of the provider for which to process the callback. */
      path: {
        provider_id: number;
      };
    };
    responses: {
      /** @description No response body */
      302: never;
    };
  };
  oauth_provider_login_redirect: {
    /** @description Redirects to the OAuth2 provider's authentication URL based on the provided auth provider's id. */
    parameters: {
        /** @description The invitation token sent to the user to join a specific group. */
        /** @description The relative part of URL that the user wanted to access. */
      query: {
        group_invitation_token?: string;
        original?: number;
      };
        /** @description The id of the provider for redirect. */
      path: {
        provider_id: number;
      };
    };
    responses: {
      /** @description No response body */
      302: never;
    };
  };
  auth_provider_saml_acs_url: {
    /** @description Complete the SAML authentication flow by validating the SAML response. Sign in the user if already exists in Baserow or create a new one otherwise. Once authenticated, the user will be redirected to the original URL they were trying to access. If the response is invalid, the user will be redirected to an error page with a specific error message.It accepts the language code and the group invitation token as query parameters if provided. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SAMLResponse"];
        "application/x-www-form-urlencoded": components["schemas"]["SAMLResponse"];
        "multipart/form-data": components["schemas"]["SAMLResponse"];
      };
    };
    responses: {
      /** @description No response body */
      302: never;
    };
  };
  auth_provider_saml_sp_login: {
    /** @description This is the endpoint that is called when the user wants to initiate a SSO SAML login from Baserow (the service provider). The user will be redirected to the SAML identity provider (IdP) where the user can authenticate. Once logged in in the IdP, the user will be redirected back to the assertion consumer service endpoint (ACS) where the SAML response will be validated and a new JWT session token will be provided to work with Baserow APIs. */
    parameters: {
        /** @description The email address of the user that want to sign in using SAML. */
        /** @description If provided and valid, the user accepts the group invitation and will have access to the group after login or signing up. */
        /** @description An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB. */
        /** @description The url to which the user should be redirected after a successful login or sign up. */
      query: {
        email?: string;
        group_invitation_token?: string;
        language?: string;
        original?: string;
      };
    };
    responses: {
      /** @description No response body */
      302: never;
    };
  };
  auth_provider_login_url: {
    /** @description Return the correct redirect_url to initiate the SSO SAML login. It needs an email address if multiple SAML providers are configured otherwise the only configured SAML provider signup URL will be returned. */
    parameters: {
        /** @description The email address of the user that want to sign in using SAML. */
        /** @description If provided and valid, the user accepts the group invitation and will have access to the group after login or signing up. */
        /** @description An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB. */
        /** @description The url to which the user should be redirected after a successful login. */
      query: {
        email?: string;
        group_invitation_token?: string;
        language?: string;
        original?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            [key: string]: unknown | undefined;
          };
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_SAML_INVALID_LOGIN_REQUEST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_team: {
    /** @description Returns the information related to the provided team id. */
    parameters: {
        /** @description Returns the team related to the provided value. */
      path: {
        team_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamResponse"];
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TEAM_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_team: {
    /** @description Updates an existing team with a new name. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
      header: {
        ClientSessionId?: string;
      };
      path: {
        team_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Team"];
        "application/x-www-form-urlencoded": components["schemas"]["Team"];
        "multipart/form-data": components["schemas"]["Team"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_TEAM_NAME_NOT_UNIQUE" | "ERROR_SUBJECT_BAD_REQUEST\"";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TEAM_DOES_NOT_EXIST" | "ERROR_SUBJECT_DOES_NOT_EXIST" | "ERROR_ROLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_team: {
    /** @description Deletes a team if the authorized user is in the team's group. All the related children (e.g. subjects) are also going to be deleted. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
      header: {
        ClientSessionId?: string;
      };
        /** @description Deletes the team related to the provided value. */
      path: {
        team_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TEAM_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_team_subjects: {
    /** @description Lists all team subjects in a given team. */
    parameters: {
      path: {
        team_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["TeamSubjectResponse"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TEAM_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_subject: {
    /** @description Creates a new team subject. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
      header: {
        ClientSessionId?: string;
      };
      path: {
        team_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamSubject"];
        "application/x-www-form-urlencoded": components["schemas"]["TeamSubject"];
        "multipart/form-data": components["schemas"]["TeamSubject"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamSubjectResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_SUBJECT_NOT_IN_GROUP" | "ERROR_SUBJECT_TYPE_UNSUPPORTED" | "ERROR_SUBJECT_BAD_REQUEST";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TEAM_DOES_NOT_EXIST" | "ERROR_SUBJECT_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_subject: {
    /** @description Returns the information related to the provided subject id */
    parameters: {
        /** @description Returns the subject related to the provided value. */
      path: {
        subject_id: number;
        team_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamSubjectResponse"];
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TEAM_DOES_NOT_EXIST" | "ERROR_SUBJECT_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  delete_subject: {
    /** @description Deletes a subject if the authorized user is in the team's group. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
      header: {
        ClientSessionId?: string;
      };
        /** @description The subject id to remove from the team. */
        /** @description The team id which the subject will be removed from. */
      path: {
        subject_id: number;
        team_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_TEAM_DOES_NOT_EXIST" | "ERROR_SUBJECT_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_teams: {
    /** @description Lists all teams in a given group. */
    parameters: {
        /** @description Search for teams by their name. */
        /** @description Sort teams by name or subjects. */
      query: {
        search?: string;
        sorts?: string;
      };
        /** @description Lists all teams in a given group. */
      path: {
        group_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["TeamResponse"])[];
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_team: {
    /** @description Creates a new team. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
      header: {
        ClientSessionId?: string;
      };
      path: {
        group_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Team"];
        "application/x-www-form-urlencoded": components["schemas"]["Team"];
        "multipart/form-data": components["schemas"]["Team"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamResponse"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_SUBJECT_BAD_REQUEST" | "ERROR_TEAM_NAME_NOT_UNIQUE" | "ERROR_SUBJECT_NOT_IN_GROUP" | "ERROR_SUBJECT_TYPE_UNSUPPORTED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST" | "ERROR_SUBJECT_DOES_NOT_EXIST" | "ERROR_ROLE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  list_templates: {
    /** @description Lists all the template categories and the related templates that are in that category. The template's `group_id` can be used for previewing purposes because that group contains the applications that are in the template. All the `get` and `list` endpoints related to that group are publicly accessible. */
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["TemplateCategories"])[];
        };
      };
    };
  };
  install_template: {
    /** @description (Deprecated) Installs the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description The id related to the group where the template applications must be installed into. */
        /** @description The id related to the template that must be installed. */
      path: {
        group_id: number;
        template_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Applications"])[];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_TEMPLATE_FILE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST" | "ERROR_TEMPLATE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  install_template_async: {
    /** @description Start an async job to install the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications. */
    parameters: {
        /** @description An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone. */
        /** @description An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call. */
      header: {
        ClientSessionId?: string;
        ClientUndoRedoActionGroupId?: string;
      };
        /** @description The id related to the group where the template applications must be installed into. */
        /** @description The id related to the template that must be installed. */
      path: {
        group_id: number;
        template_id: number;
      };
    };
    responses: {
      202: {
        content: {
          "application/json": components["schemas"]["InstallTemplateJobJob"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_TEMPLATE_FILE_DOES_NOT_EXIST" | "ERROR_MAX_JOB_COUNT_EXCEEDED";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_DOES_NOT_EXIST" | "ERROR_TEMPLATE_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  get_trash_structure: {
    /** @description Responds with the groups and applications available for the requesting user to inspect the trash contents of. */
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrashStructure"];
        };
      };
    };
  };
  get_contents: {
    /** @description Responds with trash contents for a group optionally filtered to a specific application. */
    parameters: {
        /** @description Optionally filters down the trash to only items for this application in the group. */
        /** @description Selects which page of trash contents should be returned. */
      query: {
        application_id?: number;
        page?: number;
      };
        /** @description Returns the trash for the group with this id. */
      path: {
        group_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSerializerTrashContents"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_APPLICATION_NOT_IN_GROUP" | "ERROR_GROUP_DOES_NOT_EXIST" | "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  empty_contents: {
    /** @description Empties the specified group and/or application of trash, including the group and application themselves if they are trashed also. */
    parameters: {
        /** @description Optionally filters down the trash to delete to only items for this application in the group. */
      query: {
        application_id?: number;
      };
        /** @description The group whose trash contents to empty, including the group itself if it is also trashed. */
      path: {
        group_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_APPLICATION_NOT_IN_GROUP" | "ERROR_GROUP_DOES_NOT_EXIST" | "ERROR_APPLICATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  restore: {
    /** @description Restores the specified trashed item back into baserow. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTrashEntryRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTrashEntryRequest"];
        "multipart/form-data": components["schemas"]["PatchedTrashEntryRequest"];
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_USER_NOT_IN_GROUP" | "ERROR_TRASH_ITEM_DOES_NOT_EXIST" | "ERROR_CANNOT_RESTORE_PARENT_BEFORE_CHILD" | "ERROR_PARENT_ID_MUST_NOT_BE_PROVIDED" | "ERROR_PARENT_ID_MUST_BE_PROVIDED" | "ERROR_CANT_RESTORE_AS_RELATED_TABLE_TRASHED";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  create_user: {
    /** @description Creates a new user based on the provided values. If desired an authentication JWT can be generated right away. After creating an account the initial group containing a database is created. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Register"];
        "application/x-www-form-urlencoded": components["schemas"]["Register"];
        "multipart/form-data": components["schemas"]["Register"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @description An object containing information related to the user. */
            user?: {
              /** @description The first name of related user. */
              first_name?: string;
              /**
               * Format: email 
               * @description The username of the related user. This is always an email address.
               */
              username?: string;
              /** @description An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB. */
              language?: string;
            };
            /**
             * @deprecated 
             * @description Deprecated. Use the `access_token` instead.
             */
            token?: string;
            /** @description 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes. */
            access_token?: string;
            /** @description 'refresh_token' can be used to get a new valid 'access_token'. This token will be valid for 168 hours. */
            refresh_token?: string;
          };
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_ALREADY_EXISTS" | "ERROR_GROUP_INVITATION_DOES_NOT_EXIST" | "ERROR_REQUEST_BODY_VALIDATION" | "BAD_TOKEN_SIGNATURE";
            detail?: string | Record<string, never>;
          };
        };
      };
      404: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_GROUP_INVITATION_DOES_NOT_EXIST";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  upload_file: {
    /** @description Uploads a file to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents. */
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserFile"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_INVALID_FILE" | "ERROR_FILE_SIZE_TOO_LARGE";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  upload_via_url: {
    /** @description Uploads a file to Baserow by downloading it from the provided URL. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserFileUploadViaURLRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["UserFileUploadViaURLRequest"];
        "multipart/form-data": components["schemas"]["UserFileUploadViaURLRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserFile"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_INVALID_FILE" | "ERROR_FILE_SIZE_TOO_LARGE" | "ERROR_FILE_URL_COULD_NOT_BE_REACHED" | "ERROR_INVALID_FILE_URL";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  update_account: {
    /** @description Updates the account information of the authenticated user. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedAccount"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedAccount"];
        "multipart/form-data": components["schemas"]["PatchedAccount"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  change_password: {
    /** @description Changes the password of an authenticated user, but only if the old password matches. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordBodyValidation"];
        "application/x-www-form-urlencoded": components["schemas"]["ChangePasswordBodyValidation"];
        "multipart/form-data": components["schemas"]["ChangePasswordBodyValidation"];
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_INVALID_OLD_PASSWORD" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  dashboard: {
    /** @description Lists all the relevant user information that for example could be shown on a dashboard. It will contain all the pending group invitations for that user. */
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
  };
  redo: {
    /** @description Redoes the latest redoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be redone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters. */
    parameters: {
        /** @description The particular client session to redo actions for. The actions must have been performed with this same header set with the same value for them to be redoable by this endpoint. */
      header: {
        ClientSessionId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUndoRedoRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUndoRedoRequest"];
        "multipart/form-data": components["schemas"]["PatchedUndoRedoRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UndoRedoResponse"];
        };
      };
    };
  };
  reset_password: {
    /** @description Changes the password of a user if the reset token is valid. The **send_password_reset_email** endpoint sends an email to the user containing the token. That token can be used to change the password here without providing the old password. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordBodyValidation"];
        "application/x-www-form-urlencoded": components["schemas"]["ResetPasswordBodyValidation"];
        "multipart/form-data": components["schemas"]["ResetPasswordBodyValidation"];
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "BAD_TOKEN_SIGNATURE" | "EXPIRED_TOKEN_SIGNATURE" | "ERROR_USER_NOT_FOUND" | "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  schedule_account_deletion: {
    /** @description Schedules the account deletion of the authenticated user. The user will be permanently deleted after the grace delay defined by the instance administrator. */
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_REQUEST_BODY_VALIDATION";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  send_password_reset_email: {
    /** @description Sends an email containing the password reset link to the email address of the user. This will only be done if a user is found with the given email address. The endpoint will not fail if the email address is not found. The link is going to the valid for 48 hours. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendResetPasswordEmailBodyValidation"];
        "application/x-www-form-urlencoded": components["schemas"]["SendResetPasswordEmailBodyValidation"];
        "multipart/form-data": components["schemas"]["SendResetPasswordEmailBodyValidation"];
      };
    };
    responses: {
      /** @description No response body */
      204: never;
      400: {
        content: {
          "application/json": {
            /**
             * @description Machine readable error indicating what went wrong. 
             * @enum {string}
             */
            error?: "ERROR_REQUEST_BODY_VALIDATION" | "ERROR_HOSTNAME_IS_NOT_ALLOWED";
            detail?: string | Record<string, never>;
          };
        };
      };
    };
  };
  token_auth: {
    /** @description Authenticates an existing user based on their email and their password. If successful, an access token and a refresh token will be returned. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenObtainPairWithUser"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPairWithUser"];
        "multipart/form-data": components["schemas"]["TokenObtainPairWithUser"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @description An object containing information related to the user. */
            user?: {
              /** @description The first name of related user. */
              first_name?: string;
              /**
               * Format: email 
               * @description The username of the related user. This is always an email address.
               */
              username?: string;
              /** @description An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB. */
              language?: string;
            };
            /**
             * @deprecated 
             * @description Deprecated. Use the `access_token` instead.
             */
            token?: string;
            /** @description 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes. */
            access_token?: string;
            /** @description 'refresh_token' can be used to get a new valid 'access_token'. This token will be valid for 168 hours. */
            refresh_token?: string;
          };
        };
      };
      401: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  token_refresh: {
    /** @description Generate a new access_token that can be used to continue operating on Baserow starting from a valid refresh token. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TokenRefreshWithUser"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshWithUser"];
        "multipart/form-data": components["schemas"]["TokenRefreshWithUser"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @description An object containing information related to the user. */
            user?: {
              /** @description The first name of related user. */
              first_name?: string;
              /**
               * Format: email 
               * @description The username of the related user. This is always an email address.
               */
              username?: string;
              /** @description An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB. */
              language?: string;
            };
            /**
             * @deprecated 
             * @description Deprecated. Use the `access_token` instead.
             */
            token?: string;
            /** @description 'access_token' can be used to authorize for other endpoints that require authorization. This token will be valid for 10 minutes. */
            access_token?: string;
          };
        };
      };
      401: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  token_verify: {
    /** @description Verifies if the refresh token is valid and can be used to generate a new access_token. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenVerifyWithUser"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenVerifyWithUser"];
        "multipart/form-data": components["schemas"]["TokenVerifyWithUser"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @description An object containing information related to the user. */
            user?: {
              /** @description The first name of related user. */
              first_name?: string;
              /**
               * Format: email 
               * @description The username of the related user. This is always an email address.
               */
              username?: string;
              /** @description An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB. */
              language?: string;
            };
          };
        };
      };
      401: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  undo: {
    /** @description undoes the latest undoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be undone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters. */
    parameters: {
        /** @description The particular client session to undo actions for. The actions must have been performed with this same header set with the same value for them to be undoable by this endpoint. */
      header: {
        ClientSessionId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUndoRedoRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUndoRedoRequest"];
        "multipart/form-data": components["schemas"]["PatchedUndoRedoRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UndoRedoResponse"];
        };
      };
    };
  };
}
